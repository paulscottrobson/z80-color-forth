              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-23 15:54:56
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop = $7EF0 									; Top of stack
7B08:         	EditBuffer = $7B08 									; 512 byte edit buffer to $7D10
7D40:         	COMWorkingStack = $7D40 							; working stack while compiling.
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	BootstrapPage = $22 								; bootstrap page
0024:         	FirstCodePage = $24 								; first page of actual code.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 008B    			dw 		SystemInformationTable
              	
8006: ED7B108B	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
800A: F3      			di											; disable interrupts
              		
800B: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
              			
800F: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8011: CDE680  			call 	GFXMode
              	
8014: 3A068B  			ld 		a,(SIBootCodePage) 					; get the page to start
8017: CD2580  			call 	PAGEInitialise
801A: 2A048B  			ld 		hl,(SIBootCodeAddress) 				; get boot address
801D: E9      			jp 		(hl) 								; and go there
              	
801E:         	ErrorHandler:
801E: 00      			nop
801F: 18FD    			jr 		ErrorHandler
              			
8021: F3      	HaltZ80:di 											; stop everything.
8022: 76      			halt
8023: 18FC    			jr 		HaltZ80
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8025:         	PAGEInitialise:
8025: ED9256  			db 		$ED,$92,$56							; switch to page A
8028: 3C      			inc 	a
8029: ED9257  			db 		$ED,$92,$57
802C: 3D      			dec 	a
802D: 08      			ex 		af,af' 								; put page in A'
802E: 21168B  			ld 		hl,PAGEStackBase 					; reset the page stack
8031: 22148B  			ld 		(PAGEStackPointer),hl
8034: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8035:         	PAGESwitch:
8035: F5      			push 	af
8036: E5      			push 	hl
              	
8037: F5      			push 	af 									; save A on stack
8038: 2A148B  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
803B: 08      			ex 		af,af'
803C: 77      			ld 		(hl),a
803D: 23      			inc 	hl
803E: 22148B  			ld 		(PAGEStackPointer),hl
              	
8041: F1      			pop 	af 									; restore new A
8042: ED9256  			db 		$ED,$92,$56							; switch to page A
8045: 3C      			inc 	a
8046: ED9257  			db 		$ED,$92,$57
8049: 3D      			dec 	a
804A: 08      			ex 		af,af' 								; put page in A'
              	
804B: E1      			pop 	hl
804C: F1      			pop 	af
804D: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
804E:         	PAGERestore:
804E: F5      			push 	af
804F: E5      			push 	hl
8050: 2A148B  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
8053: 2B      			dec 	hl
8054: 7E      			ld 		a,(hl)
8055: 22148B  			ld 		(PAGEStackPointer),hl
8058: ED9256  			db 		$ED,$92,$56							; switch to page A
805B: 3C      			inc 	a
805C: ED9257  			db 		$ED,$92,$57
805F: 3D      			dec 	a
8060: 08      			ex 		af,af' 								; reset A'
8061: E1      			pop 	hl
8062: F1      			pop 	af
8063: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              		
8064:         	FARCompileByte:
8064: F5      			push 	af 									; save byte and HL
8065: E5      			push 	hl
8066: F5      			push 	af 									; save byte
8067: 3A028B  			ld		a,(SINextFreeCodePage) 				; switch to page
806A: CD3580  			call 	PAGESwitch
806D: 2A008B  			ld 		hl,(SINextFreeCode) 				; write to memory location
8070: F1      			pop 	af
8071: 77      			ld 		(hl),a
8072: 23      			inc 	hl 									; bump memory location
8073: 22008B  			ld 		(SINextFreeCode),hl 				; write back
8076: CD4E80  			call 	PAGERestore
8079: E1      			pop 	hl 									; restore and exit
807A: F1      			pop 	af
807B: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
807C:         	FARCompileWord:
807C: F5      			push 	af 									; save byte and HL
807D: D5      			push 	de
807E: E5      			push 	hl
807F: EB      			ex 		de,hl 								; word into DE
8080: 3A028B  			ld		a,(SINextFreeCodePage) 				; switch to page
8083: CD3580  			call 	PAGESwitch
8086: 2A008B  			ld 		hl,(SINextFreeCode) 				; write to memory location
8089: 73      			ld 		(hl),e
808A: 23      			inc 	hl 	
808B: 72      			ld 		(hl),d
808C: 23      			inc 	hl
808D: 22008B  			ld 		(SINextFreeCode),hl 				; write back
8090: CD4E80  			call 	PAGERestore
8093: E1      			pop 	hl
8094: D1      			pop 	de 									; restore and exit
8095: F1      			pop 	af
8096: C9      			ret
              												
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8097:         	DIVDivideMod16:
              	
8097: C5      		push 	bc
8098: 42      		ld 		b,d 				; DE 
8099: 4B      		ld 		c,e
809A: EB      		ex 		de,hl
809B: 210000  		ld 		hl,0
809E: 78      		ld 		a,b
809F: 0608    		ld 		b,8
80A1:         	Div16_Loop1:
80A1: 17      		rla
80A2: ED6A    		adc 	hl,hl
80A4: ED52    		sbc 	hl,de
80A6: 3001    		jr 		nc,Div16_NoAdd1
80A8: 19      		add 	hl,de
80A9:         	Div16_NoAdd1:
80A9: 10F6    		djnz 	Div16_Loop1
80AB: 17      		rla
80AC: 2F      		cpl
80AD: 47      		ld 		b,a
80AE: 79      		ld 		a,c
80AF: 48      		ld 		c,b
80B0: 0608    		ld 		b,8
80B2:         	Div16_Loop2:
80B2: 17      		rla
80B3: ED6A    		adc 	hl,hl
80B5: ED52    		sbc 	hl,de
80B7: 3001    		jr 		nc,Div16_NoAdd2
80B9: 19      		add 	hl,de
80BA:         	Div16_NoAdd2:
80BA: 10F6    		djnz 	Div16_Loop2
80BC: 17      		rla
80BD: 2F      		cpl
80BE: 51      		ld 		d,c
80BF: 5F      		ld 		e,a
80C0: C1      		pop 	bc
80C1: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80C2:         	MULTMultiply16:
80C2: C5      			push 	bc
80C3: D5      			push 	de
80C4: 44      			ld 		b,h 							; get multipliers in DE/BC
80C5: 4D      			ld 		c,l
80C6: 210000  			ld 		hl,0 							; zero total
80C9:         	__Core__Mult_Loop:
80C9: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80CB: 2801    			jr 		z,__Core__Mult_Shift
80CD: 19      			add 	hl,de 							; add adder to total
80CE:         	__Core__Mult_Shift:
80CE: CB38    			srl 	b 								; shift BC right.
80D0: CB19    			rr 		c
80D2: EB      			ex 		de,hl 							; shift DE left
80D3: 29      			add 	hl,hl
80D4: EB      			ex 		de,hl
80D5: 78      			ld 		a,b 							; loop back if BC is nonzero
80D6: B1      			or 		c
80D7: 20F0    			jr 		nz,__Core__Mult_Loop
80D9: D1      			pop 	de
80DA: C1      			pop 	bc
80DB: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
80DC:         	GFXClearScreen:
80DC: E5      			push 	hl 									; clear screen by reinitialising
80DD: 3A3B8B  			ld 		a,(DIScreenMode)
80E0: 6F      			ld 		l,a
80E1: CDE680  			call 	GFXMode
80E4: E1      			pop 	hl
80E5: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80E6:         	GFXMode:
80E6: C5      			push 	bc
80E7: D5      			push 	de
80E8: E5      			push 	hl
80E9: 7D      			ld 		a,l 								; save current mode
80EA: 323B8B  			ld 		(DIScreenMode),a
80ED: 2D      			dec 	l 									; L = 1 mode layer2
80EE: 2808    			jr 		z,__GFXLayer2
80F0: 2D      			dec 	l
80F1: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80F3: CD5082  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80F6: 1808    			jr 		__GFXConfigure
              	
80F8:         	__GFXLayer2:
80F8: CDB382  			call 	GFXInitialiseLayer2
80FB: 1803    			jr 		__GFXConfigure
              	
80FD:         	__GFXLowRes:
80FD: CD4A83  			call 	GFXInitialiseLowRes
              	
8100:         	__GFXConfigure:
8100: 7D      			ld 		a,l 								; save screen size
8101: 32278B  			ld 		(DIScreenWidth),a
8104: 7C      			ld 		a,h
8105: 322B8B  			ld 		(DIScreenHeight),a
8108: EB      			ex 		de,hl 								; save driver
8109: 22338B  			ld 		(DIScreenDriver),hl
              	
810C: 6A      			ld 		l,d 								; put sizes in HL DE
810D: 2600    			ld 		h,0
810F: 1600    			ld 		d,0
8111: CDC280  			call 	MULTMultiply16 						; multiply to get size and store.
8114: 222F8B  			ld 		(DIScreenSize),hl
              	
8117: E1      			pop 	hl
8118: D1      			pop 	de
8119: C1      			pop 	bc
811A: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
811B:         	GFXWriteCharacter:
811B: F5      			push 	af
811C: C5      			push 	bc
811D: D5      			push 	de
811E: E5      			push 	hl
811F: 012981  			ld 		bc,__GFXWCExit
8122: C5      			push 	bc
8123: ED4B338B			ld 		bc,(DIScreenDriver)
8127: C5      			push 	bc
8128: C9      			ret
8129:         	__GFXWCExit:
8129: E1      			pop 	hl
812A: D1      			pop 	de
812B: C1      			pop 	bc
812C: F1      			pop 	af
812D: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
812E:         	GFXWriteHexWord:
812E: 3E06    			ld 		a,6 
8130:         	GFXWriteHexWordA:
8130: C5      			push 	bc
8131: D5      			push 	de
8132: E5      			push 	hl
8133: 4F      			ld 		c,a
8134: 7A      			ld 		a,d
8135: D5      			push 	de
8136: CD4281  			call 	__GFXWHByte
8139: D1      			pop 	de
813A: 7B      			ld 		a,e
813B: CD4281  			call	__GFXWHByte
813E: E1      			pop 	hl
813F: D1      			pop 	de
8140: C1      			pop 	bc
8141: C9      			ret
              	
8142:         	__GFXWHByte:
8142: F5      			push 	af
8143: CB0F    			rrc 	a
8145: CB0F    			rrc		a
8147: CB0F    			rrc 	a
8149: CB0F    			rrc 	a
814B: CD4F81  			call 	__GFXWHNibble
814E: F1      			pop 	af
814F:         	__GFXWHNibble:
814F: 51      			ld 		d,c
8150: E60F    			and 	15
8152: FE0A    			cp 		10
8154: 3802    			jr 		c,__GFXWHDigit
8156: C607    			add		a,7
8158:         	__GFXWHDigit:
8158: C630    			add 	a,48
815A: 5F      			ld 		e,a
815B: CD1B81  			call 	GFXWriteCharacter
815E: 23      			inc 	hl
815F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8160:         	GFXGetFontGraphicDE:
8160: F5      			push 	af
8161: E5      			push 	hl
8162: E67F    			and 	$7F 								; bits 0-6 only.
8164: D620    			sub 	32
8166: 6F      			ld 		l,a 								; put in HL
8167: 2600    			ld 		h,0
8169: 29      			add 	hl,hl 								; x 8
816A: 29      			add 	hl,hl
816B: 29      			add 	hl,hl
816C: ED5B378B			ld 		de,(DIFontBase) 					; add the font base.
8170: 19      			add 	hl,de
8171: EB      			ex 		de,hl 								; put in DE (font address)
              	
8172: E1      			pop 	hl
8173: F1      			pop 	af
8174: FE7F    			cp 		$7F 								; map $7F to the prompt character
8176: C0      			ret 	nz
8177: 117B81  			ld 		de,__GFXPromptCharacter
817A: C9      			ret
              	
817B:         	__GFXPromptCharacter:
817B: FC7E3F1F			db 		$FC,$7E,$3F,$1F
817F: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8183:         	IOScanKeyboard:
8183: C5      			push 	bc
8184: D5      			push 	de
8185: E5      			push 	hl
              	
8186: 21D881  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8189: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
818B: 06FE    			ld 		b,$FE
818D: ED78    			in 		a,(c)
818F: CB47    			bit 	0,a
8191: 2005    			jr 		nz,__kr1
8193: 212882  			ld 		hl,__kr_shift_table
8196: 180B    			jr 		__kr2
8198:         	__kr1:
8198: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
819A: ED78    			in 		a,(c)
819C: CB4F    			bit 	1,a
819E: 2003    			jr 		nz,__kr2
81A0: 210082  			ld 		hl,__kr_symbol_shift_table
81A3:         	__kr2:
              	
81A3: 1EFE    			ld 		e,$FE 								; scan pattern.
81A5: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81A6: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81A8: FEFE    			cp 		$FE
81AA: 2808    			jr 		z,___kr4
81AC: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81AE: FE7F    			cp 		$7F
81B0: 2802    			jr 		z,___kr4
81B2: 161F    			ld 		d,$01F 								; check all bits.
81B4:         	___kr4:
81B4: 43      			ld 		b,e 								; scan the keyboard
81B5: 0EFE    			ld 		c,$FE
81B7: ED78    			in 		a,(c)
81B9: 2F      			cpl 										; make that active high.
81BA: A2      			and 	d  									; and with check value.
81BB: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81BD: 23      			inc 	hl 									; next set of keyboard characters
81BE: 23      			inc 	hl
81BF: 23      			inc 	hl
81C0: 23      			inc 	hl
81C1: 23      			inc 	hl
              	
81C2: 7B      			ld 		a,e 								; get pattern
81C3: 87      			add 	a,a 								; shift left
81C4: F601    			or 		1 									; set bit 1.
81C6: 5F      			ld 		e,a
              	
81C7: FEFF    			cp 		$FF 								; finished when all 1's.
81C9: 20DA    			jr 		nz,__kr3 
81CB: AF      			xor 	a
81CC: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81CE:         	__kr_keypressed:
81CE: 23      			inc 	hl  								; shift right until carry set
81CF: 1F      			rra
81D0: 30FC    			jr 		nc,__kr_keypressed
81D2: 2B      			dec 	hl 									; undo the last inc hl
81D3: 7E      			ld 		a,(hl) 								; get the character number.
81D4:         	__kr_exit:
81D4: E1      			pop 	hl
81D5: D1      			pop 	de
81D6: C1      			pop 	bc
81D7: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
81D8:         	__kr_no_shift_table:
81D8: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
81DC: 56415344	
81E0: 4647    	
81E2: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
81E6: 54313233	
81EA: 3435    	
81EC: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
81F0: 36504F49	
81F4: 5559    	
81F6: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
81FA: 4820004D	
81FE: 4E42    	
              	
8200:         	__kr_symbol_shift_table:
8200: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8204: 2F7E7C5C	
8208: 7B7D    	
820A: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
820E: 3E214023	
8212: 2425    	
8214: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8218: 26223B00	
821C: 5D5B    	
821E: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8222: 5E20002E	
8226: 2C2A    	
              	
8228:         	__kr_shift_table:
8228: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
822C: 2F7E7C5C	
8230: 7B7D    	
8232: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
8236: 3E214023	
823A: 2414    	
823C: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8240: 15223B00	
8244: 5D5B    	
8246: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
824A: 5E20002E	
824E: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8250:         	GFXInitialise48k:
8250: F5      			push 	af 									; save registers
8251: C5      			push 	bc
              	
8252: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8255: 3E00    			ld 		a,0 								; disable Layer 2
8257: ED79    			out 	(c),a
8259: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
825D: 210040  			ld 		hl,$4000 							; clear pixel memory
8260: 3600    	__cs1:	ld 		(hl),0
8262: 23      			inc 	hl
8263: 7C      			ld 		a,h
8264: FE58    			cp 		$58
8266: 20F8    			jr 		nz,__cs1
8268: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
826A: 23      			inc 	hl
826B: 7C      			ld 		a,h
826C: FE5B    			cp 		$5B
826E: 20F8    			jr 		nz,__cs2	
8270: AF      			xor 	a 									; border off
8271: D3FE    			out 	($FE),a
8273: C1      			pop 	bc
8274: F1      			pop 	af
8275: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8278: 117C82  			ld 		de,GFXPrintCharacter48k
827B: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
827C:         	GFXPrintCharacter48k:
827C: F5      			push 	af 									; save registers
827D: C5      			push 	bc
827E: D5      			push 	de
827F: E5      			push 	hl
              	
8280: 43      			ld 		b,e 								; character in B
8281: 7C      			ld 		a,h 								; check range.
8282: FE03    			cp 		3
8284: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8286: E5      			push 	hl 									; save position.
8287: 7C      			ld 		a,h
8288: C658    			add 	$58
828A: 67      			ld 		h,a
              	
828B: 7A      			ld 		a,d 								; get current colour
828C: E607    			and 	7  									; mask 0..2
828E: F640    			or 		$40  								; make bright
8290: 77      			ld 		(hl),a 								; store it.	
8291: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8292: D5      			push 	de
8293: EB      			ex 		de,hl
8294: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8295: 7A      			ld 		a,d
8296: E603    			and 	3
8298: 87      			add 	a,a
8299: 87      			add 	a,a
829A: 87      			add 	a,a
829B: F640    			or 		$40
829D: 67      			ld 		h,a
829E: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
829F: 78      			ld 		a,b 								; get character
82A0: CD6081  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
82A3: 78      			ld 		a,b
82A4: 0608    			ld 		b,8 								; copy 8 characters
82A6: 0E00    			ld 		c,0 								; XOR value 0
82A8:         	__ZXWCCopy:
82A8: 1A      			ld 		a,(de)								; get font data
82A9: 77      			ld 		(hl),a 								; write back
82AA: 24      			inc 	h 									; bump pointers
82AB: 13      			inc 	de
82AC: 10FA    			djnz 	__ZXWCCopy 							; do B times.
82AE:         	__ZXWCExit:
82AE: E1      			pop 	hl 									; restore and exit
82AF: D1      			pop 	de
82B0: C1      			pop 	bc
82B1: F1      			pop 	af
82B2: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82B3:         	GFXInitialiseLayer2:
82B3: F5      			push 	af
82B4: C5      			push 	bc
82B5: D5      			push 	de
82B6: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82BA: 1E02    			ld 		e,2 								; 3 banks to erase
82BC:         	L2PClear:
82BC: 7B      			ld 		a,e 								; put bank number in bits 6/7
82BD: CB0F    			rrc 	a
82BF: CB0F    			rrc 	a
82C1: F603    			or 		2+1 								; shadow on, visible, enable write paging
82C3: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82C6: ED79    			out 	(c),a
82C8: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82CB: 55      			ld 		d,l 								; D = 0, slightly quicker.
82CC:         	L2PClearBank: 										; assume default palette :)
82CC: 2B      			dec 	hl
82CD: 72      			ld 		(hl),d
82CE: 7C      			ld 		a,h
82CF: B5      			or 		l
82D0: 20FA    			jr		nz,L2PClearBank
82D2: 1D      			dec 	e
82D3: F2BC82  			jp 		p,L2PClear
              	
82D6: AF      			xor 	a
82D7: D3FE    			out 	($FE),a
              	
82D9: D1      			pop 	de
82DA: C1      			pop 	bc
82DB: F1      			pop 	af
82DC: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82DF: 11E382  			ld 		de,GFXPrintCharacterLayer2
82E2: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82E3:         	GFXPrintCharacterLayer2:
82E3: F5      			push 	af
82E4: C5      			push 	bc
82E5: D5      			push 	de
82E6: E5      			push 	hl
82E7: DDE5    			push 	ix
              	
82E9: 43      			ld 		b,e 								; save A temporarily
82EA: 78      			ld 		a,b
              	
82EB: 7C      			ld 		a,h
82EC: FE03    			cp 		3
82EE: 3053    			jr 		nc,__L2Exit 						; check position in range
82F0: 78      			ld 		a,b
              	
82F1: F5      			push 	af 	
82F2: AF      			xor 	a 									; convert colour in C to palette index
82F3: CB42    			bit 	0,d 								; (assumes standard palette)
82F5: 2802    			jr 		z,__L2Not1
82F7: F603    			or 		$03
82F9:         	__L2Not1:
82F9: CB52    			bit 	2,d
82FB: 2802    			jr 		z,__L2Not2
82FD: F61C    			or 		$1C
82FF:         	__L2Not2:
82FF: CB4A    			bit 	1,d
8301: 2802    			jr 		z,__L2Not3
8303: F6C0    			or 		$C0
8305:         	__L2Not3:
8305: 4F      			ld 		c,a 								; C is foreground
8306: F1      			pop 	af 									; restore char
              	
8307: CD6081  			call 	GFXGetFontGraphicDE 				; font offset in DE
830A: D5      			push 	de 									; transfer to IX
830B: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
830D: C5      			push 	bc
830E: 7C      			ld  	a,h 								; this is the page number.
830F: CB0F    			rrc 	a
8311: CB0F    			rrc 	a
8313: E6C0    			and 	$C0 								; in bits 6 & 7
8315: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8317: 013B12  			ld 		bc,$123B 							; out to layer 2 port
831A: ED79    			out 	(c),a
831C: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
831D: EB      			ex 		de,hl
831E: 6B      			ld 		l,e
831F: 2600    			ld 		h,0
8321: 29      			add 	hl,hl 								
8322: 29      			add 	hl,hl
8323: 29      			add 	hl,hl
8324: CB24    			sla 	h
8326: CB24    			sla 	h
8328: CB24    			sla 	h
              	
832A: 1E08    			ld 		e,8 								; do 8 rows
832C:         	__L2Outer:
832C: E5      			push 	hl 									; save start
832D: 1608    			ld 		d,8 								; do 8 columns
832F: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8332: DD23    			inc 	ix
8334:         	__L2Loop:
8334: 3600    			ld 		(hl),0 								; background
8336: 87      			add 	a,a 								; shift pattern left
8337: 3001    			jr 		nc,__L2NotSet
8339: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
833A:         	__L2NotSet:
833A: 23      			inc 	hl
833B: 15      			dec 	d 									; do a row
833C: 20F6    			jr 		nz,	__L2Loop
833E: E1      			pop 	hl 									; restore, go 256 bytes down.
833F: 24      			inc 	h
8340: 1D      			dec 	e 									; do 8 rows
8341: 20E9    			jr 		nz,__L2Outer	
8343:         	__L2Exit:
8343: DDE1    			pop 	ix
8345: E1      			pop 	hl
8346: D1      			pop 	de
8347: C1      			pop 	bc
8348: F1      			pop 	af
8349: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
834A:         	GFXInitialiseLowRes:
834A: F5      			push 	af
834B: C5      			push 	bc
834C: D5      			push 	de
              	
834D: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8351: AF      			xor 	a 									; layer 2 off.
8352: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8355: ED79    			out 	(c),a
              	
8357: 210040  			ld 		hl,$4000 							; erase the bank to $00 
835A: 110060  			ld 		de,$6000
835D:         	LowClearScreen: 									; assume default palette :)
835D: AF      			xor 	a
835E: 77      			ld 		(hl),a
835F: 12      			ld 		(de),a
8360: 23      			inc 	hl
8361: 13      			inc 	de
8362: 7C      			ld 		a,h
8363: FE58    			cp 		$58
8365: 20F6    			jr		nz,LowClearScreen
8367: AF      			xor 	a
8368: D3FE    			out 	($FE),a
836A: D1      			pop 	de
836B: C1      			pop 	bc
836C: F1      			pop 	af
836D: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8370: 117483  			ld 		de,GFXPrintCharacterLowRes
8373: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8374:         	GFXPrintCharacterLowRes:
8374: F5      			push 	af
8375: C5      			push 	bc
8376: D5      			push 	de
8377: E5      			push 	hl
8378: DDE5    			push 	ix
              	
837A: 43      			ld 		b,e 								; save character in B
              	
837B: 29      			add 	hl,hl
837C: 29      			add 	hl,hl
837D: 7C      			ld	 	a,h 								; check in range 192*4 = 768
837E: FE03    			cp 		3
8380: 3046    			jr 		nc,__LPExit
              	
8382: 7A      			ld 		a,d 								; only lower 3 bits of colour
8383: E607    			and 	7
8385: 4F      			ld 		c,a 								; C is foreground
              	
8386: 78      			ld 		a,b 								; get char back
8387: CD6081  			call 	GFXGetFontGraphicDE
838A: D5      			push 	de
838B: DDE1    			pop 	ix
              	
838D: EB      			ex 		de,hl
838E: 7B      			ld 		a,e 								; put DE => HL
838F: E6C0    			and 	192 								; these are part of Y
8391: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8392: 62      			ld 		h,d		
8393: 29      			add 	hl,hl
8394: 29      			add 	hl,hl
8395: 29      			add 	hl,hl
8396: 29      			add 	hl,hl
8397: CBF4    			set 	6,h 								; put into $4000 range
              	
8399: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
839B: A3      			and 	e 									; and with E, gives X position
839C: 87      			add 	a,a 								; now multiplied by 8.
839D: 5F      			ld 		e,a 								; DE is x offset.
839E: 1600    			ld 		d,0  
              	
83A0: 19      			add 	hl,de
83A1: 7C      			ld 		a,h
83A2: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83A4: 3804    			jr 		c,__LowNotLower2
83A6: 110008  			ld 		de,$0800
83A9: 19      			add 	hl,de
83AA:         	__LowNotLower2:
83AA: 1E08    			ld 		e,8 								; do 8 rows
83AC:         	__LowOuter:
83AC: E5      			push 	hl 									; save start
83AD: 1608    			ld 		d,8 								; do 8 columns
83AF: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83B2: DD23    			inc 	ix
83B4:         	__LowLoop:
83B4: 3600    			ld 		(hl),0 								; background
83B6: 87      			add 	a,a 								; shift pattern left
83B7: 3001    			jr 		nc,__LowNotSet
83B9: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83BA:         	__LowNotSet:
83BA: 2C      			inc 	l
83BB: 15      			dec 	d 									; do a row
83BC: 20F6    			jr 		nz,	__LowLoop
83BE: E1      			pop 	hl 									; restore, go 256 bytes down.
83BF: D5      			push 	de
83C0: 118000  			ld 		de,128
83C3: 19      			add 	hl,de
83C4: D1      			pop 	de
83C5: 1D      			dec 	e 									; do 8 rows
83C6: 20E4    			jr 		nz,__LowOuter	
83C8:         	__LPExit:
83C8: DDE1    			pop 	ix
83CA: E1      			pop 	hl
83CB: D1      			pop 	de
83CC: C1      			pop 	bc
83CD: F1      			pop 	af
83CE: C9      			ret
              	
              	
              			include "compiler/utilities.asm" 			; compiler utilities
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Compiler Utilities
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;					Generic macro expansion. HL points to code, B to count
              	;
              	; ***************************************************************************************
              	
83CF:         	MacroExpand:
83CF: 7E      			ld 		a,(hl)
83D0: CD6480  			call 	FARCompileByte
83D3: 23      			inc 	hl
83D4: 10F9    			djnz 	MacroExpand
83D6: C9      			ret
              			include "compiler/loader.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		loader.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Source loader
              	;		Date : 		22nd November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;									Load the bootstrap page
              	;
              	; ********************************************************************************************************
              	
83D7:         	LOADBootstrap:
83D7: 3E22    			ld 		a,BootstrapPage 					; set the current page to bootstrap page.
83D9: CD3580  			call 	PAGESwitch
83DC: DD2100C0			ld 		ix,$C000 							; current section being loaded.
83E0: 0E00    			ld 		c,0 								; used to display progress.
              	
83E2: 11CDAB  			ld 		de,$ABCD
              	;
              	;		Once here for every 'chunk'. We copy the text to the editor buffer in 
              	;		chunks (currently 512 bytes) until we've done all 16k of the page.
              	;
83E5:         	__LOADBootLoop:
83E5: DDE5    			push 	ix 									; HL = Current Section
83E7: E1      			pop 	hl
83E8: C5      			push 	bc
83E9: D5      			push 	de
83EA: 11087B  			ld 		de,EditBuffer  						; Copy to edit buffer 1/2k (512 bytes) of code.
83ED: 010002  			ld 		bc,512
83F0: EDB0    			ldir 	
83F2: D1      			pop 	de
83F3: C1      			pop 	bc
              	
83F4: D5      			push 	de
83F5: 2600    			ld 		h,0 								; Progress prompt.
83F7: DD7C    			ld 		a,ixh 								; derive position.
83F9: CB0F    			rrc 	a
83FB: E61F    			and 	31
83FD: 6F      			ld 		l,a
83FE: 112A02  			ld 		de,$022A
8401: CD1B81  			call 	GFXWriteCharacter
8404: 0C      			inc 	c
8405: D1      			pop 	de
              	
8406: 21087B  			ld 		hl,EditBuffer
8409:         	__LOADScanLoop:
8409: 7E      			ld 		a,(hl) 								; look at tage
840A: FEFF    			cp 		$FF 								; was it $FF ?
840C: 280A    			jr 		z,__LOADScanExit 					; if so, we are done.
              	
840E: CD2E85  			call 	COMCompileExecute 					; execute text at HL
              	
8411:         	__LOADNextWord: 									; look for the next bit 7 high.
8411: 23      			inc 	hl 									; advance forward to next word.
8412: CB7E    			bit		7,(hl)
8414: 28FB    			jr 		z,__LOADNextWord
8416: 18F1    			jr 		__LOADScanLoop
              	
8418:         	__LOADScanExit:
8418: 010002  			ld 		bc,512 								; add 512 size to IX
841B: DD09    			add 	ix,bc
841D: DDE5    			push 	ix									; until wrapped round to $0000
841F: C1      			pop 	bc
8420: CB78    			bit 	7,b
8422: 20C1    			jr 		nz,__LOADBootLoop
              	
8424:         	__LOADEnds:
8424: CD4E80  			call 	PAGERestore 						; restore page
              	
8427: C32784  	w2:		jp 		w2 									; go to start interpreter
              	
              	
              			include "compiler/constant.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at HL to constant in HL. DE 0, Carry Clear if true
              	;									Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
842A:         	CONSTConvert:
842A: C5      		push 	bc
              	
842B: EB      		ex 		de,hl 									; string in DE.
842C: 210000  		ld 		hl,$0000								; result in HL.
842F: 13      		inc 	de 										; skip over the tag
8430: 0E00    		ld 		c,0										; C is the negate flag
8432:         	__CONConvLoop:
8432: 1A      		ld 		a,(de)									; get next character
8433: 13      		inc 	de
              	
8434: FE30    		cp 		'0'										; must be 0-9 otherwise
8436: 3830    		jr 		c,__CONConFail
8438: FE3A    		cp 		'9'+1
843A: 302C    		jr 		nc,__CONConFail
              	
843C: C5      		push 	bc
843D: E5      		push 	hl 										; HL -> BC
843E: C1      		pop 	bc
843F: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
8440: 29      		add 	hl,hl
8441: 09      		add 	hl,bc 						
8442: 29      		add 	hl,hl 									; HL := HL * 10
8443: 0600    		ld 		b,0 									; add the digit into HL
8445: E60F    		and 	15
8447: 4F      		ld 		c,a
8448: 09      		add 	hl,bc
8449: C1      		pop 	bc
              	
844A: 1A      		ld 		a,(de) 									; check ends in -
844B: FE2D    		cp 		'-'									
844D: 2806    		jr 		z,__CONMinusExit 						
844F: CB7F    		bit 	7,a 									; check done everything.
8451: 28DF    		jr 		z,__CONConvLoop
8453: 180D    		jr 		__CONNotNegative
              	
8455:         	__CONMinusExit:
8455: 13      		inc 	de 										; if not the last, it's an error.
8456: 1A      		ld 		a,(de)
8457: CB7F    		bit 	7,a
8459: 280D    		jr		z,__CONConFail
              	
845B: 7C      		ld 		a,h 									; negate HL
845C: 2F      		cpl 	
845D: 67      		ld 		h,a
845E: 7D      		ld 		a,l
845F: 2F      		cpl
8460: 6F      		ld 		l,a
8461: 23      		inc 	hl
              	
8462:         	__CONNotNegative:
8462: 110000  		ld 		de,$0000
8465: AF      		xor 	a 										; clear carry
8466: C1      		pop 	bc
8467: C9      		ret
              	
8468:         	__CONConFail: 										; didn't convert
8468: 21FFFF  		ld 		hl,$FFFF
846B: 11FFFF  		ld 		de,$FFFF
846E: 37      		scf
846F: C1      		pop 	bc
8470: C9      		ret
              	
              		
              			include "compiler/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at HL ends in $80-$FF, uses the current page/pointer
              	;		values. A identifies whether MACRO ($80) or FORTH $(00)
              	;
              	; ***********************************************************************************************
              	
8471:         	DICTAddWord:
8471: F5      			push 	af 									; registers to stack.
8472: C5      			push 	bc
8473: D5      			push 	de
8474: E5      			push	hl
8475: DDE5    			push 	ix
8477: E5      			push 	hl 									
8478: 06FF    			ld 		b,-1								; put length of string in B
847A:         	__DICTAddGetLength:
847A: 23      			inc 	hl
847B: 04      			inc 	b
847C: CB7E    			bit 	7,(hl)
847E: 28FA    			jr 		z,__DICTAddGetLength
8480: E1      			pop 	hl
              	
8481: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
8483: CD3580  			call 	PAGESwitch
              	
8486: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
848A:         	__DICTFindEndDictionary:
848A: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
848D: B7      			or 		a
848E: 2807    			jr 		z,__DICTCreateEntry
8490: 5F      			ld 		e,a
8491: 1600    			ld 		d,0
8493: DD19    			add 	ix,de
8495: 18F3    			jr 		__DICTFindEndDictionary
              	
8497:         	__DICTCreateEntry:
8497: 78      			ld 		a,b
8498: C605    			add 	a,5
849A: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
849D: 3A028B  			ld 		a,(SINextFreeCodePage)				; code page
84A0: DD7701  			ld 		(ix+1),a
84A3: ED5B008B			ld 		de,(SINextFreeCode)					; code address
84A7: DD7302  			ld 		(ix+2),e
84AA: DD7203  			ld 		(ix+3),d 
              	
84AD: 79      			ld 		a,c 								; get FORTH/MACRO flag
84AE: E680    			and 	$80
84B0: B0      			or 		b 									; or length in
84B1: DD7704  			ld 		(ix+4),a 							; length (0..5) forth/macro (7)
              	
84B4: EB      			ex 		de,hl 								; put name in DE
84B5: 13      			inc 	de 									; skip over tag.
84B6:         	__DICTAddCopy:
84B6: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
84B7: DD7705  			ld 		(ix+5),a
84BA: DD23    			inc 	ix 									
84BC: 13      			inc 	de
84BD: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
84BF: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
84C3: CD4E80  			call 	PAGERestore
84C6: DDE1    			pop 	ix 									; restore and exit
84C8: E1      			pop 	hl
84C9: D1      	 		pop 	de
84CA: C1      			pop 	bc
84CB: F1      			pop 	af
84CC: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. HL points to name. C is the mask for flag/macro.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
84CD:         	DICTFindWord:
84CD: C5      			push 	bc 								; save registers - return in EHL Carry
84CE: DDE5    			push 	ix
              	
84D0: 4F      			ld 		c,a 							; macro forth flag in C
84D1: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
84D3: CD3580  			call 	PAGESwitch
              	
84D6: DD2100C0			ld 		ix,$C000 						; dictionary start			
84DA:         	__DICTFindMainLoop:
84DA: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
84DD: B7      			or 		a
84DE: 283E    			jr 		z,__DICTFindFail
              	
84E0: DD7E04  			ld 		a,(ix+4) 						; get the flag/macro (and length) byte
84E3: A9      			xor 	c 								; xor with the mask
84E4: E680    			and 	$80 							; only interested in bit 7
84E6: 202D    			jr 		nz,__DICTFindNext 				; so if different, go to next.
              	
84E8: DDE5    			push 	ix 								; save pointers on stack.
84EA: E5      			push 	hl 
              	
84EB: DD7E04  			ld 		a,(ix+4) 						; characters to compare
84EE: E63F    			and 	$3F
84F0: 47      			ld 		b,a
84F1: 23      			inc 	hl 								; skip over tag
84F2:         	__DICTCheckName:
84F2: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
84F5: BE      			cp 		(hl) 							; compare vs the matching character.
84F6: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
84F8: 23      			inc 	hl 								; HL point to next character
84F9: DD23    			inc 	ix
84FB: 10F5    			djnz 	__DICTCheckName
              	
84FD: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
84FF: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
8501: E1      			pop 	hl 								; Found a match. restore HL and IX
8502: DDE1    			pop 	ix
8504: 1600    			ld 		d,0 							; D = 0 for neatness.
8506: DD5E01  			ld 		e,(ix+1)						; E = page
8509: DD6E02  			ld 		l,(ix+2)						; HL = address
850C: DD6603  			ld 		h,(ix+3)		
850F: AF      			xor 	a 								; clear the carry flag.
8510: 1813    			jr 		__DICTFindExit
              	
8512:         	__DICTFindNoMatch:								; this one doesn't match.
8512: E1      			pop 	hl 								; restore HL and IX
8513: DDE1    			pop 	ix
8515:         	__DICTFindNext:
8515: DD5E00  			ld 		e,(ix+0)						; DE = offset
8518: 1600    			ld 		d,$00
851A: DD19    			add 	ix,de 							; next word.
851C: 18BC    			jr 		__DICTFindMainLoop				; and try the next one.
              	
851E:         	__DICTFindFail:
851E: 110000  			ld 		de,$0000 						; return all zeros.
8521: 210000  			ld 		hl,$0000
8524: 37      			scf 									; set carry flag
8525:         	__DICTFindExit:
8525: F5      			push 	af
8526: CD4E80  			call 	PAGERestore
8529: F1      			pop 	af
852A: DDE1    			pop 	ix 								; pop registers and return.
852C: C1      			pop 	bc
852D: C9      			ret
              	
              			include "compiler/compiler.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Compile/Execute code.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;		On entry HL points to a word, which is a tag followed by text, followed by
              	; 		a byte with bit 7 set. The stack is in (SP) DE as usual, this is a callable
              	; 		word. It should *not* be used by the interpreter as it is *not* re-entrant.
              	;
              	; ***************************************************************************************
              	
852E:         	COMCompileExecute:
852E: C1      		pop 	bc 										; get the return address.
852F: ED435D85		ld 		(__COMCEOut+1),bc 						; save the return address
              	
8533: D5      		push 	de 										; save DE on the stack, so this is a normal stack (no DE cache)
8534: ED735985		ld 		(__COMCELoadSP+1),sp 					; save the stack pointer to be reloaded
              	
8538: 31407D  		ld 		sp,COMWorkingStack 						; we have a new SP for stuff.
853B: E5      		push 	hl
853C: DDE5    		push 	ix
              	
853E: 44      		ld 		b,h 									; put the word address in BC
853F: 4D      		ld 		c,l
8540: 7E      		ld 		a,(hl) 									; get the tag
8541: FE84    		cp 		$84 									; is it green (execute macro, compile forth,compile number)
8543: CA5F85  		jp 		z,__COMGreenWord
8546: FE85    		cp 		$85										; is it cyan (compile macro)
8548: CA7C85  		jp 		z,__COMCyanWord 						
854B: FE86    		cp 		$86 									; is it yellow (execute)
854D: 2838    		jr 		z,__COMYellowWord
              	
              	; =======================================================================================
              	;
              	;		Come her on error.
              	;
              	; =======================================================================================
              	
854F:         	__COMError:
854F: 60      		ld 		h,b
8550: 69      		ld 		l,c
8551: 23      		inc 	hl
8552: C31E80  		jp 		ErrorHandler
              	
              	; =======================================================================================
              	;
              	;		Come here to exit
              	;
              	; =======================================================================================
              	
8555:         	__COMExit:
8555: DDE1    		pop 	ix
8557: E1      		pop 	hl
8558:         	__COMCELoadSP:
8558: 310000  		ld 		sp,$0000 								; reload the complete stack
855B: D1      		pop 	de 										; make it a DE cached stack.
855C:         	__COMCEOut:
855C: C30000  		jp 		$0000 									; effectively, RET
              	
              	; =======================================================================================
              	;
              	;		This is a green word. If it is in macro, then we run that word. If it is in
              	; 		FORTH, we compile that word. If it is a number, compile that code.
              	;
              	; =======================================================================================
              	
855F:         	__COMGreenWord:
855F: 3E80    		ld 		a,$80 									; is it in the MACRO dictionary
8561: CDCD84  		call 	DICTFindWord 
8564: D2A885  		jp 		nc,__COMExecuteEHL 					; execute the word
              	
8567: 60      		ld 		h,b 									; is it in the FORTH dictionary
8568: 69      		ld 		l,c
8569: 3E00    		ld 		a,$00 
856B: CDCD84  		call 	DICTFindWord
856E: D2D785  		jp 		nc,__COMCompileEHL 						; compile a call to EHL
              	
8571: 60      		ld 		h,b 									; is it a constant
8572: 69      		ld 		l,c
8573: CD2A84  		call 	CONSTConvert
8576: DA4F85  		jp 		c,__COMError 							; if not, then error
8579: C3C785  		jp 		__COMCompileConstant
              	
              	; =======================================================================================
              	;
              	;		This is a cyan word. If it is in macro, then we compile that word. If it is in
              	; 		FORTH, we compile that word.
              	;
              	; =======================================================================================
              	
857C:         	__COMCyanWord:
857C: 3E80    		ld 		a,$80 									; is it in the MACRO dictionary
857E: CDCD84  		call 	DICTFindWord 
8581: D2D785  		jp 		nc,__COMCompileEHL 						; execute the word
8584: C34F85  		jp 		__COMError 								; if not, then error
              	
              	; =======================================================================================
              	;
              	;		This is a yellow word. If it is in FORTH, run it. If it is a number, 
              	;		push it on the stack.
              	;
              	; =======================================================================================
              	
8587:         	__COMYellowWord:
8587: 3E00    		ld 		a,$00									; is it in FORTH ?
8589: CDCD84  		call 	DICTFindWord
858C: D2A885  		jp 		nc,__COMExecuteEHL
              	
858F: 60      		ld 		h,b 									; is it a constant
8590: 69      		ld 		l,c
8591: CD2A84  		call 	CONSTConvert
8594: DA4F85  		jp 		c,__COMError 							; if not, then error
8597: C39A85  		jp 		__COMPushHLOnStack
              	
              	; =======================================================================================
              	;
              	;							Push HL on the (saved) stack
              	;
              	; =======================================================================================
              	
859A:         	__COMPushHLOnStack:
859A: EB      		ex 		de,hl 									; put number in DE
859B: 2A5985  		ld 		hl,(__COMCELoadSP+1) 					; retrieve stack
859E: 2B      		dec 	hl 										; push DE on manually.
859F: 72      		ld 		(hl),d
85A0: 2B      		dec 	hl
85A1: 73      		ld 		(hl),e
85A2: 225985  		ld 		(__COMCELoadSP+1),hl 					; and write the stack return value back
85A5: C35585  		jp 		__COMExit
              	
              	; =======================================================================================
              	;
              	;								Execute the word in EHL
              	;
              	; =======================================================================================
              	
85A8:         	__COMExecuteEHL:
85A8: 7B      		ld 		a,e 									; switch to page E
85A9: CD3580  		call 	PAGESwitch
85AC: ED73BE85		ld 		(__COMXReloadSP+1),sp 					; set to reload that stack.
85B0: ED7B5985		ld 		sp,(__COMCELoadSP+1) 					; reload the stack. 
85B4: D1      		pop 	de 										; fix up DE
85B5: CDC685  		call 	__COMCallHL
85B8: D5      		push 	de 										; push DE, make the stack uncached
85B9: ED735985		ld 		(__COMCELoadSP+1),sp 					; update the return stack value.
85BD:         	__COMXReloadSP:
85BD: 310000  		ld 		sp,$0000 								; reload the working stack.
85C0: CD4E80  		call 	PAGERestore 							; restore original page and exit.
85C3: C35585  		jp 		__COMExit
              	
85C6:         	__COMCallHL:
85C6: E9      		jp 		(hl)
              	
              	; =======================================================================================
              	;
              	;					Compile code to push constant HL on the stack
              	;
              	; =======================================================================================
              	
85C7:         	__COMCompileConstant:
85C7: 3ED5    		ld 		a,$D5 									; Push DE
85C9: CD6480  		call 	FARCompileByte
85CC: 3E11    		ld 		a,$11 									; ld de,0000
85CE: CD6480  		call 	FARCompileByte
85D1: CD7C80  		call 	FARCompileWord
85D4: C35585  		jp 		__COMExit
              	
              	; =======================================================================================
              	;
              	;							Compile a call to the word at EHL
              	;
              	; =======================================================================================
              	
85D7:         	__COMCompileEHL:
              		;
              		; TODO: Paging ,operates if E != HERE.PAGE and HL >= $C000
              		;
85D7: 3ECD    		ld 		a,$CD 									; but for now, use a normal Z80 call.
85D9: CD6480  		call 	FARCompileByte
85DC: CD7C80  		call 	FARCompileWord
85DF: C35585  		jp 		__COMExit 								; and exit.
              	
              	
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @forth[ix]   *
              	
85E2:         	cforth_2a_forth:
85E2: DDE1    	    pop ix
85E4:         	cforth_2a_start:
85E4: E1      	  pop  hl
85E5: CDC280  	  call  MULTMultiply16        ; HL := HL * DE
85E8: EB      	  ex   de,hl
              	
              	; @end
              	
85E9:         	cforth_2a_end:
85E9: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /
              	
85EB:         	cforth_2f_forth:
85EB: DDE1    	    pop ix
85ED:         	cforth_2f_start:
85ED: E1      	  pop  hl
85EE: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
              	
              	; @end
              	
85F1:         	cforth_2f_end:
85F1: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   mod
              	
85F3:         	cforth_6d_6f_64_forth:
85F3: DDE1    	    pop ix
85F5:         	cforth_6d_6f_64_start:
85F5: E1      	  pop  hl
85F6: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
85F9: EB      	  ex   de,hl
              	
              	; @end
              	
85FA:         	cforth_6d_6f_64_end:
85FA: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /mod
              	
85FC:         	cforth_2f_6d_6f_64_forth:
85FC: DDE1    	    pop ix
85FE:         	cforth_2f_6d_6f_64_start:
85FE: E1      	  pop  hl
85FF: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
8602: E5      	  push  hl
              	
              	; @end
              	
8603:         	cforth_2f_6d_6f_64_end:
8603: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] +
              	
8605:         	cforth_2b_forth:
8605: DDE1    	    pop ix
8607:         	cforth_2b_start:
8607: E1      	  pop  hl
8608: 19      	  add  hl,de
8609: EB      	  ex   de,hl
              	
              	; @end
              	
860A:         	cforth_2b_end:
860A: DDE9    	    jp (ix)
860C:         	cforth_2b_macro:
860C: 0603    	    ld b,cforth_2b_end-cforth_2b_start
860E: 210786  	    ld hl,cforth_2b_start
8611: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  and
              	
8614:         	cforth_61_6e_64_forth:
8614: E1      	    pop hl
8615:         	cforth_61_6e_64_start:
8615: C1      	  pop  bc
8616: 7B      	  ld   a,e
8617: A1      	  and  c
8618: 5F      	  ld   e,a
8619: 7A      	  ld   a,d
861A: A0      	  and  b
861B: 57      	  ld   d,a
              	
              	; @end
              	
861C:         	cforth_61_6e_64_end:
861C: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  or
              	
861D:         	cforth_6f_72_forth:
861D: E1      	    pop hl
861E:         	cforth_6f_72_start:
861E: C1      	  pop  bc
861F: 7B      	  ld   a,e
8620: A9      	  xor  c
8621: 5F      	  ld   e,a
8622: 7A      	  ld   a,d
8623: A8      	  xor  b
8624: 57      	  ld   d,a
              	
              	; @end
              	
8625:         	cforth_6f_72_end:
8625: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  +or
              	
8626:         	cforth_2b_6f_72_forth:
8626: E1      	    pop hl
8627:         	cforth_2b_6f_72_start:
8627: C1      	  pop  bc
8628: 7B      	  ld   a,e
8629: B1      	  or   c
862A: 5F      	  ld   e,a
862B: 7A      	  ld   a,d
862C: B0      	  or   b
862D: 57      	  ld   d,a
              	
              	; @end
              	
862E:         	cforth_2b_6f_72_end:
862E: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   compare.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Comparison words, min and max.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[ix] less
              	
862F:         	cforth_6c_65_73_73_forth:
862F: DDE1    	    pop ix
8631:         	cforth_6c_65_73_73_start:
8631: E1      	  pop  hl
8632: EB      	  ex   de,hl
8633: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
8634: AC      	  xor  h
8635: 87      	  add  a,a      ; if the signs are different, check those.
8636: 380C    	  jr   c,__LessDifferentSigns
              	
8638: D5      	  push  de
8639: EB      	  ex   de,hl      ; want to do B-A
863A: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
863C: D1      	  pop  de
863D: 3809    	  jr   c,__LessTrue
              	
863F:         	__LessFalse:
863F: 110000  	  ld   de,$0000
8642: 1807    	  jr   __LessExit
              	
8644:         	__LessDifferentSigns:
8644: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
8646: 28F7    	  jr   z,__LessFalse
              	
8648:         	__LessTrue:
8648: 11FFFF  	  ld   de,$FFFF
864B:         	__LessExit:
              	
              	
              	; @end
              	
864B:         	cforth_6c_65_73_73_end:
864B: DDE9    	    jp (ix)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphic.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Graphic System words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] screen.mode
              	
864D:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth:
864D: E1      	    pop hl
864E:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start:
864E: 7B      	  ld   a,e
864F: CDE680  	  call GFXMode
8652: D1      	  pop  de
              	
              	; @end
              	
8653:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end:
8653: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] screen.clear
              	
8654:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth:
8654:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start:
8654: CDDC80  	  call GFXClearScreen
              	
              	; @end
              	
8657:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end:
8657: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ix] screen!
              	
8658:         	cforth_73_63_72_65_65_6e_21_forth:
8658: DDE1    	    pop ix
865A:         	cforth_73_63_72_65_65_6e_21_start:
865A: EB      	  ex   de,hl        ; TOS (address) in HL
865B: D1      	  pop  de         ; data in DE
865C: CD1B81  	  call  GFXWriteCharacter     ; display it
865F: D1      	  pop  de         ; fix up stack
              	
              	; @end
              	
8660:         	cforth_73_63_72_65_65_6e_21_end:
8660: DDE9    	    jp (ix)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ix] @
              	
8662:         	cforth_40_forth:
8662: DDE1    	    pop ix
8664:         	cforth_40_start:
8664: EB      	  ex   de,hl
8665: 5E      	  ld   e,(hl)
8666: 23      	  inc  hl
8667: 56      	  ld   d,(hl)
              	
              	; @end
              	
8668:         	cforth_40_end:
8668: DDE9    	    jp (ix)
866A:         	cforth_40_macro:
866A: 0604    	    ld b,cforth_40_end-cforth_40_start
866C: 216486  	    ld hl,cforth_40_start
866F: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] c@
              	
8672:         	cforth_63_40_forth:
8672: E1      	    pop hl
8673:         	cforth_63_40_start:
8673: 1A      	  ld   a,(de)
8674: 5F      	  ld   e,a
8675: 1600    	  ld   d,0
              	
              	; @end
              	
8677:         	cforth_63_40_end:
8677: E9      	    jp (hl)
8678:         	cforth_63_40_macro:
8678: 0604    	    ld b,cforth_63_40_end-cforth_63_40_start
867A: 217386  	    ld hl,cforth_63_40_start
867D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] c!
              	
8680:         	cforth_63_21_forth:
8680: DDE1    	    pop ix
8682:         	cforth_63_21_start:
8682: E1      	  pop  hl
8683: 7D      	  ld   a,l
8684: 12      	  ld   (de),a
8685: D1      	  pop  de
              	
              	; @end
              	
8686:         	cforth_63_21_end:
8686: DDE9    	    jp (ix)
8688:         	cforth_63_21_macro:
8688: 0604    	    ld b,cforth_63_21_end-cforth_63_21_start
868A: 218286  	    ld hl,cforth_63_21_start
868D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] !
              	
8690:         	cforth_21_forth:
8690: DDE1    	    pop ix
8692:         	cforth_21_start:
8692: E1      	  pop  hl
8693: 73      	  ld   (hl),e
8694: 23      	  inc  hl
8695: 72      	  ld   (hl),d
8696: D1      	  pop  de
              	
              	; @end
              	
8697:         	cforth_21_end:
8697: DDE9    	    jp (ix)
8699:         	cforth_21_macro:
8699: 0605    	    ld b,cforth_21_end-cforth_21_start
869B: 219286  	    ld hl,cforth_21_start
869E: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] +!
              	
86A1:         	cforth_2b_21_forth:
86A1: DDE1    	    pop ix
86A3:         	cforth_2b_21_start:
86A3: E1      	  pop  hl      ; address in DE, get data in HL
86A4: EB      	  ex   de,hl     ; address in HL, data in E
86A5: 7E      	  ld   a,(hl)
86A6: 83      	  add  a,e
86A7: 77      	  ld   (hl),a
86A8: 23      	  inc  hl
86A9: 7E      	  ld   a,(hl)
86AA: 8A      	  adc  a,d
86AB: 77      	  ld   (hl),a
86AC: D1      	  pop  de
              	
              	; @end
              	
86AD:         	cforth_2b_21_end:
86AD: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] or!
              	
86AF:         	cforth_6f_72_21_forth:
86AF: DDE1    	    pop ix
86B1:         	cforth_6f_72_21_start:
86B1: E1      	  pop  hl
86B2: 7E      	  ld   a,(hl)
86B3: B3      	  or   e
86B4: 77      	  ld   (hl),a
86B5: 23      	  inc  hl
86B6: 7E      	  ld   a,(hl)
86B7: B2      	  or   d
86B8: 77      	  ld   (hl),a
86B9: D1      	  pop  de
              	
              	; @end
              	
86BA:         	cforth_6f_72_21_end:
86BA: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] fill
              	
86BC:         	cforth_66_69_6c_6c_forth:
86BC: DDE1    	    pop ix
86BE:         	cforth_66_69_6c_6c_start:
              	          ; called as <byte> <address> <count> fill
86BE: E1      	  pop  hl       ; top is count (DE) 2nd address (HL) 3rd value (BC)
86BF: C1      	  pop  bc
86C0: 7A      	  ld   a,d
86C1: B3      	  or   e
86C2: 2807    	  jr   z,__fill2
              	
86C4: 71      	__fill1:ld   (hl),c
86C5: 23      	  inc  hl
86C6: 0B      	  dec  bc
86C7: 7A      	  ld   a,d
86C8: B3      	  or   e
86C9: 20F9    	  jr   nz,__fill1
86CB:         	__fill2:
86CB: D1      	  pop  de
              	
              	; @end
              	
86CC:         	cforth_66_69_6c_6c_end:
86CC: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] move
              	
86CE:         	cforth_6d_6f_76_65_forth:
86CE: DDE1    	    pop ix
86D0:         	cforth_6d_6f_76_65_start:
              	             ; source destination count move
              	
86D0: 42      	  ld   b,d         ; top is count (BC)
86D1: 4B      	  ld   c,e
86D2: E1      	  pop  hl          ; 2nd is target (HL)
86D3: D1      	  pop  de          ; 3rd is source (DE)
              	
86D4: 78      	  ld   a,b
86D5: B1      	  or   c
86D6: 2815    	  jr   z,__move2
              	
86D8: AF      	  xor  a          ; find direction.
86D9: ED52    	  sbc  hl,de
86DB: 7C      	  ld   a,h
86DC: 19      	  add  hl,de
86DD: CB7F    	  bit  7,a         ; if +ve use LDDR
86DF: 2805    	  jr   z,__move3
              	
86E1: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
86E2: EDB0    	  ldir
86E4: 1807    	  jr   __move2
              	
86E6:         	__move3:
86E6: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
86E7: EB      	  ex   de,hl
86E8: 09      	  add  hl,bc
86E9: 1B      	  dec  de          ; -1 to point to last byte
86EA: 2B      	  dec  hl
86EB: EDB8    	  lddr
              	
86ED:         	__move2:
86ED: D1      	  pop  de
              	
              	; @end
              	
86EE:         	cforth_6d_6f_76_65_end:
86EE: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p@
              	
86F0:         	cforth_70_40_forth:
86F0: E1      	    pop hl
86F1:         	cforth_70_40_start:
86F1: 42      	  ld   b,d
86F2: 4B      	  ld   c,e
86F3: ED58    	  in   e,(c)
86F5: 1600    	  ld   d,0
              	
              	; @end
              	
86F7:         	cforth_70_40_end:
86F7: E9      	    jp (hl)
86F8:         	cforth_70_40_macro:
86F8: 0606    	    ld b,cforth_70_40_end-cforth_70_40_start
86FA: 21F186  	    ld hl,cforth_70_40_start
86FD: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p!
              	
8700:         	cforth_70_21_forth:
8700: E1      	    pop hl
8701:         	cforth_70_21_start:
8701: 42      	  ld   b,d
8702: 4B      	  ld   c,e
8703: D1      	  pop  de
8704: ED59    	  out  (c),e
8706: D1      	  pop  de
              	
              	; @end
              	
8707:         	cforth_70_21_end:
8707: E9      	    jp (hl)
8708:         	cforth_70_21_macro:
8708: 0606    	    ld b,cforth_70_21_end-cforth_70_21_start
870A: 210187  	    ld hl,cforth_70_21_start
870D: C3CF83  	    jp MacroExpand
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[hl] drop
              	
8710:         	cforth_64_72_6f_70_forth:
8710: E1      	    pop hl
8711:         	cforth_64_72_6f_70_start:
8711: D1      	  pop  de
              	
              	; @end
              	
8712:         	cforth_64_72_6f_70_end:
8712: E9      	    jp (hl)
8713:         	cforth_64_72_6f_70_macro:
8713: 0601    	    ld b,cforth_64_72_6f_70_end-cforth_64_72_6f_70_start
8715: 211187  	    ld hl,cforth_64_72_6f_70_start
8718: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] dup
              	
871B:         	cforth_64_75_70_forth:
871B: E1      	    pop hl
871C:         	cforth_64_75_70_start:
871C: D5      	  push  de
              	
              	; @end
              	
871D:         	cforth_64_75_70_end:
871D: E9      	    jp (hl)
871E:         	cforth_64_75_70_macro:
871E: 0601    	    ld b,cforth_64_75_70_end-cforth_64_75_70_start
8720: 211C87  	    ld hl,cforth_64_75_70_start
8723: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] nip
              	
8726:         	cforth_6e_69_70_forth:
8726: DDE1    	    pop ix
8728:         	cforth_6e_69_70_start:
8728: E1      	  pop  hl
              	
              	; @end
              	
8729:         	cforth_6e_69_70_end:
8729: DDE9    	    jp (ix)
872B:         	cforth_6e_69_70_macro:
872B: 0601    	    ld b,cforth_6e_69_70_end-cforth_6e_69_70_start
872D: 212887  	    ld hl,cforth_6e_69_70_start
8730: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] over
              	
8733:         	cforth_6f_76_65_72_forth:
8733: DDE1    	    pop ix
8735:         	cforth_6f_76_65_72_start:
8735: E1      	  pop  hl
8736: D5      	  push  de
8737: EB      	  ex   de,hl
              	
              	; @end
              	
8738:         	cforth_6f_76_65_72_end:
8738: DDE9    	    jp (ix)
873A:         	cforth_6f_76_65_72_macro:
873A: 0603    	    ld b,cforth_6f_76_65_72_end-cforth_6f_76_65_72_start
873C: 213587  	    ld hl,cforth_6f_76_65_72_start
873F: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] swap
              	
8742:         	cforth_73_77_61_70_forth:
8742: DDE1    	    pop ix
8744:         	cforth_73_77_61_70_start:
8744: E1      	  pop  hl
8745: EB      	  ex   de,hl
8746: E5      	  push  hl
              	
              	; @end
              	
8747:         	cforth_73_77_61_70_end:
8747: DDE9    	    jp (ix)
8749:         	cforth_73_77_61_70_macro:
8749: 0603    	    ld b,cforth_73_77_61_70_end-cforth_73_77_61_70_start
874B: 214487  	    ld hl,cforth_73_77_61_70_start
874E: C3CF83  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   22nd November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] bswap
              	
8751:         	cforth_62_73_77_61_70_forth:
8751:         	cforth_62_73_77_61_70_start:
8751: 7A      	  ld   a,d
8752: 53      	  ld   d,e
8753: 5F      	  ld   e,a
              	
              	; @end
              	
8754:         	cforth_62_73_77_61_70_end:
8754: C9      	    ret
8755:         	cforth_62_73_77_61_70_macro:
8755: 0603    	    ld b,cforth_62_73_77_61_70_end-cforth_62_73_77_61_70_start
8757: 215187  	    ld hl,cforth_62_73_77_61_70_start
875A: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2*
              	
875D:         	cforth_32_2a_forth:
875D:         	cforth_32_2a_start:
875D: EB      	  ex   de,hl
875E: 29      	  add  hl,hl
875F: EB      	  ex   de,hl
              	
              	; @end
              	
8760:         	cforth_32_2a_end:
8760: C9      	    ret
8761:         	cforth_32_2a_macro:
8761: 0603    	    ld b,cforth_32_2a_end-cforth_32_2a_start
8763: 215D87  	    ld hl,cforth_32_2a_start
8766: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2/
              	
8769:         	cforth_32_2f_forth:
8769:         	cforth_32_2f_start:
8769: CB3A    	  srl  d
876B: CB1B    	  rr   e
              	
              	; @end
              	
876D:         	cforth_32_2f_end:
876D: C9      	    ret
876E:         	cforth_32_2f_macro:
876E: 0604    	    ld b,cforth_32_2f_end-cforth_32_2f_start
8770: 216987  	    ld hl,cforth_32_2f_start
8773: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ++
              	
8776:         	cforth_2b_2b_forth:
8776:         	cforth_2b_2b_start:
8776: 13      	  inc  de
              	
              	; @end
              	
8777:         	cforth_2b_2b_end:
8777: C9      	    ret
8778:         	cforth_2b_2b_macro:
8778: 0601    	    ld b,cforth_2b_2b_end-cforth_2b_2b_start
877A: 217687  	    ld hl,cforth_2b_2b_start
877D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] +++
              	
8780:         	cforth_2b_2b_2b_forth:
8780:         	cforth_2b_2b_2b_start:
8780: 13      	  inc  de
8781: 13      	  inc  de
              	
              	; @end
              	
8782:         	cforth_2b_2b_2b_end:
8782: C9      	    ret
8783:         	cforth_2b_2b_2b_macro:
8783: 0602    	    ld b,cforth_2b_2b_2b_end-cforth_2b_2b_2b_start
8785: 218087  	    ld hl,cforth_2b_2b_2b_start
8788: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] --
              	
878B:         	cforth_2d_2d_forth:
878B:         	cforth_2d_2d_start:
878B: 1B      	  dec  de
              	
              	; @end
              	
878C:         	cforth_2d_2d_end:
878C: C9      	    ret
878D:         	cforth_2d_2d_macro:
878D: 0601    	    ld b,cforth_2d_2d_end-cforth_2d_2d_start
878F: 218B87  	    ld hl,cforth_2d_2d_start
8792: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ---
              	
8795:         	cforth_2d_2d_2d_forth:
8795:         	cforth_2d_2d_2d_start:
8795: 1B      	  dec  de
8796: 1B      	  dec  de
              	
              	; @end
              	
8797:         	cforth_2d_2d_2d_end:
8797: C9      	    ret
8798:         	cforth_2d_2d_2d_macro:
8798: 0602    	    ld b,cforth_2d_2d_2d_end-cforth_2d_2d_2d_start
879A: 219587  	    ld hl,cforth_2d_2d_2d_start
879D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret] -
              	
87A0:         	cforth_2d_forth:
87A0:         	cforth_2d_start:
87A0: 7A      	  ld   a,d
87A1: 2F      	  cpl
87A2: 57      	  ld   d,a
87A3: 7B      	  ld   a,e
87A4: 2F      	  cpl
87A5: 5F      	  ld   e,a
              	
              	; @end
              	
87A6:         	cforth_2d_end:
87A6: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  negate
              	
87A7:         	cforth_6e_65_67_61_74_65_forth:
87A7:         	cforth_6e_65_67_61_74_65_start:
87A7: 7A      	  ld   a,d
87A8: 2F      	  cpl
87A9: 57      	  ld   d,a
87AA: 7B      	  ld   a,e
87AB: 2F      	  cpl
87AC: 5F      	  ld   e,a
87AD: 13      	  inc  de
              	
              	; @end
              	
87AE:         	cforth_6e_65_67_61_74_65_end:
87AE: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  abs
              	
87AF:         	cforth_61_62_73_forth:
87AF:         	cforth_61_62_73_start:
87AF: CB7A    	  bit  7,d
87B1: 2807    	  jr   z,__IsPositive
87B3: 7A      	  ld   a,d
87B4: 2F      	  cpl
87B5: 57      	  ld   d,a
87B6: 7B      	  ld   a,e
87B7: 2F      	  cpl
87B8: 5F      	  ld   e,a
87B9: 13      	  inc  de
87BA:         	__IsPositive:
              	
              	; @end
              	
87BA:         	cforth_61_62_73_end:
87BA: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0=
              	
87BB:         	cforth_30_3d_forth:
87BB:         	cforth_30_3d_start:
87BB: 7A      	  ld   a,d
87BC: B3      	  or   e
87BD: 110000  	  ld   de,$0000
87C0: 2001    	  jr   nz,__IsNonZero
87C2: 1B      	  dec  de
87C3:         	__IsNonZero:
              	
              	; @end
              	
87C3:         	cforth_30_3d_end:
87C3: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0<
              	
87C4:         	cforth_30_3c_forth:
87C4:         	cforth_30_3c_start:
87C4: CB7A    	  bit  7,d
87C6: 110000  	  ld   de,$0000
87C9: 2801    	  jr   z,__IsPositive2
87CB: 1B      	  dec  de
87CC:         	__IsPositive2:
              	
              	; @end
              	
87CC:         	cforth_30_3c_end:
87CC: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   21st November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] inkey
              	
87CD:         	cforth_69_6e_6b_65_79_forth:
87CD: E1      	    pop hl
87CE:         	cforth_69_6e_6b_65_79_start:
87CE: D5      	  push  de
87CF: CD8381  	  call  IOScanKeyboard
87D2: 5F      	  ld   e,a
87D3: 1600    	  ld   d,0
              	
              	; @end
              	
87D5:         	cforth_69_6e_6b_65_79_end:
87D5: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] halt
              	
87D6:         	cforth_68_61_6c_74_forth:
87D6: E1      	    pop hl
87D7:         	cforth_68_61_6c_74_start:
              	
87D7: C32180  	  jp   HaltZ80
              	
              	; @end
              	
87DA:         	cforth_68_61_6c_74_end:
87DA: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] break
              	
87DB:         	cforth_62_72_65_61_6b_forth:
87DB:         	cforth_62_72_65_61_6b_start:
87DB: DD01    	  db   $DD,$01
              	
              	; @endm
              	
87DD:         	cforth_62_72_65_61_6b_end:
87DD: C9      	    ret
87DE:         	cforth_62_72_65_61_6b_macro:
87DE: 0602    	    ld b,cforth_62_72_65_61_6b_end-cforth_62_72_65_61_6b_start
87E0: 21DB87  	    ld hl,cforth_62_72_65_61_6b_start
87E3: C3CF83  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 1,
              	
87E6:         	cforth_31_2c_forth:
87E6: E1      	    pop hl
87E7:         	cforth_31_2c_start:
87E7: 7B      	  ld   a,e
87E8: CD6480  	  call  FARCompileByte
87EB: D1      	  pop  de
              	
              	; @endm
              	
87EC:         	cforth_31_2c_end:
87EC: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 2,
              	
87ED:         	cforth_32_2c_forth:
87ED: E1      	    pop hl
87EE:         	cforth_32_2c_start:
87EE: EB      	  ex   de,hl
87EF: CD6480  	  call  FARCompileByte
87F2: D1      	  pop  de
              	
              	; @endm
              	
87F3:         	cforth_32_2c_end:
87F3: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	;    FORTH and MACRO are special cases. See makedictionary.py
              	; ***************************************************************************************
              	
              	
              	; @word[ret] forth
              	
87F4:         	cforth_66_6f_72_74_68_forth:
87F4:         	cforth_66_6f_72_74_68_start:
87F4: 3E00    	  ld   a,$00
87F6: 32268B  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
87F9:         	cforth_66_6f_72_74_68_end:
87F9: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] macro
              	
87FA:         	cforth_6d_61_63_72_6f_forth:
87FA:         	cforth_6d_61_63_72_6f_start:
87FA: 3E00    	  ld   a,$00
87FC: 32268B  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
87FF:         	cforth_6d_61_63_72_6f_end:
87FF: C9      	    ret
              	
              	
8800:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8800: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8804: 00000000	
8808: 0C1E1E0C	
880C: 0C000C00	
8810: 36360000	
8814: 00000000	
8818: 36367F36	
881C: 7F363600	
8820: 183E603C	
8824: 067C1800	
8828: 0063660C	
882C: 18336300	
8830: 1C361C3B	
8834: 6E663B00	
8838: 30306000	
883C: 00000000	
8840: 0C183030	
8844: 30180C00	
8848: 30180C0C	
884C: 0C183000	
8850: 00331E7F	
8854: 1E330000	
8858: 0018187E	
885C: 18180000	
8860: 00000000	
8864: 00181830	
8868: 0000007E	
886C: 00000000	
8870: 00000000	
8874: 00181800	
8878: 03060C18	
887C: 30604000	
8880: 3E63676F	
8884: 7B733E00	
8888: 18381818	
888C: 18187E00	
8890: 3C66061C	
8894: 30667E00	
8898: 3C66061C	
889C: 06663C00	
88A0: 0E1E3666	
88A4: 7F060F00	
88A8: 7E607C06	
88AC: 06663C00	
88B0: 1C30607C	
88B4: 66663C00	
88B8: 7E66060C	
88BC: 18181800	
88C0: 3C66663C	
88C4: 66663C00	
88C8: 3C66663E	
88CC: 060C3800	
88D0: 00181800	
88D4: 00181800	
88D8: 00181800	
88DC: 00181830	
88E0: 0C183060	
88E4: 30180C00	
88E8: 00007E00	
88EC: 007E0000	
88F0: 30180C06	
88F4: 0C183000	
88F8: 3C66060C	
88FC: 18001800	
8900: 3E636F6F	
8904: 6F603C00	
8908: 183C6666	
890C: 7E666600	
8910: 7E33333E	
8914: 33337E00	
8918: 1E336060	
891C: 60331E00	
8920: 7C363333	
8924: 33367C00	
8928: 7F31343C	
892C: 34317F00	
8930: 7F31343C	
8934: 34307800	
8938: 1E336060	
893C: 67331F00	
8940: 6666667E	
8944: 66666600	
8948: 3C181818	
894C: 18183C00	
8950: 0F060606	
8954: 66663C00	
8958: 7333363C	
895C: 36337300	
8960: 78303030	
8964: 31337F00	
8968: 63777F7F	
896C: 6B636300	
8970: 63737B6F	
8974: 67636300	
8978: 1C366363	
897C: 63361C00	
8980: 7E33333E	
8984: 30307800	
8988: 3C666666	
898C: 6E3C0E00	
8990: 7E33333E	
8994: 36337300	
8998: 3C667038	
899C: 0E663C00	
89A0: 7E5A1818	
89A4: 18183C00	
89A8: 66666666	
89AC: 66667E00	
89B0: 66666666	
89B4: 663C1800	
89B8: 6363636B	
89BC: 7F776300	
89C0: 6363361C	
89C4: 1C366300	
89C8: 6666663C	
89CC: 18183C00	
89D0: 7F63460C	
89D4: 19337F00	
89D8: 3C303030	
89DC: 30303C00	
89E0: 6030180C	
89E4: 06030100	
89E8: 3C0C0C0C	
89EC: 0C0C3C00	
89F0: 081C3663	
89F4: 00000000	
89F8: 00000000	
89FC: 0000007F	
8A00: 18180C00	
8A04: 00000000	
8A08: 00003C06	
8A0C: 3E663B00	
8A10: 7030303E	
8A14: 33336E00	
8A18: 00003C66	
8A1C: 60663C00	
8A20: 0E06063E	
8A24: 66663B00	
8A28: 00003C66	
8A2C: 7E603C00	
8A30: 1C363078	
8A34: 30307800	
8A38: 00003B66	
8A3C: 663E067C	
8A40: 7030363B	
8A44: 33337300	
8A48: 18003818	
8A4C: 18183C00	
8A50: 06000606	
8A54: 0666663C	
8A58: 70303336	
8A5C: 3C367300	
8A60: 38181818	
8A64: 18183C00	
8A68: 0000667F	
8A6C: 7F6B6300	
8A70: 00007C66	
8A74: 66666600	
8A78: 00003C66	
8A7C: 66663C00	
8A80: 00006E33	
8A84: 333E3078	
8A88: 00003B66	
8A8C: 663E060F	
8A90: 00006E3B	
8A94: 33307800	
8A98: 00003E60	
8A9C: 3C067C00	
8AA0: 08183E18	
8AA4: 181A0C00	
8AA8: 00006666	
8AAC: 66663B00	
8AB0: 00006666	
8AB4: 663C1800	
8AB8: 0000636B	
8ABC: 7F7F3600	
8AC0: 00006336	
8AC4: 1C366300	
8AC8: 00006666	
8ACC: 663E067C	
8AD0: 00007E4C	
8AD4: 18327E00	
8AD8: 0E181870	
8ADC: 18180E00	
8AE0: 0C0C0C00	
8AE4: 0C0C0C00	
8AE8: 7018180E	
8AEC: 18187000	
8AF0: 3B6E0000	
8AF4: 00000000	
8AF8: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8B00:         	SystemInformationTable:
              	
8B00:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8B00: 00A0    			dw 		FreeMemory
8B02:         	SINextFreeCodePage: 								; +2 	Next Free Code Byte Page
8B02: 2400    			db 		FirstCodePage,0
              	
8B04:         	SIBootCodeAddress:									; +4	Run from here
8B04: D783    			dw 		LOADBootstrap
8B06:         	SIBootCodePage: 									; +6    Run page.
8B06: 2400    			db		FirstCodePage,0
              	
8B08:         	SIPageUsage:										; +8 	Page Usage Table
8B08: 3F8B0000			dw 		PageUsage,0 			
              	
8B0C:         	SIDisplayInformation:								; +12 	Display Information structure address
8B0C: 278B0000			dw 		DIScreenWidth,0
              	
8B10:         	SIStack:											; +16 	Initial Z80 stack value
8B10: F07E0000			dw 		StackTop,0							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8B14:         	PAGEStackPointer: 									; stack used for switching pages
8B14: 0000    			dw 		0
8B16:         	PAGEStackBase:
8B16: FFFFFFFF			ds 		16
8B1A: FF...   	
              	
8B26:         	DICTForthMacroFlag:									; does it go in FORTH ($00) MACRO ($40)
8B26: 00      			db 		0
              	;
              	;			Display Information
              	;
8B27:         	DIScreenWidth:										; +0 	Screen Width
8B27: 00000000			dw 		0,0
8B2B:         	DIScreenHeight:										; +4 	Screen Height
8B2B: 00000000			dw 		0,0
8B2F:         	DIScreenSize: 										; +8    Screen Size in Characters
8B2F: 00000000			dw 		0,0
8B33:         	DIScreenDriver:										; +12 	Screen Driver
8B33: 00000000			dw 		0,0 								
8B37:         	DIFontBase:											; +16 	768 byte font, begins with space
8B37: 00880000			dw 		AlternateFont,0 							
8B3B:         	DIScreenMode:										; +20 	Current Mode
8B3B: 00000000			dw 		0,0
              	;
              	;			Page usage table.
              	;
8B3F:         	PageUsage:
8B3F: 01      			db 		1									; $20 (dictionary) [1 = system]
8B40: 01      			db 		1 									; $22 (bootstrap)  [2 = code]
8B41: 02      			db 		2									; $24 (first code)
8B42: 00000000			db 		0,0,0,0,0 							; $26-$2E 		   [0 = unused]
8B46: 00      	
8B47: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8B4B: 00000000	
8B4F: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8B53: 00000000	
8B57: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8B5B: 00000000	
8B5F: FF      			db 		$FF 								; end of page.
              	
8B60: FFFFFFFF			org 	$A000
8B64: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont               = $8800 = 34816          kernel.asm:65
Boot                        = $8006 = 32774          kernel.asm:25
BootstrapPage               = $0022 =    34          kernel.asm:17
COMCompileExecute           = $852E = 34094          compiler.asm:20
COMWorkingStack             = $7D40 = 32064          kernel.asm:14
CONSTConvert                = $842A = 33834          constant.asm:19
DICTAddWord                 = $8471 = 33905          dictionary.asm:19 (unused)
DICTFindWord                = $84CD = 33997          dictionary.asm:91
DICTForthMacroFlag          = $8B26 = 35622          data.asm:50
DIFontBase                  = $8B37 = 35639          data.asm:63
DIScreenDriver              = $8B33 = 35635          data.asm:61
DIScreenHeight              = $8B2B = 35627          data.asm:57
DIScreenMode                = $8B3B = 35643          data.asm:65
DIScreenSize                = $8B2F = 35631          data.asm:59
DIScreenWidth               = $8B27 = 35623          data.asm:55
DIVDivideMod16              = $8097 = 32919          divide.asm:18
DictionaryPage              = $0020 =    32          kernel.asm:16
Div16_Loop1                 = $80A1 = 32929          divide.asm:27
Div16_Loop2                 = $80B2 = 32946          divide.asm:41
Div16_NoAdd1                = $80A9 = 32937          divide.asm:33
Div16_NoAdd2                = $80BA = 32954          divide.asm:47
EditBuffer                  = $7B08 = 31496          kernel.asm:13
ErrorHandler                = $801E = 32798          kernel.asm:38
FARCompileByte              = $8064 = 32868          farmemory.asm:18
FARCompileWord              = $807C = 32892          farmemory.asm:40
FirstCodePage               = $0024 =    36          kernel.asm:18
FreeMemory                  = $A000 = 40960          data.asm:81
GFXClearScreen              = $80DC = 32988          graphics.asm:18
GFXGetFontGraphicDE         = $8160 = 33120          graphics.asm:146
GFXInitialise48k            = $8250 = 33360          screen48k.asm:19
GFXInitialiseLayer2         = $82B3 = 33459          screen_layer2.asm:19
GFXInitialiseLowRes         = $834A = 33610          screen_lores.asm:18
GFXMode                     = $80E6 = 32998          graphics.asm:32
GFXPrintCharacter48k        = $827C = 33404          screen48k.asm:53
GFXPrintCharacterLayer2     = $82E3 = 33507          screen_layer2.asm:56
GFXPrintCharacterLowRes     = $8374 = 33652          screen_lores.asm:50
GFXWriteCharacter           = $811B = 33051          graphics.asm:78
GFXWriteHexWord             = $812E = 33070          graphics.asm:101 (unused)
GFXWriteHexWordA            = $8130 = 33072          graphics.asm:103 (unused)
HaltZ80                     = $8021 = 32801          kernel.asm:42
IOScanKeyboard              = $8183 = 33155          keyboard.asm:18
L2PClear                    = $82BC = 33468          screen_layer2.asm:26
L2PClearBank                = $82CC = 33484          screen_layer2.asm:35
LOADBootstrap               = $83D7 = 33751          loader.asm:18
LowClearScreen              = $835D = 33629          screen_lores.asm:30
MULTMultiply16              = $80C2 = 32962          multiply.asm:18
MacroExpand                 = $83CF = 33743          utilities.asm:18
PAGEInitialise              = $8025 = 32805          paging.asm:18
PAGERestore                 = $804E = 32846          paging.asm:62
PAGEStackBase               = $8B16 = 35606          data.asm:47
PAGEStackPointer            = $8B14 = 35604          data.asm:45
PAGESwitch                  = $8035 = 32821          paging.asm:34
PageUsage                   = $8B3F = 35647          data.asm:70
SIBootCodeAddress           = $8B04 = 35588          data.asm:25
SIBootCodePage              = $8B06 = 35590          data.asm:27
SIDisplayInformation        = $8B0C = 35596          data.asm:33 (unused)
SINextFreeCode              = $8B00 = 35584          data.asm:20
SINextFreeCodePage          = $8B02 = 35586          data.asm:22
SIPageUsage                 = $8B08 = 35592          data.asm:30 (unused)
SIStack                     = $8B10 = 35600          data.asm:36
StackTop                    = $7EF0 = 32496          kernel.asm:12
SystemInformationTable      = $8B00 = 35584          data.asm:18
__COMCELoadSP               = $8558 = 34136          compiler.asm:62
__COMCEOut                  = $855C = 34140          compiler.asm:65
__COMCallHL                 = $85C6 = 34246          compiler.asm:159
__COMCompileConstant        = $85C7 = 34247          compiler.asm:168
__COMCompileEHL             = $85D7 = 34263          compiler.asm:182
__COMCyanWord               = $857C = 34172          compiler.asm:99
__COMError                  = $854F = 34127          compiler.asm:47
__COMExecuteEHL             = $85A8 = 34216          compiler.asm:145
__COMExit                   = $8555 = 34133          compiler.asm:59
__COMGreenWord              = $855F = 34143          compiler.asm:75
__COMPushHLOnStack          = $859A = 34202          compiler.asm:129
__COMXReloadSP              = $85BD = 34237          compiler.asm:154
__COMYellowWord             = $8587 = 34183          compiler.asm:112
__CONConFail                = $8468 = 33896          constant.asm:75
__CONConvLoop               = $8432 = 33842          constant.asm:26
__CONMinusExit              = $8455 = 33877          constant.asm:55
__CONNotNegative            = $8462 = 33890          constant.asm:69
__Core__Mult_Loop           = $80C9 = 32969          multiply.asm:24
__Core__Mult_Shift          = $80CE = 32974          multiply.asm:28
__DICTAddCopy               = $84B6 = 33974          dictionary.asm:66
__DICTAddGetLength          = $847A = 33914          dictionary.asm:27
__DICTCheckName             = $84F2 = 34034          dictionary.asm:117
__DICTCreateEntry           = $8497 = 33943          dictionary.asm:48
__DICTFindEndDictionary     = $848A = 33930          dictionary.asm:39
__DICTFindExit              = $8525 = 34085          dictionary.asm:150
__DICTFindFail              = $851E = 34078          dictionary.asm:146
__DICTFindMainLoop          = $84DA = 34010          dictionary.asm:100
__DICTFindNext              = $8515 = 34069          dictionary.asm:140
__DICTFindNoMatch           = $8512 = 34066          dictionary.asm:137
__GFXConfigure              = $8100 = 33024          graphics.asm:53
__GFXLayer2                 = $80F8 = 33016          graphics.asm:46
__GFXLowRes                 = $80FD = 33021          graphics.asm:50
__GFXPromptCharacter        = $817B = 33147          graphics.asm:167
__GFXWCExit                 = $8129 = 33065          graphics.asm:88
__GFXWHByte                 = $8142 = 33090          graphics.asm:119
__GFXWHDigit                = $8158 = 33112          graphics.asm:133
__GFXWHNibble               = $814F = 33103          graphics.asm:127
__IsNonZero                 = $87C3 = 34755          __words.asm:856
__IsPositive                = $87BA = 34746          __words.asm:837
__IsPositive2               = $87CC = 34764          __words.asm:874
__L2Exit                    = $8343 = 33603          screen_layer2.asm:136
__L2Loop                    = $8334 = 33588          screen_layer2.asm:123
__L2Not1                    = $82F9 = 33529          screen_layer2.asm:76
__L2Not2                    = $82FF = 33535          screen_layer2.asm:80
__L2Not3                    = $8305 = 33541          screen_layer2.asm:84
__L2NotSet                  = $833A = 33594          screen_layer2.asm:128
__L2Outer                   = $832C = 33580          screen_layer2.asm:118
__LOADBootLoop              = $83E5 = 33765          loader.asm:29
__LOADEnds                  = $8424 = 33828          loader.asm:73 (unused)
__LOADNextWord              = $8411 = 33809          loader.asm:59
__LOADScanExit              = $8418 = 33816          loader.asm:65
__LOADScanLoop              = $8409 = 33801          loader.asm:52
__LPExit                    = $83C8 = 33736          screen_lores.asm:120
__LessDifferentSigns        = $8644 = 34372          __words.asm:198
__LessExit                  = $864B = 34379          __words.asm:204
__LessFalse                 = $863F = 34367          __words.asm:194
__LessTrue                  = $8648 = 34376          __words.asm:202
__LowLoop                   = $83B4 = 33716          screen_lores.asm:104
__LowNotLower2              = $83AA = 33706          screen_lores.asm:97
__LowNotSet                 = $83BA = 33722          screen_lores.asm:109
__LowOuter                  = $83AC = 33708          screen_lores.asm:99
__ZXWCCopy                  = $82A8 = 33448          screen48k.asm:101
__ZXWCExit                  = $82AE = 33454          screen48k.asm:107
___kr4                      = $81B4 = 33204          keyboard.asm:49
__cs1                       = $8260 = 33376          screen48k.asm:29
__cs2                       = $8268 = 33384          screen48k.asm:34
__fill1                     = $86C4 = 34500          __words.asm:428
__fill2                     = $86CB = 34507          __words.asm:434
__kr1                       = $8198 = 33176          keyboard.asm:32
__kr2                       = $81A3 = 33187          keyboard.asm:38
__kr3                       = $81A5 = 33189          keyboard.asm:41
__kr_exit                   = $81D4 = 33236          keyboard.asm:79
__kr_keypressed             = $81CE = 33230          keyboard.asm:73
__kr_no_shift_table         = $81D8 = 33240          keyboard.asm:94
__kr_shift_table            = $8228 = 33320          keyboard.asm:106
__kr_symbol_shift_table     = $8200 = 33280          keyboard.asm:100
__move2                     = $86ED = 34541          __words.asm:480
__move3                     = $86E6 = 34534          __words.asm:472
_end                        = $C001 = 49153          kernel.asm:19 (unused)
_size                       = $4001 = 16385          kernel.asm:19 (unused)
cforth_21_end               = $8697 = 34455          __words.asm:359
cforth_21_forth             = $8690 = 34448          __words.asm:348 (unused)
cforth_21_macro             = $8699 = 34457          __words.asm:361 (unused)
cforth_21_start             = $8692 = 34450          __words.asm:350
cforth_2a_end               = $85E9 = 34281          __words.asm:27 (unused)
cforth_2a_forth             = $85E2 = 34274          __words.asm:18 (unused)
cforth_2a_start             = $85E4 = 34276          __words.asm:20 (unused)
cforth_2b_21_end            = $86AD = 34477          __words.asm:387 (unused)
cforth_2b_21_forth          = $86A1 = 34465          __words.asm:371 (unused)
cforth_2b_21_start          = $86A3 = 34467          __words.asm:373 (unused)
cforth_2b_2b_2b_end         = $8782 = 34690          __words.asm:738
cforth_2b_2b_2b_forth       = $8780 = 34688          __words.asm:731 (unused)
cforth_2b_2b_2b_macro       = $8783 = 34691          __words.asm:740 (unused)
cforth_2b_2b_2b_start       = $8780 = 34688          __words.asm:732
cforth_2b_2b_end            = $8777 = 34679          __words.asm:719
cforth_2b_2b_forth          = $8776 = 34678          __words.asm:713 (unused)
cforth_2b_2b_macro          = $8778 = 34680          __words.asm:721 (unused)
cforth_2b_2b_start          = $8776 = 34678          __words.asm:714
cforth_2b_6f_72_end         = $862E = 34350          __words.asm:161 (unused)
cforth_2b_6f_72_forth       = $8626 = 34342          __words.asm:148 (unused)
cforth_2b_6f_72_start       = $8627 = 34343          __words.asm:150 (unused)
cforth_2b_end               = $860A = 34314          __words.asm:94
cforth_2b_forth             = $8605 = 34309          __words.asm:85 (unused)
cforth_2b_macro             = $860C = 34316          __words.asm:96 (unused)
cforth_2b_start             = $8607 = 34311          __words.asm:87
cforth_2d_2d_2d_end         = $8797 = 34711          __words.asm:775
cforth_2d_2d_2d_forth       = $8795 = 34709          __words.asm:768 (unused)
cforth_2d_2d_2d_macro       = $8798 = 34712          __words.asm:777 (unused)
cforth_2d_2d_2d_start       = $8795 = 34709          __words.asm:769
cforth_2d_2d_end            = $878C = 34700          __words.asm:756
cforth_2d_2d_forth          = $878B = 34699          __words.asm:750 (unused)
cforth_2d_2d_macro          = $878D = 34701          __words.asm:758 (unused)
cforth_2d_2d_start          = $878B = 34699          __words.asm:751
cforth_2d_end               = $87A6 = 34726          __words.asm:798 (unused)
cforth_2d_forth             = $87A0 = 34720          __words.asm:787 (unused)
cforth_2d_start             = $87A0 = 34720          __words.asm:788 (unused)
cforth_2f_6d_6f_64_end      = $8603 = 34307          __words.asm:77 (unused)
cforth_2f_6d_6f_64_forth    = $85FC = 34300          __words.asm:68 (unused)
cforth_2f_6d_6f_64_start    = $85FE = 34302          __words.asm:70 (unused)
cforth_2f_end               = $85F1 = 34289          __words.asm:43 (unused)
cforth_2f_forth             = $85EB = 34283          __words.asm:35 (unused)
cforth_2f_start             = $85ED = 34285          __words.asm:37 (unused)
cforth_30_3c_end            = $87CC = 34764          __words.asm:878 (unused)
cforth_30_3c_forth          = $87C4 = 34756          __words.asm:868 (unused)
cforth_30_3c_start          = $87C4 = 34756          __words.asm:869 (unused)
cforth_30_3d_end            = $87C3 = 34755          __words.asm:860 (unused)
cforth_30_3d_forth          = $87BB = 34747          __words.asm:849 (unused)
cforth_30_3d_start          = $87BB = 34747          __words.asm:850 (unused)
cforth_31_2c_end            = $87EC = 34796          __words.asm:955 (unused)
cforth_31_2c_forth          = $87E6 = 34790          __words.asm:946 (unused)
cforth_31_2c_start          = $87E7 = 34791          __words.asm:948 (unused)
cforth_32_2a_end            = $8760 = 34656          __words.asm:682
cforth_32_2a_forth          = $875D = 34653          __words.asm:674 (unused)
cforth_32_2a_macro          = $8761 = 34657          __words.asm:684 (unused)
cforth_32_2a_start          = $875D = 34653          __words.asm:675
cforth_32_2c_end            = $87F3 = 34803          __words.asm:972 (unused)
cforth_32_2c_forth          = $87ED = 34797          __words.asm:963 (unused)
cforth_32_2c_start          = $87EE = 34798          __words.asm:965 (unused)
cforth_32_2f_end            = $876D = 34669          __words.asm:701
cforth_32_2f_forth          = $8769 = 34665          __words.asm:694 (unused)
cforth_32_2f_macro          = $876E = 34670          __words.asm:703 (unused)
cforth_32_2f_start          = $8769 = 34665          __words.asm:695
cforth_40_end               = $8668 = 34408          __words.asm:293
cforth_40_forth             = $8662 = 34402          __words.asm:283 (unused)
cforth_40_macro             = $866A = 34410          __words.asm:295 (unused)
cforth_40_start             = $8664 = 34404          __words.asm:285
cforth_61_62_73_end         = $87BA = 34746          __words.asm:841 (unused)
cforth_61_62_73_forth       = $87AF = 34735          __words.asm:826 (unused)
cforth_61_62_73_start       = $87AF = 34735          __words.asm:827 (unused)
cforth_61_6e_64_end         = $861C = 34332          __words.asm:119 (unused)
cforth_61_6e_64_forth       = $8614 = 34324          __words.asm:106 (unused)
cforth_61_6e_64_start       = $8615 = 34325          __words.asm:108 (unused)
cforth_62_72_65_61_6b_end   = $87DD = 34781          __words.asm:934
cforth_62_72_65_61_6b_forth = $87DB = 34779          __words.asm:928 (unused)
cforth_62_72_65_61_6b_macro = $87DE = 34782          __words.asm:936 (unused)
cforth_62_72_65_61_6b_start = $87DB = 34779          __words.asm:929
cforth_62_73_77_61_70_end   = $8754 = 34644          __words.asm:662
cforth_62_73_77_61_70_forth = $8751 = 34641          __words.asm:654 (unused)
cforth_62_73_77_61_70_macro = $8755 = 34645          __words.asm:664 (unused)
cforth_62_73_77_61_70_start = $8751 = 34641          __words.asm:655
cforth_63_21_end            = $8686 = 34438          __words.asm:336
cforth_63_21_forth          = $8680 = 34432          __words.asm:326 (unused)
cforth_63_21_macro          = $8688 = 34440          __words.asm:338 (unused)
cforth_63_21_start          = $8682 = 34434          __words.asm:328
cforth_63_40_end            = $8677 = 34423          __words.asm:314
cforth_63_40_forth          = $8672 = 34418          __words.asm:305 (unused)
cforth_63_40_macro          = $8678 = 34424          __words.asm:316 (unused)
cforth_63_40_start          = $8673 = 34419          __words.asm:307
cforth_64_72_6f_70_end      = $8712 = 34578          __words.asm:553
cforth_64_72_6f_70_forth    = $8710 = 34576          __words.asm:546 (unused)
cforth_64_72_6f_70_macro    = $8713 = 34579          __words.asm:555 (unused)
cforth_64_72_6f_70_start    = $8711 = 34577          __words.asm:548
cforth_64_75_70_end         = $871D = 34589          __words.asm:572
cforth_64_75_70_forth       = $871B = 34587          __words.asm:565 (unused)
cforth_64_75_70_macro       = $871E = 34590          __words.asm:574 (unused)
cforth_64_75_70_start       = $871C = 34588          __words.asm:567
cforth_66_69_6c_6c_end      = $86CC = 34508          __words.asm:439 (unused)
cforth_66_69_6c_6c_forth    = $86BC = 34492          __words.asm:418 (unused)
cforth_66_69_6c_6c_start    = $86BE = 34494          __words.asm:420 (unused)
cforth_66_6f_72_74_68_end   = $87F9 = 34809          __words.asm:989 (unused)
cforth_66_6f_72_74_68_forth = $87F4 = 34804          __words.asm:982 (unused)
cforth_66_6f_72_74_68_start = $87F4 = 34804          __words.asm:983 (unused)
cforth_68_61_6c_74_end      = $87DA = 34778          __words.asm:920 (unused)
cforth_68_61_6c_74_forth    = $87D6 = 34774          __words.asm:912 (unused)
cforth_68_61_6c_74_start    = $87D7 = 34775          __words.asm:914 (unused)
cforth_69_6e_6b_65_79_end   = $87D5 = 34773          __words.asm:904 (unused)
cforth_69_6e_6b_65_79_forth = $87CD = 34765          __words.asm:894 (unused)
cforth_69_6e_6b_65_79_start = $87CE = 34766          __words.asm:896 (unused)
cforth_6c_65_73_73_end      = $864B = 34379          __words.asm:209 (unused)
cforth_6c_65_73_73_forth    = $862F = 34351          __words.asm:178 (unused)
cforth_6c_65_73_73_start    = $8631 = 34353          __words.asm:180 (unused)
cforth_6d_61_63_72_6f_end   = $87FF = 34815          __words.asm:1004 (unused)
cforth_6d_61_63_72_6f_forth = $87FA = 34810          __words.asm:997 (unused)
cforth_6d_61_63_72_6f_start = $87FA = 34810          __words.asm:998 (unused)
cforth_6d_6f_64_end         = $85FA = 34298          __words.asm:60 (unused)
cforth_6d_6f_64_forth       = $85F3 = 34291          __words.asm:51 (unused)
cforth_6d_6f_64_start       = $85F5 = 34293          __words.asm:53 (unused)
cforth_6d_6f_76_65_end      = $86EE = 34542          __words.asm:485 (unused)
cforth_6d_6f_76_65_forth    = $86CE = 34510          __words.asm:447 (unused)
cforth_6d_6f_76_65_start    = $86D0 = 34512          __words.asm:449 (unused)
cforth_6e_65_67_61_74_65_end = $87AE = 34734          __words.asm:818 (unused)
cforth_6e_65_67_61_74_65_forth = $87A7 = 34727          __words.asm:806 (unused)
cforth_6e_65_67_61_74_65_start = $87A7 = 34727          __words.asm:807 (unused)
cforth_6e_69_70_end         = $8729 = 34601          __words.asm:591
cforth_6e_69_70_forth       = $8726 = 34598          __words.asm:584 (unused)
cforth_6e_69_70_macro       = $872B = 34603          __words.asm:593 (unused)
cforth_6e_69_70_start       = $8728 = 34600          __words.asm:586
cforth_6f_72_21_end         = $86BA = 34490          __words.asm:410 (unused)
cforth_6f_72_21_forth       = $86AF = 34479          __words.asm:395 (unused)
cforth_6f_72_21_start       = $86B1 = 34481          __words.asm:397 (unused)
cforth_6f_72_end            = $8625 = 34341          __words.asm:140 (unused)
cforth_6f_72_forth          = $861D = 34333          __words.asm:127 (unused)
cforth_6f_72_start          = $861E = 34334          __words.asm:129 (unused)
cforth_6f_76_65_72_end      = $8738 = 34616          __words.asm:612
cforth_6f_76_65_72_forth    = $8733 = 34611          __words.asm:603 (unused)
cforth_6f_76_65_72_macro    = $873A = 34618          __words.asm:614 (unused)
cforth_6f_76_65_72_start    = $8735 = 34613          __words.asm:605
cforth_70_21_end            = $8707 = 34567          __words.asm:526
cforth_70_21_forth          = $8700 = 34560          __words.asm:515 (unused)
cforth_70_21_macro          = $8708 = 34568          __words.asm:528 (unused)
cforth_70_21_start          = $8701 = 34561          __words.asm:517
cforth_70_40_end            = $86F7 = 34551          __words.asm:503
cforth_70_40_forth          = $86F0 = 34544          __words.asm:493 (unused)
cforth_70_40_macro          = $86F8 = 34552          __words.asm:505 (unused)
cforth_70_40_start          = $86F1 = 34545          __words.asm:495
cforth_73_63_72_65_65_6e_21_end = $8660 = 34400          __words.asm:266 (unused)
cforth_73_63_72_65_65_6e_21_forth = $8658 = 34392          __words.asm:256 (unused)
cforth_73_63_72_65_65_6e_21_start = $865A = 34394          __words.asm:258 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end = $8657 = 34391          __words.asm:248 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth = $8654 = 34388          __words.asm:242 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start = $8654 = 34388          __words.asm:243 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end = $8653 = 34387          __words.asm:234 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth = $864D = 34381          __words.asm:225 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start = $864E = 34382          __words.asm:227 (unused)
cforth_73_77_61_70_end      = $8747 = 34631          __words.asm:633
cforth_73_77_61_70_forth    = $8742 = 34626          __words.asm:624 (unused)
cforth_73_77_61_70_macro    = $8749 = 34633          __words.asm:635 (unused)
cforth_73_77_61_70_start    = $8744 = 34628          __words.asm:626
w2                          = $8427 = 33831          loader.asm:76


total time: 0.0100 sec.
no errors

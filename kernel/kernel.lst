              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-09 09:39:26
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Color Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 1289    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CD9D80  			call 	PAGEInitialise
              	
8013: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8015: CDDE80  			call 	GFXMode
              	
8018: 3A2089  			ld 		a,(BootPage)						; switch to boot page.
801B: CD9D80  			call 	PAGEInitialise
801E: 2A1E89  			ld 		hl,(BootAddress)					; start address
8021: E9      			jp 		(hl)
              	
8022:         	StopDefault:	
8022: C32280  			jp 		StopDefault
              	
              			include "support/multiply.asm" 				; 16 bit multiply (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8025:         	MULTMultiply16:
8025: C5      			push 	bc
8026: D5      			push 	de
8027: 44      			ld 		b,h 							; get multipliers in DE/BC
8028: 4D      			ld 		c,l
8029: 210000  			ld 		hl,0 							; zero total
802C:         	__Core__Mult_Loop:
802C: CB41    			bit 	0,c 							; lsb of shifter is non-zero
802E: 2801    			jr 		z,__Core__Mult_Shift
8030: 19      			add 	hl,de 							; add adder to total
8031:         	__Core__Mult_Shift:
8031: CB38    			srl 	b 								; shift BC right.
8033: CB19    			rr 		c
8035: EB      			ex 		de,hl 							; shift DE left
8036: 29      			add 	hl,hl
8037: EB      			ex 		de,hl
8038: 78      			ld 		a,b 							; loop back if BC is nonzero
8039: B1      			or 		c
803A: 20F0    			jr 		nz,__Core__Mult_Loop
803C: D1      			pop 	de
803D: C1      			pop 	bc
803E: C9      			ret
              	
              			include "support/divide.asm" 				; 16 bit divide (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
803F:         	DIVDivideMod16:
              	
803F: C5      		push 	bc
8040: 42      		ld 		b,d 				; DE 
8041: 4B      		ld 		c,e
8042: EB      		ex 		de,hl
8043: 210000  		ld 		hl,0
8046: 78      		ld 		a,b
8047: 0608    		ld 		b,8
8049:         	Div16_Loop1:
8049: 17      		rla
804A: ED6A    		adc 	hl,hl
804C: ED52    		sbc 	hl,de
804E: 3001    		jr 		nc,Div16_NoAdd1
8050: 19      		add 	hl,de
8051:         	Div16_NoAdd1:
8051: 10F6    		djnz 	Div16_Loop1
8053: 17      		rla
8054: 2F      		cpl
8055: 47      		ld 		b,a
8056: 79      		ld 		a,c
8057: 48      		ld 		c,b
8058: 0608    		ld 		b,8
805A:         	Div16_Loop2:
805A: 17      		rla
805B: ED6A    		adc 	hl,hl
805D: ED52    		sbc 	hl,de
805F: 3001    		jr 		nc,Div16_NoAdd2
8061: 19      		add 	hl,de
8062:         	Div16_NoAdd2:
8062: 10F6    		djnz 	Div16_Loop2
8064: 17      		rla
8065: 2F      		cpl
8066: 51      		ld 		d,c
8067: 5F      		ld 		e,a
8068: C1      		pop 	bc
8069: C9      		ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
806A:         	FARCompileByte:
806A: F5      			push 	af 									; save byte and HL
806B: E5      			push 	hl
806C: F5      			push 	af 									; save byte
806D: 3A1489  			ld		a,(HerePage) 						; switch to page
8070: CDAF80  			call 	PAGESwitch
8073: 2A1289  			ld 		hl,(Here) 							; write to memory location
8076: F1      			pop 	af
8077: 77      			ld 		(hl),a
8078: 23      			inc 	hl 									; bump memory location
8079: 221289  			ld 		(Here),hl 							; write back
807C: CDC880  			call 	PAGERestore
807F: E1      			pop 	hl 									; restore and exit
8080: F1      			pop 	af
8081: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8082:         	FARCompileWord:
8082: F5      			push 	af 									; save byte and HL
8083: D5      			push 	de
8084: E5      			push 	hl
8085: EB      			ex 		de,hl 								; word into DE
8086: 3A1489  			ld		a,(HerePage) 						; switch to page
8089: CDAF80  			call 	PAGESwitch
808C: 2A1289  			ld 		hl,(Here) 							; write to memory location
808F: 73      			ld 		(hl),e
8090: 23      			inc 	hl 	
8091: 72      			ld 		(hl),d
8092: 23      			inc 	hl
8093: 221289  			ld 		(Here),hl 							; write back
8096: CDC880  			call 	PAGERestore
8099: E1      			pop 	hl
809A: D1      			pop 	de 									; restore and exit
809B: F1      			pop 	af
809C: C9      			ret
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
809D:         	PAGEInitialise:
809D: E5      			push 	hl
809E: ED9256  			db 		$ED,$92,$56							; switch to page A
80A1: 3C      			inc 	a
80A2: ED9257  			db 		$ED,$92,$57
80A5: 3D      			dec 	a
80A6: 08      			ex 		af,af' 								; put page in A'
80A7: 213889  			ld 		hl,__PAGEStackBase 					; reset the page stack
80AA: 223689  			ld 		(__PAGEStackPointer),hl
80AD: E1      			pop 	hl
80AE: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
80AF:         	PAGESwitch:
80AF: F5      			push 	af
80B0: E5      			push 	hl
              	
80B1: F5      			push 	af 									; save A on stack
80B2: 2A3689  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
80B5: 08      			ex 		af,af'
80B6: 77      			ld 		(hl),a
80B7: 23      			inc 	hl
80B8: 223689  			ld 		(__PAGEStackPointer),hl
              	
80BB: F1      			pop 	af 									; restore new A
80BC: ED9256  			db 		$ED,$92,$56							; switch to page A
80BF: 3C      			inc 	a
80C0: ED9257  			db 		$ED,$92,$57
80C3: 3D      			dec 	a
80C4: 08      			ex 		af,af' 								; put page in A'
              	
80C5: E1      			pop 	hl
80C6: F1      			pop 	af
80C7: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
80C8:         	PAGERestore:
80C8: F5      			push 	af
80C9: E5      			push 	hl
80CA: 2A3689  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
80CD: 2B      			dec 	hl
80CE: 7E      			ld 		a,(hl)
80CF: 223689  			ld 		(__PAGEStackPointer),hl
80D2: ED9256  			db 		$ED,$92,$56							; switch to page A
80D5: 3C      			inc 	a
80D6: ED9257  			db 		$ED,$92,$57
80D9: 3D      			dec 	a
80DA: 08      			ex 		af,af' 								; update A'
80DB: E1      			pop 	hl
80DC: F1      			pop 	af
80DD: C9      			ret
              					
              			include "console/graphics.asm"				; graphic routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80DE:         	GFXMode:
80DE: C5      			push 	bc
80DF: D5      			push 	de
80E0: E5      			push 	hl
80E1: 7D      			ld 		a,l 								; save new mode.
80E2: 322E89  			ld 		(SIScreenMode),a
80E5: 2D      			dec 	l 									; L = 1 mode layer2
80E6: 2808    			jr 		z,__GFXLayer2
80E8: 2D      			dec 	l
80E9: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80EB: CD2582  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80EE: 1808    			jr 		__GFXConfigure
              	
80F0:         	__GFXLayer2:
80F0: CD9D82  			call 	GFXInitialiseLayer2
80F3: 1803    			jr 		__GFXConfigure
              	
80F5:         	__GFXLowRes:
80F5: CD5483  			call 	GFXInitialiseLowRes
              	
80F8:         	__GFXConfigure:
80F8: 7D      			ld 		a,l 								; save screen size
80F9: 322289  			ld 		(SIScreenWidth),a
80FC: 7C      			ld 		a,h
80FD: 322689  			ld 		(SIScreenHeight),a
8100: EB      			ex 		de,hl 								; save driver
8101: 223489  			ld 		(SIScreenDriver),hl
              	
8104: 6A      			ld 		l,d 								; put sizes in HL DE
8105: 2600    			ld 		h,0
8107: 1600    			ld 		d,0
8109: CD2580  			call 	MULTMultiply16 						; multiply to get size and store.
810C: 222A89  			ld 		(SIScreenSize),hl
              	
810F: E1      			pop 	hl
8110: D1      			pop 	de
8111: C1      			pop 	bc
8112: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8113:         	GFXWriteCharacter:
8113: F5      			push 	af
8114: C5      			push 	bc
8115: D5      			push 	de
8116: E5      			push 	hl
8117: 012181  			ld 		bc,__GFXWCExit
811A: C5      			push 	bc
811B: ED4B3489			ld 		bc,(SIScreenDriver)
811F: C5      			push 	bc
8120: C9      			ret
8121:         	__GFXWCExit:
8121: E1      			pop 	hl
8122: D1      			pop 	de
8123: C1      			pop 	bc
8124: F1      			pop 	af
8125: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8126:         	GFXWriteHexWord:
8126: 3E05    			ld 		a,5
8128:         	GFXWriteHexWordA:
8128: C5      			push 	bc
8129: D5      			push 	de
812A: E5      			push 	hl
812B: 4F      			ld 		c,a
812C: 7A      			ld 		a,d
812D: D5      			push 	de
812E: CD3A81  			call 	__GFXWHByte
8131: D1      			pop 	de
8132: 7B      			ld 		a,e
8133: CD3A81  			call	__GFXWHByte
8136: E1      			pop 	hl
8137: D1      			pop 	de
8138: C1      			pop 	bc
8139: C9      			ret
              	
813A:         	__GFXWHByte:
813A: F5      			push 	af
813B: CB0F    			rrc 	a
813D: CB0F    			rrc		a
813F: CB0F    			rrc 	a
8141: CB0F    			rrc 	a
8143: CD4781  			call 	__GFXWHNibble
8146: F1      			pop 	af
8147:         	__GFXWHNibble:
8147: 51      			ld 		d,c
8148: E60F    			and 	15
814A: FE0A    			cp 		10
814C: 3802    			jr 		c,__GFXWHDigit
814E: C607    			add		a,7
8150:         	__GFXWHDigit:
8150: C630    			add 	a,48
8152: 5F      			ld 		e,a
8153: CD1381  			call 	GFXWriteCharacter
8156: 23      			inc 	hl
8157: C9      			ret
              			include "console/keyboard.asm"				; keyboard I/O
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8158:         	IOScanKeyboard:
8158: C5      			push 	bc
8159: D5      			push 	de
815A: E5      			push 	hl
              	
815B: 21AD81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
815E: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8160: 06FE    			ld 		b,$FE
8162: ED78    			in 		a,(c)
8164: CB47    			bit 	0,a
8166: 2005    			jr 		nz,__kr1
8168: 21D581  			ld 		hl,__kr_shift_table
816B: 180B    			jr 		__kr2
816D:         	__kr1:
816D: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
816F: ED78    			in 		a,(c)
8171: CB4F    			bit 	1,a
8173: 2003    			jr 		nz,__kr2
8175: 21FD81  			ld 		hl,__kr_symbol_shift_table
8178:         	__kr2:
              	
8178: 1EFE    			ld 		e,$FE 								; scan pattern.
817A: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
817B: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
817D: FEFE    			cp 		$FE
817F: 2808    			jr 		z,___kr4
8181: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8183: FE7F    			cp 		$7F
8185: 2802    			jr 		z,___kr4
8187: 161F    			ld 		d,$01F 								; check all bits.
8189:         	___kr4:
8189: 43      			ld 		b,e 								; scan the keyboard
818A: 0EFE    			ld 		c,$FE
818C: ED78    			in 		a,(c)
818E: 2F      			cpl 										; make that active high.
818F: A2      			and 	d  									; and with check value.
8190: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
8192: 23      			inc 	hl 									; next set of keyboard characters
8193: 23      			inc 	hl
8194: 23      			inc 	hl
8195: 23      			inc 	hl
8196: 23      			inc 	hl
              	
8197: 7B      			ld 		a,e 								; get pattern
8198: 87      			add 	a,a 								; shift left
8199: F601    			or 		1 									; set bit 1.
819B: 5F      			ld 		e,a
              	
819C: FEFF    			cp 		$FF 								; finished when all 1's.
819E: 20DA    			jr 		nz,__kr3 
81A0: AF      			xor 	a
81A1: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81A3:         	__kr_keypressed:
81A3: 23      			inc 	hl  								; shift right until carry set
81A4: 1F      			rra
81A5: 30FC    			jr 		nc,__kr_keypressed
81A7: 2B      			dec 	hl 									; undo the last inc hl
81A8: 7E      			ld 		a,(hl) 								; get the character number.
81A9:         	__kr_exit:
81A9: E1      			pop 	hl
81AA: D1      			pop 	de
81AB: C1      			pop 	bc
81AC: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
81AD:         	__kr_no_shift_table:
81AD: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81B1: 76617364	
81B5: 6667    	
81B7: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81BB: 74313233	
81BF: 3435    	
81C1: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
81C5: 36706F69	
81C9: 7579    	
81CB: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
81CF: 6820006D	
81D3: 6E62    	
              	
81D5:         	__kr_shift_table:
81D5: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
81D9: 2F7E7C5C	
81DD: 7B7D    	
81DF: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
81E3: 3E214023	
81E7: 2425    	
81E9: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
81ED: 26223B00	
81F1: 5D5B    	
81F3: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
81F7: 5E20002E	
81FB: 2C2A    	
              	
81FD:         	__kr_symbol_shift_table:
81FD: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8201: 2F7E7C5C	
8205: 7B7D    	
8207: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
820B: 3E101112	
820F: 1314    	
8211: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8215: 15223B00	
8219: 5D5B    	
821B: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
821F: 5E20002E	
8223: 2C2A    	
              			include "console/screen48k.asm" 			; drivers
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8225:         	GFXInitialise48k:
8225: F5      			push 	af 									; save registers
8226: C5      			push 	bc
              	
8227: 013B12  			ld 		bc,$123B 							; Layer 2 access port
822A: 3E00    			ld 		a,0 								; disable Layer 2
822C: ED79    			out 	(c),a
822E: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8232: 210040  			ld 		hl,$4000 							; clear pixel memory
8235: 3600    	__cs1:	ld 		(hl),0
8237: 23      			inc 	hl
8238: 7C      			ld 		a,h
8239: FE58    			cp 		$58
823B: 20F8    			jr 		nz,__cs1
823D: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
823F: 23      			inc 	hl
8240: 7C      			ld 		a,h
8241: FE5B    			cp 		$5B
8243: 20F8    			jr 		nz,__cs2	
8245: AF      			xor 	a 									; border off
8246: D3FE    			out 	($FE),a
8248: C1      			pop 	bc
8249: F1      			pop 	af
824A: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
824D: 115182  			ld 		de,GFXPrintCharacter48k
8250: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8251:         	GFXPrintCharacter48k:
8251: F5      			push 	af 									; save registers
8252: C5      			push 	bc
8253: D5      			push 	de
8254: E5      			push 	hl
              	
8255: 43      			ld 		b,e 								; character in B
8256: 7C      			ld 		a,h 								; check range.
8257: FE03    			cp 		3
8259: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
825B: E5      			push 	hl 									; save position.
825C: 7C      			ld 		a,h
825D: C658    			add 	$58
825F: 67      			ld 		h,a
              	
8260: 7A      			ld 		a,d 								; get current colour
8261: E607    			and 	7  									; mask 0..2
8263: F640    			or 		$40  								; make bright
8265: 77      			ld 		(hl),a 								; store it.	
8266: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8267: D5      			push 	de
8268: EB      			ex 		de,hl
8269: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
826A: 7A      			ld 		a,d
826B: E603    			and 	3
826D: 87      			add 	a,a
826E: 87      			add 	a,a
826F: 87      			add 	a,a
8270: F640    			or 		$40
8272: 67      			ld 		h,a
8273: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8274: E5      			push 	hl
8275: 78      			ld 		a,b 								; get character
8276: E67F    			and 	$7F 								; bits 0-6 only.
8278: D620    			sub 	32
827A: 6F      			ld 		l,a 								; put in HL
827B: 2600    			ld 		h,0
827D: 29      			add 	hl,hl 								; x 8
827E: 29      			add 	hl,hl
827F: 29      			add 	hl,hl
8280: ED5B3289			ld 		de,(SIFontBase) 					; add the font base.
8284: 19      			add 	hl,de
8285: EB      			ex 		de,hl 								; put in DE (font address)
8286: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8287: 78      			ld 		a,b
8288: 0608    			ld 		b,8 								; copy 8 characters
828A: 0E00    			ld 		c,0 								; XOR value 0
828C: CB7F    			bit 	7,a 								; is the character reversed
828E: 2801    			jr 		z,__ZXWCCopy
8290: 0D      			dec 	c 									; C is the XOR mask now $FF
8291:         	__ZXWCCopy:
8291: 1A      			ld 		a,(de)								; get font data
8292: A9      			xor 	c 									; xor with reverse
8293: 77      			ld 		(hl),a 								; write back
8294: 24      			inc 	h 									; bump pointers
8295: 13      			inc 	de
8296: 10F9    			djnz 	__ZXWCCopy 							; do B times.
8298:         	__ZXWCExit:
8298: E1      			pop 	hl 									; restore and exit
8299: D1      			pop 	de
829A: C1      			pop 	bc
829B: F1      			pop 	af
829C: C9      			ret
              			include "console/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
829D:         	GFXInitialiseLayer2:
829D: F5      			push 	af
829E: C5      			push 	bc
829F: D5      			push 	de
82A0: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82A4: 1E02    			ld 		e,2 								; 3 banks to erase
82A6:         	L2PClear:
82A6: 7B      			ld 		a,e 								; put bank number in bits 6/7
82A7: CB0F    			rrc 	a
82A9: CB0F    			rrc 	a
82AB: F603    			or 		2+1 								; shadow on, visible, enable write paging
82AD: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82B0: ED79    			out 	(c),a
82B2: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82B5:         	L2PClearBank: 										; assume default palette :)
82B5: 2B      			dec 	hl
82B6: 3600    			ld 		(hl),$00
82B8: 7C      			ld 		a,h
82B9: B5      			or 		l
82BA: 20F9    			jr		nz,L2PClearBank
82BC: 1D      			dec 	e
82BD: F2A682  			jp 		p,L2PClear
              	
82C0: AF      			xor 	a
82C1: D3FE    			out 	($FE),a
              	
82C3: D1      			pop 	de
82C4: C1      			pop 	bc
82C5: F1      			pop 	af
82C6: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82C9: 11CD82  			ld 		de,GFXPrintCharacterLayer2
82CC: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82CD:         	GFXPrintCharacterLayer2:
82CD: F5      			push 	af
82CE: C5      			push 	bc
82CF: D5      			push 	de
82D0: E5      			push 	hl
82D1: DDE5    			push 	ix
              	
82D3: 43      			ld 		b,e 								; save A temporarily
82D4: 78      			ld 		a,b
82D5: E67F    			and 	$7F
82D7: FE20    			cp 		32
82D9: 3872    			jr 		c,__L2Exit 							; check char in range
82DB: 7C      			ld 		a,h
82DC: FE03    			cp 		3
82DE: 306D    			jr 		nc,__L2Exit 						; check position in range
82E0: 78      			ld 		a,b
              	
82E1: F5      			push 	af 	
82E2: AF      			xor 	a 									; convert colour in C to palette index
82E3: CB42    			bit 	0,d 								; (assumes standard palette)
82E5: 2802    			jr 		z,__L2Not1
82E7: F603    			or 		$03
82E9:         	__L2Not1:
82E9: CB52    			bit 	2,d
82EB: 2802    			jr 		z,__L2Not2
82ED: F61C    			or 		$1C
82EF:         	__L2Not2:
82EF: CB4A    			bit 	1,d
82F1: 2802    			jr 		z,__L2Not3
82F3: F6C0    			or 		$C0
82F5:         	__L2Not3:
82F5: 4F      			ld 		c,a 								; C is foreground
82F6: 0600    			ld 		b,0									; B is xor flipper, initially zero
82F8: F1      			pop 	af 									; restore char
              	
82F9: E5      			push 	hl
82FA: CB7F    			bit 	7,a 								; adjust background bit on bit 7
82FC: 2802    			jr 		z,__L2NotCursor
82FE: 06FF    			ld 		b,$FF 								; light grey is cursor
8300:         	__L2NotCursor:
8300: E67F    			and 	$7F 								; offset from space
8302: D620    			sub 	$20
8304: 6F      			ld 		l,a 								; put into HL
8305: 2600    			ld 		h,0
8307: 29      			add 	hl,hl 								; x 8
8308: 29      			add 	hl,hl
8309: 29      			add 	hl,hl
              	
830A: E5      			push 	hl 									; transfer to IX
830B: DDE1    			pop 	ix
830D: E1      			pop 	hl
              	
830E: C5      			push 	bc 									; add the font base to it.
830F: ED4B3289			ld 		bc,(SIFontBase)
8313: DD09    			add 	ix,bc
8315: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8316: C5      			push 	bc
8317: 7C      			ld  	a,h 								; this is the page number.
8318: CB0F    			rrc 	a
831A: CB0F    			rrc 	a
831C: E6C0    			and 	$C0 								; in bits 6 & 7
831E: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8320: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8323: ED79    			out 	(c),a
8325: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8326: EB      			ex 		de,hl
8327: 6B      			ld 		l,e
8328: 2600    			ld 		h,0
832A: 29      			add 	hl,hl 								
832B: 29      			add 	hl,hl
832C: 29      			add 	hl,hl
832D: CB24    			sla 	h
832F: CB24    			sla 	h
8331: CB24    			sla 	h
              	
8333: 1E08    			ld 		e,8 								; do 8 rows
8335:         	__L2Outer:
8335: E5      			push 	hl 									; save start
8336: 1608    			ld 		d,8 								; do 8 columns
8338: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
833B: A8      			xor 	b 									; maybe flip it ?
833C: DD23    			inc 	ix
833E:         	__L2Loop:
833E: 3600    			ld 		(hl),0 								; background
8340: 87      			add 	a,a 								; shift pattern left
8341: 3001    			jr 		nc,__L2NotSet
8343: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8344:         	__L2NotSet:
8344: 23      			inc 	hl
8345: 15      			dec 	d 									; do a row
8346: 20F6    			jr 		nz,	__L2Loop
8348: E1      			pop 	hl 									; restore, go 256 bytes down.
8349: 24      			inc 	h
834A: 1D      			dec 	e 									; do 8 rows
834B: 20E8    			jr 		nz,__L2Outer	
834D:         	__L2Exit:
834D: DDE1    			pop 	ix
834F: E1      			pop 	hl
8350: D1      			pop 	de
8351: C1      			pop 	bc
8352: F1      			pop 	af
8353: C9      			ret
              			include "console/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8354:         	GFXInitialiseLowRes:
8354: F5      			push 	af
8355: C5      			push 	bc
8356: D5      			push 	de
              	
8357: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
835B: AF      			xor 	a 									; layer 2 off.
835C: 013B12  			ld 		bc,$123B 							; out to layer 2 port
835F: ED79    			out 	(c),a
              	
8361: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8364: 110060  			ld 		de,$6000
8367:         	LowClearScreen: 									; assume default palette :)
8367: AF      			xor 	a
8368: 77      			ld 		(hl),a
8369: 12      			ld 		(de),a
836A: 23      			inc 	hl
836B: 13      			inc 	de
836C: 7C      			ld 		a,h
836D: FE58    			cp 		$58
836F: 20F6    			jr		nz,LowClearScreen
8371: AF      			xor 	a
8372: D3FE    			out 	($FE),a
8374: D1      			pop 	de
8375: C1      			pop 	bc
8376: F1      			pop 	af
8377: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
837A: 117E83  			ld 		de,GFXPrintCharacterLowRes
837D: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
837E:         	GFXPrintCharacterLowRes:
837E: F5      			push 	af
837F: C5      			push 	bc
8380: D5      			push 	de
8381: E5      			push 	hl
8382: DDE5    			push 	ix
              	
8384: 43      			ld 		b,e 								; save character in B
8385: 7B      			ld 		a,e
8386: E67F    			and 	$7F
8388: FE20    			cp 		32
838A: 3866    			jr 		c,__LPExit
              	
838C: 29      			add 	hl,hl
838D: 29      			add 	hl,hl
838E: 7C      			ld	 	a,h 								; check in range 192*4 = 768
838F: FE03    			cp 		3
8391: 305F    			jr 		nc,__LPExit
              	
8393: 7A      			ld 		a,d 								; only lower 3 bits of colour
8394: E607    			and 	7
8396: 4F      			ld 		c,a 								; C is foreground
              	
8397: E5      			push 	hl
8398: 78      			ld 		a,b 								; get char back
8399: 0600    			ld 		b,0 								; B = no flip colour.
839B: CB7F    			bit 	7,a
839D: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
839F: 05      			dec 	b
83A0:         	__LowNotReverse:
83A0: E67F    			and 	$7F 								; offset from space
83A2: D620    			sub 	$20
83A4: 6F      			ld 		l,a 								; put into HL
83A5: 2600    			ld 		h,0
83A7: 29      			add 	hl,hl 								; x 8
83A8: 29      			add 	hl,hl
83A9: 29      			add 	hl,hl
              	
83AA: E5      			push 	hl 									; transfer to IX
83AB: DDE1    			pop 	ix
              	
83AD: C5      			push 	bc 									; add the font base to it.
83AE: ED4B3289			ld 		bc,(SIFontBase)
83B2: DD09    			add 	ix,bc
83B4: C1      			pop 	bc
83B5: E1      			pop 	hl
83B6: EB      			ex 		de,hl
83B7: 7B      			ld 		a,e 								; put DE => HL
83B8: E6C0    			and 	192 								; these are part of Y
83BA: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83BB: 62      			ld 		h,d		
83BC: 29      			add 	hl,hl
83BD: 29      			add 	hl,hl
83BE: 29      			add 	hl,hl
83BF: 29      			add 	hl,hl
83C0: CBF4    			set 	6,h 								; put into $4000 range
              	
83C2: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83C4: A3      			and 	e 									; and with E, gives X position
83C5: 87      			add 	a,a 								; now multiplied by 8.
83C6: 5F      			ld 		e,a 								; DE is x offset.
83C7: 1600    			ld 		d,0  
              	
83C9: 19      			add 	hl,de
83CA: 7C      			ld 		a,h
83CB: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83CD: 3804    			jr 		c,__LowNotLower2
83CF: 110008  			ld 		de,$0800
83D2: 19      			add 	hl,de
83D3:         	__LowNotLower2:
83D3: 1E08    			ld 		e,8 								; do 8 rows
83D5:         	__LowOuter:
83D5: E5      			push 	hl 									; save start
83D6: 1608    			ld 		d,8 								; do 8 columns
83D8: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83DB: A8      			xor 	b
83DC: DD23    			inc 	ix
83DE:         	__LowLoop:
83DE: 3600    			ld 		(hl),0 								; background
83E0: 87      			add 	a,a 								; shift pattern left
83E1: 3001    			jr 		nc,__LowNotSet
83E3: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83E4:         	__LowNotSet:
83E4: 2C      			inc 	l
83E5: 15      			dec 	d 									; do a row
83E6: 20F6    			jr 		nz,	__LowLoop
83E8: E1      			pop 	hl 									; restore, go 256 bytes down.
83E9: D5      			push 	de
83EA: 118000  			ld 		de,128
83ED: 19      			add 	hl,de
83EE: D1      			pop 	de
83EF: 1D      			dec 	e 									; do 8 rows
83F0: 20E3    			jr 		nz,__LowOuter	
83F2:         	__LPExit:
83F2: DDE1    			pop 	ix
83F4: E1      			pop 	hl
83F5: D1      			pop 	de
83F6: C1      			pop 	bc
83F7: F1      			pop 	af
83F8: C9      			ret
              	
              			include "temp/__words.asm"					; vocabulary file.
              	
83F9:         	_define_forth_73_79_73_2e_65_78_70_61_6e_64_2e_6d_61_63_72_6f:
83F9: DDE1    		pop ix
83FB:         	expandMacro:
83FB: E3      		ex (sp),hl
83FC:         	__expandLoop:
83FC: 7E      		ld a,(hl)
83FD: 23      		inc hl
83FE: CD6A80  		call FARCompileByte
8401: 10F9    		djnz __expandLoop
8403: E1      		pop hl
8404: C9      		ret
8405: DDE9    		jp (ix)
              	
8407:         	_define_forth_31_2c:
8407: DDE1    		pop ix
8409: 7B      		ld a,e
840A: CD6A80  		call FARCompileByte
840D: D1      		pop de
840E: DDE9    		jp (ix)
              	
8410:         	_define_forth_32_2c:
8410: DDE1    		pop ix
8412: EB      		ex de,hl
8413: CD8280  		call FARCompileWord
8416: D1      		pop de
8417: DDE9    		jp (ix)
              	
8419:         	_define_forth_2b:
8419: DDE1    		pop ix
841B: E1      		pop hl
841C: 19      		add hl,de
841D: EB      		ex de,hl
841E: DDE9    		jp (ix)
              	
8420:         	_define_macro_2b:
8420: 0603    		ld b,_end_0-_start_0
8422: CDFB83  		call expandMacro
8425:         	_start_0:
8425: E1      		pop hl
8426: 19      		add hl,de
8427: EB      		ex de,hl
8428:         	_end_0:
              	
8428:         	_define_forth_2a:
8428: DDE1    		pop ix
842A: E1      		pop hl
842B: CD2580  		call MULTMultiply16
842E: EB      		ex de,hl
842F: DDE9    		jp (ix)
              	
8431:         	_define_forth_2f:
8431: DDE1    		pop ix
8433: E1      		pop hl
8434: CD3F80  		call DIVDivideMod16
8437: DDE9    		jp (ix)
              	
8439:         	_define_forth_6d_6f_64:
8439: DDE1    		pop ix
843B: E1      		pop hl
843C: CD3F80  		call DIVDivideMod16
843F: EB      		ex de,hl
8440: DDE9    		jp (ix)
              	
8442:         	_define_forth_2f_6d_6f_64:
8442: DDE1    		pop ix
8444: E1      		pop hl
8445: CD3F80  		call DIVDivideMod16
8448: E5      		push hl
8449: DDE9    		jp (ix)
              	
844B:         	_define_forth_3c:
844B: DDE1    		pop ix
844D: E1      		pop hl
844E: 7C      		ld a,h
844F: AA      		xor d
8450: 87      		add a,a
8451: 3004    		jr nc,__less_samesign
8453: 7A      		ld a,d
8454: 87      		add a,a
8455: 1803    		jr __less_returnc
8457:         	__less_samesign:
8457: EB      		ex de,hl
8458: ED52    		sbc hl,de
845A:         	__less_returnc:
845A: 3E00    		ld a,0
845C: DE00    		sbc a,0
845E: 5F      		ld e,a
845F: 57      		ld d,a
8460: DDE9    		jp (ix)
              	
8462:         	_define_forth_3d:
8462: DDE1    		pop ix
8464: E1      		pop hl
8465: 7C      		ld a,h
8466: AA      		xor d
8467: 67      		ld h,a
8468: 7D      		ld a,l
8469: AB      		xor e
846A: B4      		or h
846B: 110000  		ld de,$0000
846E: 2001    		jr nz,__equal_different
8470: 1B      		dec de
8471:         	__equal_different:
8471: DDE9    		jp (ix)
              	
8473:         	_define_forth_61_6e_64:
8473: DDE1    		pop ix
8475: E1      		pop hl
8476: 7B      		ld a,e
8477: A5      		and l
8478: 5F      		ld e,a
8479: 7A      		ld a,d
847A: A4      		and h
847B: 57      		ld d,a
847C: DDE9    		jp (ix)
              	
847E:         	_define_forth_6f_72:
847E: DDE1    		pop ix
8480: E1      		pop hl
8481: 7B      		ld a,e
8482: AD      		xor l
8483: 5F      		ld e,a
8484: 7A      		ld a,d
8485: AC      		xor h
8486: 57      		ld d,a
8487: DDE9    		jp (ix)
              	
8489:         	_define_forth_78_6f_72:
8489: DDE1    		pop ix
848B: E1      		pop hl
848C: 7B      		ld a,e
848D: AD      		xor l
848E: 5F      		ld e,a
848F: 7A      		ld a,d
8490: AC      		xor h
8491: 57      		ld d,a
8492: DDE9    		jp (ix)
              	
8494:         	_define_forth_2b_6f_72:
8494: DDE1    		pop ix
8496: E1      		pop hl
8497: 7B      		ld a,e
8498: B5      		or l
8499: 5F      		ld e,a
849A: 7A      		ld a,d
849B: B4      		or h
849C: 57      		ld d,a
849D: DDE9    		jp (ix)
              	
849F:         	_define_forth_6c_6f_72:
849F: DDE1    		pop ix
84A1: E1      		pop hl
84A2: 7B      		ld a,e
84A3: B5      		or l
84A4: 5F      		ld e,a
84A5: 7A      		ld a,d
84A6: B4      		or h
84A7: 57      		ld d,a
84A8: DDE9    		jp (ix)
              	
84AA:         	_define_forth_2d:
84AA: 7B      		ld a,e
84AB: 2F      		cpl
84AC: 5F      		ld e,a
84AD: 7A      		ld a,d
84AE: 2F      		cpl
84AF: 57      		ld d,a
84B0: C9      		ret
              	
84B1:         	_define_forth_6e_6f_74:
84B1: 7B      		ld a,e
84B2: 2F      		cpl
84B3: 5F      		ld e,a
84B4: 7A      		ld a,d
84B5: 2F      		cpl
84B6: 57      		ld d,a
84B7: C9      		ret
              	
84B8:         	_define_forth_32_2a:
84B8: 29      		add hl,hl
84B9: C9      		ret
              	
84BA:         	_define_macro_32_2a:
84BA: 0601    		ld b,_end_1-_start_1
84BC: CDFB83  		call expandMacro
84BF:         	_start_1:
84BF: 29      		add hl,hl
84C0:         	_end_1:
              	
84C0:         	_define_forth_34_2a:
84C0: 29      		add hl,hl
84C1: 29      		add hl,hl
84C2: C9      		ret
              	
84C3:         	_define_macro_34_2a:
84C3: 0602    		ld b,_end_2-_start_2
84C5: CDFB83  		call expandMacro
84C8:         	_start_2:
84C8: 29      		add hl,hl
84C9: 29      		add hl,hl
84CA:         	_end_2:
              	
84CA:         	_define_forth_38_2a:
84CA: 29      		add hl,hl
84CB: 29      		add hl,hl
84CC: 29      		add hl,hl
84CD: C9      		ret
              	
84CE:         	_define_macro_38_2a:
84CE: 0603    		ld b,_end_3-_start_3
84D0: CDFB83  		call expandMacro
84D3:         	_start_3:
84D3: 29      		add hl,hl
84D4: 29      		add hl,hl
84D5: 29      		add hl,hl
84D6:         	_end_3:
              	
84D6:         	_define_forth_31_36_2a:
84D6: 29      		add hl,hl
84D7: 29      		add hl,hl
84D8: 29      		add hl,hl
84D9: 29      		add hl,hl
84DA: C9      		ret
              	
84DB:         	_define_macro_31_36_2a:
84DB: 0604    		ld b,_end_4-_start_4
84DD: CDFB83  		call expandMacro
84E0:         	_start_4:
84E0: 29      		add hl,hl
84E1: 29      		add hl,hl
84E2: 29      		add hl,hl
84E3: 29      		add hl,hl
84E4:         	_end_4:
              	
84E4:         	_define_forth_32_2f:
84E4: CB2A    		sra d
84E6: CB1B    		rr e
84E8: C9      		ret
              	
84E9:         	_define_macro_32_2f:
84E9: 0604    		ld b,_end_5-_start_5
84EB: CDFB83  		call expandMacro
84EE:         	_start_5:
84EE: CB2A    		sra d
84F0: CB1B    		rr e
84F2:         	_end_5:
              	
84F2:         	_define_forth_34_2f:
84F2: CB2A    		sra d
84F4: CB1B    		rr e
84F6: CB2A    		sra d
84F8: CB1B    		rr e
84FA: C9      		ret
              	
84FB:         	_define_macro_34_2f:
84FB: 0608    		ld b,_end_6-_start_6
84FD: CDFB83  		call expandMacro
8500:         	_start_6:
8500: CB2A    		sra d
8502: CB1B    		rr e
8504: CB2A    		sra d
8506: CB1B    		rr e
8508:         	_end_6:
              	
8508:         	_define_forth_61_62_73:
8508: CB7A    		bit 7,d
850A: 2807    		jr z,__abs_isPositive
850C: 7B      		ld a,e
850D: 2F      		cpl
850E: 5F      		ld e,a
850F: 7A      		ld a,d
8510: 2F      		cpl
8511: 57      		ld d,a
8512: 13      		inc de
8513:         	__abs_isPositive:
8513: C9      		ret
              	
8514:         	_define_forth_62_73_77_61_70:
8514: 7C      		ld a,h
8515: 65      		ld h,l
8516: 6F      		ld l,a
8517: C9      		ret
              	
8518:         	_define_macro_62_73_77_61_70:
8518: 0603    		ld b,_end_7-_start_7
851A: CDFB83  		call expandMacro
851D:         	_start_7:
851D: 7C      		ld a,h
851E: 65      		ld h,l
851F: 6F      		ld l,a
8520:         	_end_7:
              	
8520:         	_define_forth_30_3d:
8520: 7A      		ld a,d
8521: B3      		or e
8522: 110000  		ld de,$0000
8525: 2001    		jr nz,__zEquals_notZero
8527: 1B      		dec de
8528:         	__zEquals_notZero:
8528: C9      		ret
              	
8529:         	_define_forth_6e_65_67_61_74_65:
8529: 7B      		ld a,e
852A: 2F      		cpl
852B: 5F      		ld e,a
852C: 7A      		ld a,d
852D: 2F      		cpl
852E: 57      		ld d,a
852F: 13      		inc de
8530: C9      		ret
              	
8531:         	_define_forth_21:
8531: DDE1    		pop ix
8533: E1      		pop hl
8534: EB      		ex de,hl
8535: 73      		ld (hl),e
8536: 23      		inc hl
8537: 72      		ld (hl),d
8538: D1      		pop de
8539: DDE9    		jp (ix)
              	
853B:         	_define_macro_21:
853B: 0606    		ld b,_end_8-_start_8
853D: CDFB83  		call expandMacro
8540:         	_start_8:
8540: E1      		pop hl
8541: EB      		ex de,hl
8542: 73      		ld (hl),e
8543: 23      		inc hl
8544: 72      		ld (hl),d
8545: D1      		pop de
8546:         	_end_8:
              	
8546:         	_define_forth_2b_21:
8546: DDE1    		pop ix
8548: E1      		pop hl
8549: 1A      		ld a,(de)
854A: 85      		add a,l
854B: 12      		ld (de),a
854C: 13      		inc de
854D: 1A      		ld a,(de)
854E: 8C      		adc a,h
854F: 12      		ld (de),a
8550: D1      		pop de
8551: DDE9    		jp (ix)
              	
8553:         	_define_forth_40:
8553: EB      		ex de,hl
8554: 5E      		ld e,(hl)
8555: 23      		inc hl
8556: 56      		ld d,(hl)
8557: C9      		ret
              	
8558:         	_define_macro_40:
8558: 0604    		ld b,_end_9-_start_9
855A: CDFB83  		call expandMacro
855D:         	_start_9:
855D: EB      		ex de,hl
855E: 5E      		ld e,(hl)
855F: 23      		inc hl
8560: 56      		ld d,(hl)
8561:         	_end_9:
              	
8561:         	_define_forth_62_40:
8561: 1A      		ld a,(de)
8562: 5F      		ld e,a
8563: 1600    		ld d,0
8565: C9      		ret
              	
8566:         	_define_macro_62_40:
8566: 0604    		ld b,_end_10-_start_10
8568: CDFB83  		call expandMacro
856B:         	_start_10:
856B: 1A      		ld a,(de)
856C: 5F      		ld e,a
856D: 1600    		ld d,0
856F:         	_end_10:
              	
856F:         	_define_forth_63_40:
856F: 1A      		ld a,(de)
8570: 5F      		ld e,a
8571: 1600    		ld d,0
8573: C9      		ret
              	
8574:         	_define_macro_63_40:
8574: 0604    		ld b,_end_11-_start_11
8576: CDFB83  		call expandMacro
8579:         	_start_11:
8579: 1A      		ld a,(de)
857A: 5F      		ld e,a
857B: 1600    		ld d,0
857D:         	_end_11:
              	
857D:         	_define_forth_62_21:
857D: DDE1    		pop ix
857F: E1      		pop hl
8580: 7D      		ld a,l
8581: 12      		ld (de),a
8582: D1      		pop de
8583: DDE9    		jp (ix)
              	
8585:         	_define_macro_62_21:
8585: 0604    		ld b,_end_12-_start_12
8587: CDFB83  		call expandMacro
858A:         	_start_12:
858A: E1      		pop hl
858B: 7D      		ld a,l
858C: 12      		ld (de),a
858D: D1      		pop de
858E:         	_end_12:
              	
858E:         	_define_forth_63_21:
858E: DDE1    		pop ix
8590: E1      		pop hl
8591: 7D      		ld a,l
8592: 12      		ld (de),a
8593: D1      		pop de
8594: DDE9    		jp (ix)
              	
8596:         	_define_macro_63_21:
8596: 0604    		ld b,_end_13-_start_13
8598: CDFB83  		call expandMacro
859B:         	_start_13:
859B: E1      		pop hl
859C: 7D      		ld a,l
859D: 12      		ld (de),a
859E: D1      		pop de
859F:         	_end_13:
              	
859F:         	_define_forth_6f_72_21:
859F: DDE1    		pop ix
85A1: E1      		pop hl
85A2: 1A      		ld a,(de)
85A3: B5      		or l
85A4: 12      		ld (de),a
85A5: 13      		inc de
85A6: 1A      		ld a,(de)
85A7: B4      		or h
85A8: 12      		ld (de),a
85A9: D1      		pop de
85AA: DDE9    		jp (ix)
              	
85AC:         	_define_forth_70_40:
85AC: 4B      		ld c,e
85AD: 42      		ld b,d
85AE: ED58    		in e,(c)
85B0: 1600    		ld d,0
85B2: C9      		ret
              	
85B3:         	_define_macro_70_40:
85B3: 0606    		ld b,_end_14-_start_14
85B5: CDFB83  		call expandMacro
85B8:         	_start_14:
85B8: 4B      		ld c,e
85B9: 42      		ld b,d
85BA: ED58    		in e,(c)
85BC: 1600    		ld d,0
85BE:         	_end_14:
              	
85BE:         	_define_forth_70_21:
85BE: E1      		pop hl
85BF: E1      		pop hl
85C0: 4B      		ld c,e
85C1: 42      		ld b,d
85C2: ED69    		out (c),l
85C4: D1      		pop de
85C5: E9      		jp (hl)
              	
85C6:         	_define_macro_70_21:
85C6: 0606    		ld b,_end_15-_start_15
85C8: CDFB83  		call expandMacro
85CB:         	_start_15:
85CB: E1      		pop hl
85CC: 4B      		ld c,e
85CD: 42      		ld b,d
85CE: ED69    		out (c),l
85D0: D1      		pop de
85D1:         	_end_15:
              	
85D1:         	_define_forth_64_72_6f_70:
85D1: DDE1    		pop ix
85D3: D1      		pop de
85D4: DDE9    		jp (ix)
              	
85D6:         	_define_macro_64_72_6f_70:
85D6: 0601    		ld b,_end_16-_start_16
85D8: CDFB83  		call expandMacro
85DB:         	_start_16:
85DB: D1      		pop de
85DC:         	_end_16:
              	
85DC:         	_define_forth_64_75_70:
85DC: DDE1    		pop ix
85DE: D5      		push de
85DF: DDE9    		jp (ix)
              	
85E1:         	_define_macro_64_75_70:
85E1: 0601    		ld b,_end_17-_start_17
85E3: CDFB83  		call expandMacro
85E6:         	_start_17:
85E6: D5      		push de
85E7:         	_end_17:
              	
85E7:         	_define_forth_6e_69_70:
85E7: DDE1    		pop ix
85E9: C1      		pop bc
85EA: DDE9    		jp (ix)
              	
85EC:         	_define_macro_6e_69_70:
85EC: 0601    		ld b,_end_18-_start_18
85EE: CDFB83  		call expandMacro
85F1:         	_start_18:
85F1: C1      		pop bc
85F2:         	_end_18:
              	
85F2:         	_define_forth_6f_76_65_72:
85F2: DDE1    		pop ix
85F4: E1      		pop hl
85F5: E5      		push hl
85F6: D5      		push de
85F7: EB      		ex de,hl
85F8: DDE9    		jp (ix)
              	
85FA:         	_define_macro_6f_76_65_72:
85FA: 0604    		ld b,_end_19-_start_19
85FC: CDFB83  		call expandMacro
85FF:         	_start_19:
85FF: E1      		pop hl
8600: E5      		push hl
8601: D5      		push de
8602: EB      		ex de,hl
8603:         	_end_19:
              	
8603:         	_define_forth_73_77_61_70:
8603: DDE1    		pop ix
8605: E1      		pop hl
8606: EB      		ex de,hl
8607: E5      		push hl
8608: DDE9    		jp (ix)
              	
860A:         	_define_macro_73_77_61_70:
860A: 0603    		ld b,_end_20-_start_20
860C: CDFB83  		call expandMacro
860F:         	_start_20:
860F: E1      		pop hl
8610: EB      		ex de,hl
8611: E5      		push hl
8612:         	_end_20:
              			
8612:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8612: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8616: 00000000	
861A: 0C1E1E0C	
861E: 0C000C00	
8622: 36360000	
8626: 00000000	
862A: 36367F36	
862E: 7F363600	
8632: 183E603C	
8636: 067C1800	
863A: 0063660C	
863E: 18336300	
8642: 1C361C3B	
8646: 6E663B00	
864A: 30306000	
864E: 00000000	
8652: 0C183030	
8656: 30180C00	
865A: 30180C0C	
865E: 0C183000	
8662: 00331E7F	
8666: 1E330000	
866A: 0018187E	
866E: 18180000	
8672: 00000000	
8676: 00181830	
867A: 0000007E	
867E: 00000000	
8682: 00000000	
8686: 00181800	
868A: 03060C18	
868E: 30604000	
8692: 3E63676F	
8696: 7B733E00	
869A: 18381818	
869E: 18187E00	
86A2: 3C66061C	
86A6: 30667E00	
86AA: 3C66061C	
86AE: 06663C00	
86B2: 0E1E3666	
86B6: 7F060F00	
86BA: 7E607C06	
86BE: 06663C00	
86C2: 1C30607C	
86C6: 66663C00	
86CA: 7E66060C	
86CE: 18181800	
86D2: 3C66663C	
86D6: 66663C00	
86DA: 3C66663E	
86DE: 060C3800	
86E2: 00181800	
86E6: 00181800	
86EA: 00181800	
86EE: 00181830	
86F2: 0C183060	
86F6: 30180C00	
86FA: 00007E00	
86FE: 007E0000	
8702: 30180C06	
8706: 0C183000	
870A: 3C66060C	
870E: 18001800	
8712: 3E636F6F	
8716: 6F603C00	
871A: 183C6666	
871E: 7E666600	
8722: 7E33333E	
8726: 33337E00	
872A: 1E336060	
872E: 60331E00	
8732: 7C363333	
8736: 33367C00	
873A: 7F31343C	
873E: 34317F00	
8742: 7F31343C	
8746: 34307800	
874A: 1E336060	
874E: 67331F00	
8752: 6666667E	
8756: 66666600	
875A: 3C181818	
875E: 18183C00	
8762: 0F060606	
8766: 66663C00	
876A: 7333363C	
876E: 36337300	
8772: 78303030	
8776: 31337F00	
877A: 63777F7F	
877E: 6B636300	
8782: 63737B6F	
8786: 67636300	
878A: 1C366363	
878E: 63361C00	
8792: 7E33333E	
8796: 30307800	
879A: 3C666666	
879E: 6E3C0E00	
87A2: 7E33333E	
87A6: 36337300	
87AA: 3C667038	
87AE: 0E663C00	
87B2: 7E5A1818	
87B6: 18183C00	
87BA: 66666666	
87BE: 66667E00	
87C2: 66666666	
87C6: 663C1800	
87CA: 6363636B	
87CE: 7F776300	
87D2: 6363361C	
87D6: 1C366300	
87DA: 6666663C	
87DE: 18183C00	
87E2: 7F63460C	
87E6: 19337F00	
87EA: 3C303030	
87EE: 30303C00	
87F2: 6030180C	
87F6: 06030100	
87FA: 3C0C0C0C	
87FE: 0C0C3C00	
8802: 081C3663	
8806: 00000000	
880A: 00000000	
880E: 0000007F	
8812: 18180C00	
8816: 00000000	
881A: 00003C06	
881E: 3E663B00	
8822: 7030303E	
8826: 33336E00	
882A: 00003C66	
882E: 60663C00	
8832: 0E06063E	
8836: 66663B00	
883A: 00003C66	
883E: 7E603C00	
8842: 1C363078	
8846: 30307800	
884A: 00003B66	
884E: 663E067C	
8852: 7030363B	
8856: 33337300	
885A: 18003818	
885E: 18183C00	
8862: 06000606	
8866: 0666663C	
886A: 70303336	
886E: 3C367300	
8872: 38181818	
8876: 18183C00	
887A: 0000667F	
887E: 7F6B6300	
8882: 00007C66	
8886: 66666600	
888A: 00003C66	
888E: 66663C00	
8892: 00006E33	
8896: 333E3078	
889A: 00003B66	
889E: 663E060F	
88A2: 00006E3B	
88A6: 33307800	
88AA: 00003E60	
88AE: 3C067C00	
88B2: 08183E18	
88B6: 181A0C00	
88BA: 00006666	
88BE: 66663B00	
88C2: 00006666	
88C6: 663C1800	
88CA: 0000636B	
88CE: 7F7F3600	
88D2: 00006336	
88D6: 1C366300	
88DA: 00006666	
88DE: 663E067C	
88E2: 00007E4C	
88E6: 18327E00	
88EA: 0E181870	
88EE: 18180E00	
88F2: 0C0C0C00	
88F6: 0C0C0C00	
88FA: 7018180E	
88FE: 18187000	
8902: 3B6E0000	
8906: 00000000	
890A: 00...   	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8912:         	SystemInformation:
              	
8912:         	Here:												; +0 	Here 
8912: 4889    			dw 		FreeMemory
8914:         	HerePage: 											; +2	Here.Page
8914: 2A00    			db 		FirstCodePage,0
8916:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8916: 2C000000			db 		FirstCodePage+2,0,0,0
891A:         	DisplayInfo: 										; +8 	Display information
891A: 22890000			dw 		DisplayInformation,0		
891E:         	BootAddress:										; +12 	Boot Address
891E: 2280    			dw 		StopDefault
8920:         	BootPage:											; +14 	Boot Page
8920: 2A00    			db 		FirstCodePage,0
              			
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8922:         	DisplayInformation:
              	
8922:         	SIScreenWidth: 										; +0 	screen width
8922: 00000000			db 		0,0,0,0	
8926:         	SIScreenHeight:										; +4 	screen height
8926: 00000000			db 		0,0,0,0
892A:         	SIScreenSize:										; +8 	char size of screen
892A: 00000000			dw 		0,0		
892E:         	SIScreenMode:										; +12 	current mode
892E: 00000000			db 		0,0,0,0
8932:         	SIFontBase:											; font in use
8932: 1286    			dw 		AlternateFont
8934:         	SIScreenDriver:										; Screen Driver
8934: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8936:         	__PAGEStackPointer: 								; stack used for switching pages
8936: 0000    			dw 		0
8938:         	__PAGEStackBase:
8938: FFFFFFFF			ds 		16
893C: FF...   	
              	
8948:         	FreeMemory:		
              	
8948: FFFFFFFF			org 	$C000
894C: FF...   	
              			include	"temp/__dictionary.asm"
C000: 15      		db	21
C001: 20      		db	$20
C002: F983    		dw	_define_forth_73_79_73_2e_65_78_70_61_6e_64_2e_6d_61_63_72_6f
C004: 10      		db	16
C005: 7379732E		db	"sys.expand.macro"
C009: 65787061	
C00D: 6E642E6D	
C011: 6163726F	
              	
C015: 07      		db	7
C016: 20      		db	$20
C017: 0784    		dw	_define_forth_31_2c
C019: 02      		db	2
C01A: 312C    		db	"1,"
              	
C01C: 07      		db	7
C01D: 20      		db	$20
C01E: 1084    		dw	_define_forth_32_2c
C020: 02      		db	2
C021: 322C    		db	"2,"
              	
C023: 06      		db	6
C024: 20      		db	$20
C025: 1984    		dw	_define_forth_2b
C027: 01      		db	1
C028: 2B      		db	"+"
              	
C029: 06      		db	6
C02A: 20      		db	$20
C02B: 2084    		dw	_define_macro_2b
C02D: 81      		db	129
C02E: 2B      		db	"+"
              	
C02F: 06      		db	6
C030: 20      		db	$20
C031: 2884    		dw	_define_forth_2a
C033: 01      		db	1
C034: 2A      		db	"*"
              	
C035: 06      		db	6
C036: 20      		db	$20
C037: 3184    		dw	_define_forth_2f
C039: 01      		db	1
C03A: 2F      		db	"/"
              	
C03B: 08      		db	8
C03C: 20      		db	$20
C03D: 3984    		dw	_define_forth_6d_6f_64
C03F: 03      		db	3
C040: 6D6F64  		db	"mod"
              	
C043: 09      		db	9
C044: 20      		db	$20
C045: 4284    		dw	_define_forth_2f_6d_6f_64
C047: 04      		db	4
C048: 2F6D6F64		db	"/mod"
              	
C04C: 06      		db	6
C04D: 20      		db	$20
C04E: 4B84    		dw	_define_forth_3c
C050: 01      		db	1
C051: 3C      		db	"<"
              	
C052: 06      		db	6
C053: 20      		db	$20
C054: 6284    		dw	_define_forth_3d
C056: 01      		db	1
C057: 3D      		db	"="
              	
C058: 08      		db	8
C059: 20      		db	$20
C05A: 7384    		dw	_define_forth_61_6e_64
C05C: 03      		db	3
C05D: 616E64  		db	"and"
              	
C060: 07      		db	7
C061: 20      		db	$20
C062: 7E84    		dw	_define_forth_6f_72
C064: 02      		db	2
C065: 6F72    		db	"or"
              	
C067: 08      		db	8
C068: 20      		db	$20
C069: 8984    		dw	_define_forth_78_6f_72
C06B: 03      		db	3
C06C: 786F72  		db	"xor"
              	
C06F: 08      		db	8
C070: 20      		db	$20
C071: 9484    		dw	_define_forth_2b_6f_72
C073: 03      		db	3
C074: 2B6F72  		db	"+or"
              	
C077: 08      		db	8
C078: 20      		db	$20
C079: 9F84    		dw	_define_forth_6c_6f_72
C07B: 03      		db	3
C07C: 6C6F72  		db	"lor"
              	
C07F: 06      		db	6
C080: 20      		db	$20
C081: AA84    		dw	_define_forth_2d
C083: 01      		db	1
C084: 2D      		db	"-"
              	
C085: 08      		db	8
C086: 20      		db	$20
C087: B184    		dw	_define_forth_6e_6f_74
C089: 03      		db	3
C08A: 6E6F74  		db	"not"
              	
C08D: 07      		db	7
C08E: 20      		db	$20
C08F: B884    		dw	_define_forth_32_2a
C091: 02      		db	2
C092: 322A    		db	"2*"
              	
C094: 07      		db	7
C095: 20      		db	$20
C096: BA84    		dw	_define_macro_32_2a
C098: 82      		db	130
C099: 322A    		db	"2*"
              	
C09B: 07      		db	7
C09C: 20      		db	$20
C09D: C084    		dw	_define_forth_34_2a
C09F: 02      		db	2
C0A0: 342A    		db	"4*"
              	
C0A2: 07      		db	7
C0A3: 20      		db	$20
C0A4: C384    		dw	_define_macro_34_2a
C0A6: 82      		db	130
C0A7: 342A    		db	"4*"
              	
C0A9: 07      		db	7
C0AA: 20      		db	$20
C0AB: CA84    		dw	_define_forth_38_2a
C0AD: 02      		db	2
C0AE: 382A    		db	"8*"
              	
C0B0: 07      		db	7
C0B1: 20      		db	$20
C0B2: CE84    		dw	_define_macro_38_2a
C0B4: 82      		db	130
C0B5: 382A    		db	"8*"
              	
C0B7: 08      		db	8
C0B8: 20      		db	$20
C0B9: D684    		dw	_define_forth_31_36_2a
C0BB: 03      		db	3
C0BC: 31362A  		db	"16*"
              	
C0BF: 08      		db	8
C0C0: 20      		db	$20
C0C1: DB84    		dw	_define_macro_31_36_2a
C0C3: 83      		db	131
C0C4: 31362A  		db	"16*"
              	
C0C7: 07      		db	7
C0C8: 20      		db	$20
C0C9: E484    		dw	_define_forth_32_2f
C0CB: 02      		db	2
C0CC: 322F    		db	"2/"
              	
C0CE: 07      		db	7
C0CF: 20      		db	$20
C0D0: E984    		dw	_define_macro_32_2f
C0D2: 82      		db	130
C0D3: 322F    		db	"2/"
              	
C0D5: 07      		db	7
C0D6: 20      		db	$20
C0D7: F284    		dw	_define_forth_34_2f
C0D9: 02      		db	2
C0DA: 342F    		db	"4/"
              	
C0DC: 07      		db	7
C0DD: 20      		db	$20
C0DE: FB84    		dw	_define_macro_34_2f
C0E0: 82      		db	130
C0E1: 342F    		db	"4/"
              	
C0E3: 08      		db	8
C0E4: 20      		db	$20
C0E5: 0885    		dw	_define_forth_61_62_73
C0E7: 03      		db	3
C0E8: 616273  		db	"abs"
              	
C0EB: 0A      		db	10
C0EC: 20      		db	$20
C0ED: 1485    		dw	_define_forth_62_73_77_61_70
C0EF: 05      		db	5
C0F0: 62737761		db	"bswap"
C0F4: 70      	
              	
C0F5: 0A      		db	10
C0F6: 20      		db	$20
C0F7: 1885    		dw	_define_macro_62_73_77_61_70
C0F9: 85      		db	133
C0FA: 62737761		db	"bswap"
C0FE: 70      	
              	
C0FF: 07      		db	7
C100: 20      		db	$20
C101: 2085    		dw	_define_forth_30_3d
C103: 02      		db	2
C104: 303D    		db	"0="
              	
C106: 0B      		db	11
C107: 20      		db	$20
C108: 2985    		dw	_define_forth_6e_65_67_61_74_65
C10A: 06      		db	6
C10B: 6E656761		db	"negate"
C10F: 7465    	
              	
C111: 06      		db	6
C112: 20      		db	$20
C113: 3185    		dw	_define_forth_21
C115: 01      		db	1
C116: 21      		db	"!"
              	
C117: 06      		db	6
C118: 20      		db	$20
C119: 3B85    		dw	_define_macro_21
C11B: 81      		db	129
C11C: 21      		db	"!"
              	
C11D: 07      		db	7
C11E: 20      		db	$20
C11F: 4685    		dw	_define_forth_2b_21
C121: 02      		db	2
C122: 2B21    		db	"+!"
              	
C124: 06      		db	6
C125: 20      		db	$20
C126: 5385    		dw	_define_forth_40
C128: 01      		db	1
C129: 40      		db	"@"
              	
C12A: 06      		db	6
C12B: 20      		db	$20
C12C: 5885    		dw	_define_macro_40
C12E: 81      		db	129
C12F: 40      		db	"@"
              	
C130: 07      		db	7
C131: 20      		db	$20
C132: 6185    		dw	_define_forth_62_40
C134: 02      		db	2
C135: 6240    		db	"b@"
              	
C137: 07      		db	7
C138: 20      		db	$20
C139: 6685    		dw	_define_macro_62_40
C13B: 82      		db	130
C13C: 6240    		db	"b@"
              	
C13E: 07      		db	7
C13F: 20      		db	$20
C140: 6F85    		dw	_define_forth_63_40
C142: 02      		db	2
C143: 6340    		db	"c@"
              	
C145: 07      		db	7
C146: 20      		db	$20
C147: 7485    		dw	_define_macro_63_40
C149: 82      		db	130
C14A: 6340    		db	"c@"
              	
C14C: 07      		db	7
C14D: 20      		db	$20
C14E: 7D85    		dw	_define_forth_62_21
C150: 02      		db	2
C151: 6221    		db	"b!"
              	
C153: 07      		db	7
C154: 20      		db	$20
C155: 8585    		dw	_define_macro_62_21
C157: 82      		db	130
C158: 6221    		db	"b!"
              	
C15A: 07      		db	7
C15B: 20      		db	$20
C15C: 8E85    		dw	_define_forth_63_21
C15E: 02      		db	2
C15F: 6321    		db	"c!"
              	
C161: 07      		db	7
C162: 20      		db	$20
C163: 9685    		dw	_define_macro_63_21
C165: 82      		db	130
C166: 6321    		db	"c!"
              	
C168: 08      		db	8
C169: 20      		db	$20
C16A: 9F85    		dw	_define_forth_6f_72_21
C16C: 03      		db	3
C16D: 6F7221  		db	"or!"
              	
C170: 07      		db	7
C171: 20      		db	$20
C172: AC85    		dw	_define_forth_70_40
C174: 02      		db	2
C175: 7040    		db	"p@"
              	
C177: 07      		db	7
C178: 20      		db	$20
C179: B385    		dw	_define_macro_70_40
C17B: 82      		db	130
C17C: 7040    		db	"p@"
              	
C17E: 07      		db	7
C17F: 20      		db	$20
C180: BE85    		dw	_define_forth_70_21
C182: 02      		db	2
C183: 7021    		db	"p!"
              	
C185: 07      		db	7
C186: 20      		db	$20
C187: C685    		dw	_define_macro_70_21
C189: 82      		db	130
C18A: 7021    		db	"p!"
              	
C18C: 09      		db	9
C18D: 20      		db	$20
C18E: D185    		dw	_define_forth_64_72_6f_70
C190: 04      		db	4
C191: 64726F70		db	"drop"
              	
C195: 09      		db	9
C196: 20      		db	$20
C197: D685    		dw	_define_macro_64_72_6f_70
C199: 84      		db	132
C19A: 64726F70		db	"drop"
              	
C19E: 08      		db	8
C19F: 20      		db	$20
C1A0: DC85    		dw	_define_forth_64_75_70
C1A2: 03      		db	3
C1A3: 647570  		db	"dup"
              	
C1A6: 08      		db	8
C1A7: 20      		db	$20
C1A8: E185    		dw	_define_macro_64_75_70
C1AA: 83      		db	131
C1AB: 647570  		db	"dup"
              	
C1AE: 08      		db	8
C1AF: 20      		db	$20
C1B0: E785    		dw	_define_forth_6e_69_70
C1B2: 03      		db	3
C1B3: 6E6970  		db	"nip"
              	
C1B6: 08      		db	8
C1B7: 20      		db	$20
C1B8: EC85    		dw	_define_macro_6e_69_70
C1BA: 83      		db	131
C1BB: 6E6970  		db	"nip"
              	
C1BE: 09      		db	9
C1BF: 20      		db	$20
C1C0: F285    		dw	_define_forth_6f_76_65_72
C1C2: 04      		db	4
C1C3: 6F766572		db	"over"
              	
C1C7: 09      		db	9
C1C8: 20      		db	$20
C1C9: FA85    		dw	_define_macro_6f_76_65_72
C1CB: 84      		db	132
C1CC: 6F766572		db	"over"
              	
C1D0: 09      		db	9
C1D1: 20      		db	$20
C1D2: 0386    		dw	_define_forth_73_77_61_70
C1D4: 04      		db	4
C1D5: 73776170		db	"swap"
              	
C1D9: 09      		db	9
C1DA: 20      		db	$20
C1DB: 0A86    		dw	_define_macro_73_77_61_70
C1DD: 84      		db	132
C1DE: 73776170		db	"swap"
              	
C1E2: 00      		db	0
              	
              	
              			


; +++ segments +++

#CODE          = $8000 = 32768,  size = $41E3 = 16867

; +++ global symbols +++

AlternateFont             = $8612 = 34322          kernel.asm:61
Boot                      = $8006 = 32774          kernel.asm:32
BootAddress               = $891E = 35102          data.asm:28
BootPage                  = $8920 = 35104          data.asm:30
DIVDivideMod16            = $803F = 32831          divide.asm:18
DictionaryPage            = $0020 =    32          kernel.asm:16 (unused)
DisplayInfo               = $891A = 35098          data.asm:26 (unused)
DisplayInformation        = $8922 = 35106          data.asm:39
Div16_Loop1               = $8049 = 32841          divide.asm:27
Div16_Loop2               = $805A = 32858          divide.asm:41
Div16_NoAdd1              = $8051 = 32849          divide.asm:33
Div16_NoAdd2              = $8062 = 32866          divide.asm:47
EditBuffer                = $7B08 = 31496          kernel.asm:24 (unused)
EditPageSize              = $0200 =   512          kernel.asm:19 (unused)
FARCompileByte            = $806A = 32874          farmemory.asm:18
FARCompileWord            = $8082 = 32898          farmemory.asm:40
FirstCodePage             = $002A =    42          kernel.asm:20
FirstSourcePage           = $0022 =    34          kernel.asm:17 (unused)
FreeMemory                = $8948 = 35144          data.asm:65
GFXInitialise48k          = $8225 = 33317          screen48k.asm:19
GFXInitialiseLayer2       = $829D = 33437          screen_layer2.asm:19
GFXInitialiseLowRes       = $8354 = 33620          screen_lores.asm:18
GFXMode                   = $80DE = 32990          graphics.asm:18
GFXPrintCharacter48k      = $8251 = 33361          screen48k.asm:53
GFXPrintCharacterLayer2   = $82CD = 33485          screen_layer2.asm:55
GFXPrintCharacterLowRes   = $837E = 33662          screen_lores.asm:50
GFXWriteCharacter         = $8113 = 33043          graphics.asm:64
GFXWriteHexWord           = $8126 = 33062          graphics.asm:87 (unused)
GFXWriteHexWordA          = $8128 = 33064          graphics.asm:89 (unused)
Here                      = $8912 = 35090          data.asm:20
HerePage                  = $8914 = 35092          data.asm:22
IOScanKeyboard            = $8158 = 33112          keyboard.asm:19 (unused)
L2PClear                  = $82A6 = 33446          screen_layer2.asm:26
L2PClearBank              = $82B5 = 33461          screen_layer2.asm:34
LowClearScreen            = $8367 = 33639          screen_lores.asm:30
MULTMultiply16            = $8025 = 32805          multiply.asm:18
NextFreePage              = $8916 = 35094          data.asm:24 (unused)
PAGEInitialise            = $809D = 32925          paging.asm:18
PAGERestore               = $80C8 = 32968          paging.asm:64
PAGESwitch                = $80AF = 32943          paging.asm:36
SIFontBase                = $8932 = 35122          data.asm:49
SIScreenDriver            = $8934 = 35124          data.asm:51
SIScreenHeight            = $8926 = 35110          data.asm:43
SIScreenMode              = $892E = 35118          data.asm:47
SIScreenSize              = $892A = 35114          data.asm:45
SIScreenWidth             = $8922 = 35106          data.asm:41
SourcePageCount           = $0004 =     4          kernel.asm:18
StackTop                  = $7EFC = 32508          kernel.asm:25
StopDefault               = $8022 = 32802          kernel.asm:47
SystemInformation         = $8912 = 35090          data.asm:18
__Core__Mult_Loop         = $802C = 32812          multiply.asm:24
__Core__Mult_Shift        = $8031 = 32817          multiply.asm:28
__GFXConfigure            = $80F8 = 33016          graphics.asm:39
__GFXLayer2               = $80F0 = 33008          graphics.asm:32
__GFXLowRes               = $80F5 = 33013          graphics.asm:36
__GFXWCExit               = $8121 = 33057          graphics.asm:74
__GFXWHByte               = $813A = 33082          graphics.asm:105
__GFXWHDigit              = $8150 = 33104          graphics.asm:119
__GFXWHNibble             = $8147 = 33095          graphics.asm:113
__L2Exit                  = $834D = 33613          screen_layer2.asm:156
__L2Loop                  = $833E = 33598          screen_layer2.asm:143
__L2Not1                  = $82E9 = 33513          screen_layer2.asm:77
__L2Not2                  = $82EF = 33519          screen_layer2.asm:81
__L2Not3                  = $82F5 = 33525          screen_layer2.asm:85
__L2NotCursor             = $8300 = 33536          screen_layer2.asm:94
__L2NotSet                = $8344 = 33604          screen_layer2.asm:148
__L2Outer                 = $8335 = 33589          screen_layer2.asm:137
__LPExit                  = $83F2 = 33778          screen_lores.asm:143
__LowLoop                 = $83DE = 33758          screen_lores.asm:127
__LowNotLower2            = $83D3 = 33747          screen_lores.asm:119
__LowNotReverse           = $83A0 = 33696          screen_lores.asm:79
__LowNotSet               = $83E4 = 33764          screen_lores.asm:132
__LowOuter                = $83D5 = 33749          screen_lores.asm:121
__PAGEStackBase           = $8938 = 35128          data.asm:62
__PAGEStackPointer        = $8936 = 35126          data.asm:60
__ZXWCCopy                = $8291 = 33425          screen48k.asm:115
__ZXWCExit                = $8298 = 33432          screen48k.asm:122
___kr4                    = $8189 = 33161          keyboard.asm:50
__abs_isPositive          = $8513 = 34067          __words.asm:276
__cs1                     = $8235 = 33333          screen48k.asm:29
__cs2                     = $823D = 33341          screen48k.asm:34
__equal_different         = $8471 = 33905          __words.asm:104
__expandLoop              = $83FC = 33788          __words.asm:6
__kr1                     = $816D = 33133          keyboard.asm:33
__kr2                     = $8178 = 33144          keyboard.asm:39
__kr3                     = $817A = 33146          keyboard.asm:42
__kr_exit                 = $81A9 = 33193          keyboard.asm:80
__kr_keypressed           = $81A3 = 33187          keyboard.asm:74
__kr_no_shift_table       = $81AD = 33197          keyboard.asm:95
__kr_shift_table          = $81D5 = 33237          keyboard.asm:101
__kr_symbol_shift_table   = $81FD = 33277          keyboard.asm:107
__less_returnc            = $845A = 33882          __words.asm:85
__less_samesign           = $8457 = 33879          __words.asm:82
__zEquals_notZero         = $8528 = 34088          __words.asm:300
_define_forth_21          = $8531 = 34097          __words.asm:313
_define_forth_2a          = $8428 = 33832          __words.asm:45
_define_forth_2b          = $8419 = 33817          __words.asm:29
_define_forth_2b_21       = $8546 = 34118          __words.asm:335
_define_forth_2b_6f_72    = $8494 = 33940          __words.asm:140
_define_forth_2d          = $84AA = 33962          __words.asm:162
_define_forth_2f          = $8431 = 33841          __words.asm:52
_define_forth_2f_6d_6f_64 = $8442 = 33858          __words.asm:65
_define_forth_30_3d       = $8520 = 34080          __words.asm:294
_define_forth_31_2c       = $8407 = 33799          __words.asm:15
_define_forth_31_36_2a    = $84D6 = 34006          __words.asm:219
_define_forth_32_2a       = $84B8 = 33976          __words.asm:180
_define_forth_32_2c       = $8410 = 33808          __words.asm:22
_define_forth_32_2f       = $84E4 = 34020          __words.asm:236
_define_forth_34_2a       = $84C0 = 33984          __words.asm:191
_define_forth_34_2f       = $84F2 = 34034          __words.asm:249
_define_forth_38_2a       = $84CA = 33994          __words.asm:204
_define_forth_3c          = $844B = 33867          __words.asm:72
_define_forth_3d          = $8462 = 33890          __words.asm:92
_define_forth_40          = $8553 = 34131          __words.asm:348
_define_forth_61_62_73    = $8508 = 34056          __words.asm:266
_define_forth_61_6e_64    = $8473 = 33907          __words.asm:107
_define_forth_62_21       = $857D = 34173          __words.asm:395
_define_forth_62_40       = $8561 = 34145          __words.asm:365
_define_forth_62_73_77_61_70 = $8514 = 34068          __words.asm:279
_define_forth_63_21       = $858E = 34190          __words.asm:413
_define_forth_63_40       = $856F = 34159          __words.asm:380
_define_forth_64_72_6f_70 = $85D1 = 34257          __words.asm:481
_define_forth_64_75_70    = $85DC = 34268          __words.asm:493
_define_forth_6c_6f_72    = $849F = 33951          __words.asm:151
_define_forth_6d_6f_64    = $8439 = 33849          __words.asm:58
_define_forth_6e_65_67_61_74_65 = $8529 = 34089          __words.asm:303
_define_forth_6e_69_70    = $85E7 = 34279          __words.asm:505
_define_forth_6e_6f_74    = $84B1 = 33969          __words.asm:171
_define_forth_6f_72       = $847E = 33918          __words.asm:118
_define_forth_6f_72_21    = $859F = 34207          __words.asm:431
_define_forth_6f_76_65_72 = $85F2 = 34290          __words.asm:517
_define_forth_70_21       = $85BE = 34238          __words.asm:461
_define_forth_70_40       = $85AC = 34220          __words.asm:444
_define_forth_73_77_61_70 = $8603 = 34307          __words.asm:535
_define_forth_73_79_73_2e_65_78_70_61_6e_64_2e_6d_61_63_72_6f = $83F9 = 33785          __words.asm:2
_define_forth_78_6f_72    = $8489 = 33929          __words.asm:129
_define_macro_21          = $853B = 34107          __words.asm:323
_define_macro_2b          = $8420 = 33824          __words.asm:36
_define_macro_31_36_2a    = $84DB = 34011          __words.asm:226
_define_macro_32_2a       = $84BA = 33978          __words.asm:184
_define_macro_32_2f       = $84E9 = 34025          __words.asm:241
_define_macro_34_2a       = $84C3 = 33987          __words.asm:196
_define_macro_34_2f       = $84FB = 34043          __words.asm:256
_define_macro_38_2a       = $84CE = 33998          __words.asm:210
_define_macro_40          = $8558 = 34136          __words.asm:355
_define_macro_62_21       = $8585 = 34181          __words.asm:403
_define_macro_62_40       = $8566 = 34150          __words.asm:371
_define_macro_62_73_77_61_70 = $8518 = 34072          __words.asm:285
_define_macro_63_21       = $8596 = 34198          __words.asm:421
_define_macro_63_40       = $8574 = 34164          __words.asm:386
_define_macro_64_72_6f_70 = $85D6 = 34262          __words.asm:486
_define_macro_64_75_70    = $85E1 = 34273          __words.asm:498
_define_macro_6e_69_70    = $85EC = 34284          __words.asm:510
_define_macro_6f_76_65_72 = $85FA = 34298          __words.asm:525
_define_macro_70_21       = $85C6 = 34246          __words.asm:470
_define_macro_70_40       = $85B3 = 34227          __words.asm:451
_define_macro_73_77_61_70 = $860A = 34314          __words.asm:542
_end                      = $C1E3 = 49635          kernel.asm:26 (unused)
_end_0                    = $8428 = 33832          __words.asm:43
_end_1                    = $84C0 = 33984          __words.asm:189
_end_10                   = $856F = 34159          __words.asm:378
_end_11                   = $857D = 34173          __words.asm:393
_end_12                   = $858E = 34190          __words.asm:411
_end_13                   = $859F = 34207          __words.asm:429
_end_14                   = $85BE = 34238          __words.asm:459
_end_15                   = $85D1 = 34257          __words.asm:479
_end_16                   = $85DC = 34268          __words.asm:491
_end_17                   = $85E7 = 34279          __words.asm:503
_end_18                   = $85F2 = 34290          __words.asm:515
_end_19                   = $8603 = 34307          __words.asm:533
_end_2                    = $84CA = 33994          __words.asm:202
_end_20                   = $8612 = 34322          __words.asm:549
_end_3                    = $84D6 = 34006          __words.asm:217
_end_4                    = $84E4 = 34020          __words.asm:234
_end_5                    = $84F2 = 34034          __words.asm:247
_end_6                    = $8508 = 34056          __words.asm:264
_end_7                    = $8520 = 34080          __words.asm:292
_end_8                    = $8546 = 34118          __words.asm:333
_end_9                    = $8561 = 34145          __words.asm:363
_size                     = $41E3 = 16867          kernel.asm:26 (unused)
_start_0                  = $8425 = 33829          __words.asm:39
_start_1                  = $84BF = 33983          __words.asm:187
_start_10                 = $856B = 34155          __words.asm:374
_start_11                 = $8579 = 34169          __words.asm:389
_start_12                 = $858A = 34186          __words.asm:406
_start_13                 = $859B = 34203          __words.asm:424
_start_14                 = $85B8 = 34232          __words.asm:454
_start_15                 = $85CB = 34251          __words.asm:473
_start_16                 = $85DB = 34267          __words.asm:489
_start_17                 = $85E6 = 34278          __words.asm:501
_start_18                 = $85F1 = 34289          __words.asm:513
_start_19                 = $85FF = 34303          __words.asm:528
_start_2                  = $84C8 = 33992          __words.asm:199
_start_20                 = $860F = 34319          __words.asm:545
_start_3                  = $84D3 = 34003          __words.asm:213
_start_4                  = $84E0 = 34016          __words.asm:229
_start_5                  = $84EE = 34030          __words.asm:244
_start_6                  = $8500 = 34048          __words.asm:259
_start_7                  = $851D = 34077          __words.asm:288
_start_8                  = $8540 = 34112          __words.asm:326
_start_9                  = $855D = 34141          __words.asm:358
expandMacro               = $83FB = 33787          __words.asm:4


total time: 0.0071 sec.
no errors

              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-24 09:50:38
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th November 2018
              	;		Purpose :	FlatColorForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	SourceFirstPage = $22 								; bootstrap page
0040:         	SourcePages = 64
0026:         	FirstCodePage = SourceFirstPage + SourcePages/16	; first page of actual code.
              									
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D20 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: A08A    			dw 		SystemInformationTable
              	
8006: ED7BB08A	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
800A: F3      			di											; disable interrupts
              		
800B: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800F: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8011: CDE680  			call 	GFXMode
              	
8014: 3AA68A  			ld 		a,(SIBootCodePage) 					; get the page to start
8017: CD2480  			call 	PAGEInitialise
801A: 2AA48A  			ld 		hl,(SIBootCodeAddress) 				; get boot address
801D: E9      			jp 		(hl) 								; and go there
              	
801E:         	ErrorHandler:
801E: 18FE    			jr 		ErrorHandler
              	
8020: F3      	HaltZ80:di
8021: 76      			halt
8022: 18FC    			jr 		HaltZ80
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8024:         	PAGEInitialise:
8024: ED9256  			db 		$ED,$92,$56							; switch to page A
8027: 3C      			inc 	a
8028: ED9257  			db 		$ED,$92,$57
802B: 3D      			dec 	a
802C: 08      			ex 		af,af' 								; put page in A'
802D: 21B68A  			ld 		hl,PAGEStackBase 					; reset the page stack
8030: 22B48A  			ld 		(PAGEStackPointer),hl
8033: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8034:         	PAGESwitch:
8034: F5      			push 	af
8035: E5      			push 	hl
              	
8036: F5      			push 	af 									; save A on stack
8037: 2AB48A  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
803A: 08      			ex 		af,af'
803B: 77      			ld 		(hl),a
803C: 23      			inc 	hl
803D: 22B48A  			ld 		(PAGEStackPointer),hl
              	
8040: F1      			pop 	af 									; restore new A
8041: ED9256  			db 		$ED,$92,$56							; switch to page A
8044: 3C      			inc 	a
8045: ED9257  			db 		$ED,$92,$57
8048: 3D      			dec 	a
8049: 08      			ex 		af,af' 								; put page in A'
              	
804A: E1      			pop 	hl
804B: F1      			pop 	af
804C: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
804D:         	PAGERestore:
804D: F5      			push 	af
804E: E5      			push 	hl
804F: 2AB48A  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
8052: 2B      			dec 	hl
8053: 7E      			ld 		a,(hl)
8054: 22B48A  			ld 		(PAGEStackPointer),hl
8057: ED9256  			db 		$ED,$92,$56							; switch to page A
805A: 3C      			inc 	a
805B: ED9257  			db 		$ED,$92,$57
805E: 3D      			dec 	a
805F: 08      			ex 		af,af' 								; update A'
8060: E1      			pop 	hl
8061: F1      			pop 	af
8062: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8063:         	FARCompileByteL:
8063: 7D      			ld 		a,l
              			
8064:         	FARCompileByte:
8064: F5      			push 	af 									; save byte and HL
8065: E5      			push 	hl
8066: F5      			push 	af 									; save byte
8067: 3AA28A  			ld		a,(SINextFreeCodePage) 				; switch to page
806A: CD3480  			call 	PAGESwitch
806D: 2AA08A  			ld 		hl,(SINextFreeCode) 				; write to memory location
8070: F1      			pop 	af
8071: 77      			ld 		(hl),a
8072: 23      			inc 	hl 									; bump memory location
8073: 22A08A  			ld 		(SINextFreeCode),hl 				; write back
8076: CD4D80  			call 	PAGERestore
8079: E1      			pop 	hl 									; restore and exit
807A: F1      			pop 	af
807B: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
807C:         	FARCompileWord:
807C: F5      			push 	af 									; save byte and HL
807D: D5      			push 	de
807E: E5      			push 	hl
807F: EB      			ex 		de,hl 								; word into DE
8080: 3AA28A  			ld		a,(SINextFreeCodePage) 				; switch to page
8083: CD3480  			call 	PAGESwitch
8086: 2AA08A  			ld 		hl,(SINextFreeCode) 				; write to memory location
8089: 73      			ld 		(hl),e
808A: 23      			inc 	hl 	
808B: 72      			ld 		(hl),d
808C: 23      			inc 	hl
808D: 22A08A  			ld 		(SINextFreeCode),hl 				; write back
8090: CD4D80  			call 	PAGERestore
8093: E1      			pop 	hl
8094: D1      			pop 	de 									; restore and exit
8095: F1      			pop 	af
8096: C9      			ret
              												
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8097:         	DIVDivideMod16:
              	
8097: C5      		push 	bc
8098: 42      		ld 		b,d 				; DE 
8099: 4B      		ld 		c,e
809A: EB      		ex 		de,hl
809B: 210000  		ld 		hl,0
809E: 78      		ld 		a,b
809F: 0608    		ld 		b,8
80A1:         	Div16_Loop1:
80A1: 17      		rla
80A2: ED6A    		adc 	hl,hl
80A4: ED52    		sbc 	hl,de
80A6: 3001    		jr 		nc,Div16_NoAdd1
80A8: 19      		add 	hl,de
80A9:         	Div16_NoAdd1:
80A9: 10F6    		djnz 	Div16_Loop1
80AB: 17      		rla
80AC: 2F      		cpl
80AD: 47      		ld 		b,a
80AE: 79      		ld 		a,c
80AF: 48      		ld 		c,b
80B0: 0608    		ld 		b,8
80B2:         	Div16_Loop2:
80B2: 17      		rla
80B3: ED6A    		adc 	hl,hl
80B5: ED52    		sbc 	hl,de
80B7: 3001    		jr 		nc,Div16_NoAdd2
80B9: 19      		add 	hl,de
80BA:         	Div16_NoAdd2:
80BA: 10F6    		djnz 	Div16_Loop2
80BC: 17      		rla
80BD: 2F      		cpl
80BE: 51      		ld 		d,c
80BF: 5F      		ld 		e,a
80C0: C1      		pop 	bc
80C1: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80C2:         	MULTMultiply16:
80C2: C5      			push 	bc
80C3: D5      			push 	de
80C4: 44      			ld 		b,h 							; get multipliers in DE/BC
80C5: 4D      			ld 		c,l
80C6: 210000  			ld 		hl,0 							; zero total
80C9:         	__Core__Mult_Loop:
80C9: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80CB: 2801    			jr 		z,__Core__Mult_Shift
80CD: 19      			add 	hl,de 							; add adder to total
80CE:         	__Core__Mult_Shift:
80CE: CB38    			srl 	b 								; shift BC right.
80D0: CB19    			rr 		c
80D2: EB      			ex 		de,hl 							; shift DE left
80D3: 29      			add 	hl,hl
80D4: EB      			ex 		de,hl
80D5: 78      			ld 		a,b 							; loop back if BC is nonzero
80D6: B1      			or 		c
80D7: 20F0    			jr 		nz,__Core__Mult_Loop
80D9: D1      			pop 	de
80DA: C1      			pop 	bc
80DB: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
80DC:         	GFXClearScreen:
80DC: E5      			push 	hl 									; clear screen by reinitialising
80DD: 3AFC8A  			ld 		a,(DIScreenMode)
80E0: 6F      			ld 		l,a
80E1: CDE680  			call 	GFXMode
80E4: E1      			pop 	hl
80E5: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80E6:         	GFXMode:
80E6: C5      			push 	bc
80E7: D5      			push 	de
80E8: E5      			push 	hl
80E9: 7D      			ld 		a,l 								; save current mode
80EA: 32FC8A  			ld 		(DIScreenMode),a
80ED: 2D      			dec 	l 									; L = 1 mode layer2
80EE: 2808    			jr 		z,__GFXLayer2
80F0: 2D      			dec 	l
80F1: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80F3: CD5082  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80F6: 1808    			jr 		__GFXConfigure
              	
80F8:         	__GFXLayer2:
80F8: CDB382  			call 	GFXInitialiseLayer2
80FB: 1803    			jr 		__GFXConfigure
              	
80FD:         	__GFXLowRes:
80FD: CD4A83  			call 	GFXInitialiseLowRes
              	
8100:         	__GFXConfigure:
8100: 7D      			ld 		a,l 								; save screen size
8101: 32E88A  			ld 		(DIScreenWidth),a
8104: 7C      			ld 		a,h
8105: 32EC8A  			ld 		(DIScreenHeight),a
8108: EB      			ex 		de,hl 								; save driver
8109: 22F48A  			ld 		(DIScreenDriver),hl
              	
810C: 6A      			ld 		l,d 								; put sizes in HL DE
810D: 2600    			ld 		h,0
810F: 1600    			ld 		d,0
8111: CDC280  			call 	MULTMultiply16 						; multiply to get size and store.
8114: 22F08A  			ld 		(DIScreenSize),hl
              	
8117: E1      			pop 	hl
8118: D1      			pop 	de
8119: C1      			pop 	bc
811A: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
811B:         	GFXWriteCharacter:
811B: F5      			push 	af
811C: C5      			push 	bc
811D: D5      			push 	de
811E: E5      			push 	hl
811F: 012981  			ld 		bc,__GFXWCExit
8122: C5      			push 	bc
8123: ED4BF48A			ld 		bc,(DIScreenDriver)
8127: C5      			push 	bc
8128: C9      			ret
8129:         	__GFXWCExit:
8129: E1      			pop 	hl
812A: D1      			pop 	de
812B: C1      			pop 	bc
812C: F1      			pop 	af
812D: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
812E:         	GFXWriteHexWord:
812E: 3E06    			ld 		a,6 
8130:         	GFXWriteHexWordA:
8130: C5      			push 	bc
8131: D5      			push 	de
8132: E5      			push 	hl
8133: 4F      			ld 		c,a
8134: 7A      			ld 		a,d
8135: D5      			push 	de
8136: CD4281  			call 	__GFXWHByte
8139: D1      			pop 	de
813A: 7B      			ld 		a,e
813B: CD4281  			call	__GFXWHByte
813E: E1      			pop 	hl
813F: D1      			pop 	de
8140: C1      			pop 	bc
8141: C9      			ret
              	
8142:         	__GFXWHByte:
8142: F5      			push 	af
8143: CB0F    			rrc 	a
8145: CB0F    			rrc		a
8147: CB0F    			rrc 	a
8149: CB0F    			rrc 	a
814B: CD4F81  			call 	__GFXWHNibble
814E: F1      			pop 	af
814F:         	__GFXWHNibble:
814F: 51      			ld 		d,c
8150: E60F    			and 	15
8152: FE0A    			cp 		10
8154: 3802    			jr 		c,__GFXWHDigit
8156: C607    			add		a,7
8158:         	__GFXWHDigit:
8158: C630    			add 	a,48
815A: 5F      			ld 		e,a
815B: CD1B81  			call 	GFXWriteCharacter
815E: 23      			inc 	hl
815F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8160:         	GFXGetFontGraphicDE:
8160: F5      			push 	af
8161: E5      			push 	hl
8162: E67F    			and 	$7F 								; bits 0-6 only.
8164: D620    			sub 	32
8166: 6F      			ld 		l,a 								; put in HL
8167: 2600    			ld 		h,0
8169: 29      			add 	hl,hl 								; x 8
816A: 29      			add 	hl,hl
816B: 29      			add 	hl,hl
816C: ED5BF88A			ld 		de,(DIFontBase) 					; add the font base.
8170: 19      			add 	hl,de
8171: EB      			ex 		de,hl 								; put in DE (font address)
              	
8172: E1      			pop 	hl
8173: F1      			pop 	af
8174: FE7F    			cp 		$7F 								; map $7F to the prompt character
8176: C0      			ret 	nz
8177: 117B81  			ld 		de,__GFXPromptCharacter
817A: C9      			ret
              	
817B:         	__GFXPromptCharacter:
817B: FC7E3F1F			db 		$FC,$7E,$3F,$1F
817F: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8183:         	IOScanKeyboard:
8183: C5      			push 	bc
8184: D5      			push 	de
8185: E5      			push 	hl
              	
8186: 21D881  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8189: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
818B: 06FE    			ld 		b,$FE
818D: ED78    			in 		a,(c)
818F: CB47    			bit 	0,a
8191: 2005    			jr 		nz,__kr1
8193: 212882  			ld 		hl,__kr_shift_table
8196: 180B    			jr 		__kr2
8198:         	__kr1:
8198: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
819A: ED78    			in 		a,(c)
819C: CB4F    			bit 	1,a
819E: 2003    			jr 		nz,__kr2
81A0: 210082  			ld 		hl,__kr_symbol_shift_table
81A3:         	__kr2:
              	
81A3: 1EFE    			ld 		e,$FE 								; scan pattern.
81A5: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81A6: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81A8: FEFE    			cp 		$FE
81AA: 2808    			jr 		z,___kr4
81AC: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81AE: FE7F    			cp 		$7F
81B0: 2802    			jr 		z,___kr4
81B2: 161F    			ld 		d,$01F 								; check all bits.
81B4:         	___kr4:
81B4: 43      			ld 		b,e 								; scan the keyboard
81B5: 0EFE    			ld 		c,$FE
81B7: ED78    			in 		a,(c)
81B9: 2F      			cpl 										; make that active high.
81BA: A2      			and 	d  									; and with check value.
81BB: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81BD: 23      			inc 	hl 									; next set of keyboard characters
81BE: 23      			inc 	hl
81BF: 23      			inc 	hl
81C0: 23      			inc 	hl
81C1: 23      			inc 	hl
              	
81C2: 7B      			ld 		a,e 								; get pattern
81C3: 87      			add 	a,a 								; shift left
81C4: F601    			or 		1 									; set bit 1.
81C6: 5F      			ld 		e,a
              	
81C7: FEFF    			cp 		$FF 								; finished when all 1's.
81C9: 20DA    			jr 		nz,__kr3 
81CB: AF      			xor 	a
81CC: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81CE:         	__kr_keypressed:
81CE: 23      			inc 	hl  								; shift right until carry set
81CF: 1F      			rra
81D0: 30FC    			jr 		nc,__kr_keypressed
81D2: 2B      			dec 	hl 									; undo the last inc hl
81D3: 7E      			ld 		a,(hl) 								; get the character number.
81D4:         	__kr_exit:
81D4: E1      			pop 	hl
81D5: D1      			pop 	de
81D6: C1      			pop 	bc
81D7: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
81D8:         	__kr_no_shift_table:
81D8: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81DC: 76617364	
81E0: 6667    	
81E2: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81E6: 74313233	
81EA: 3435    	
81EC: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
81F0: 36706F69	
81F4: 7579    	
81F6: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
81FA: 6820006D	
81FE: 6E62    	
              	
8200:         	__kr_symbol_shift_table:
8200: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8204: 2F7E7C5C	
8208: 7B7D    	
820A: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
820E: 3E214023	
8212: 2425    	
8214: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8218: 26223B00	
821C: 5D5B    	
821E: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8222: 5E20002E	
8226: 2C2A    	
              	
8228:         	__kr_shift_table:
8228: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
822C: 2F7E7C5C	
8230: 7B7D    	
8232: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
8236: 3E214023	
823A: 2414    	
823C: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8240: 15223B00	
8244: 5D5B    	
8246: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
824A: 5E20002E	
824E: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8250:         	GFXInitialise48k:
8250: F5      			push 	af 									; save registers
8251: C5      			push 	bc
              	
8252: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8255: 3E00    			ld 		a,0 								; disable Layer 2
8257: ED79    			out 	(c),a
8259: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
825D: 210040  			ld 		hl,$4000 							; clear pixel memory
8260: 3600    	__cs1:	ld 		(hl),0
8262: 23      			inc 	hl
8263: 7C      			ld 		a,h
8264: FE58    			cp 		$58
8266: 20F8    			jr 		nz,__cs1
8268: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
826A: 23      			inc 	hl
826B: 7C      			ld 		a,h
826C: FE5B    			cp 		$5B
826E: 20F8    			jr 		nz,__cs2	
8270: AF      			xor 	a 									; border off
8271: D3FE    			out 	($FE),a
8273: C1      			pop 	bc
8274: F1      			pop 	af
8275: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8278: 117C82  			ld 		de,GFXPrintCharacter48k
827B: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
827C:         	GFXPrintCharacter48k:
827C: F5      			push 	af 									; save registers
827D: C5      			push 	bc
827E: D5      			push 	de
827F: E5      			push 	hl
              	
8280: 43      			ld 		b,e 								; character in B
8281: 7C      			ld 		a,h 								; check range.
8282: FE03    			cp 		3
8284: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8286: E5      			push 	hl 									; save position.
8287: 7C      			ld 		a,h
8288: C658    			add 	$58
828A: 67      			ld 		h,a
              	
828B: 7A      			ld 		a,d 								; get current colour
828C: E607    			and 	7  									; mask 0..2
828E: F640    			or 		$40  								; make bright
8290: 77      			ld 		(hl),a 								; store it.	
8291: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8292: D5      			push 	de
8293: EB      			ex 		de,hl
8294: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8295: 7A      			ld 		a,d
8296: E603    			and 	3
8298: 87      			add 	a,a
8299: 87      			add 	a,a
829A: 87      			add 	a,a
829B: F640    			or 		$40
829D: 67      			ld 		h,a
829E: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
829F: 78      			ld 		a,b 								; get character
82A0: CD6081  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
82A3: 78      			ld 		a,b
82A4: 0608    			ld 		b,8 								; copy 8 characters
82A6: 0E00    			ld 		c,0 								; XOR value 0
82A8:         	__ZXWCCopy:
82A8: 1A      			ld 		a,(de)								; get font data
82A9: 77      			ld 		(hl),a 								; write back
82AA: 24      			inc 	h 									; bump pointers
82AB: 13      			inc 	de
82AC: 10FA    			djnz 	__ZXWCCopy 							; do B times.
82AE:         	__ZXWCExit:
82AE: E1      			pop 	hl 									; restore and exit
82AF: D1      			pop 	de
82B0: C1      			pop 	bc
82B1: F1      			pop 	af
82B2: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82B3:         	GFXInitialiseLayer2:
82B3: F5      			push 	af
82B4: C5      			push 	bc
82B5: D5      			push 	de
82B6: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82BA: 1E02    			ld 		e,2 								; 3 banks to erase
82BC:         	L2PClear:
82BC: 7B      			ld 		a,e 								; put bank number in bits 6/7
82BD: CB0F    			rrc 	a
82BF: CB0F    			rrc 	a
82C1: F603    			or 		2+1 								; shadow on, visible, enable write paging
82C3: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82C6: ED79    			out 	(c),a
82C8: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82CB: 55      			ld 		d,l 								; D = 0, slightly quicker.
82CC:         	L2PClearBank: 										; assume default palette :)
82CC: 2B      			dec 	hl
82CD: 72      			ld 		(hl),d
82CE: 7C      			ld 		a,h
82CF: B5      			or 		l
82D0: 20FA    			jr		nz,L2PClearBank
82D2: 1D      			dec 	e
82D3: F2BC82  			jp 		p,L2PClear
              	
82D6: AF      			xor 	a
82D7: D3FE    			out 	($FE),a
              	
82D9: D1      			pop 	de
82DA: C1      			pop 	bc
82DB: F1      			pop 	af
82DC: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82DF: 11E382  			ld 		de,GFXPrintCharacterLayer2
82E2: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82E3:         	GFXPrintCharacterLayer2:
82E3: F5      			push 	af
82E4: C5      			push 	bc
82E5: D5      			push 	de
82E6: E5      			push 	hl
82E7: DDE5    			push 	ix
              	
82E9: 43      			ld 		b,e 								; save A temporarily
82EA: 78      			ld 		a,b
              	
82EB: 7C      			ld 		a,h
82EC: FE03    			cp 		3
82EE: 3053    			jr 		nc,__L2Exit 						; check position in range
82F0: 78      			ld 		a,b
              	
82F1: F5      			push 	af 	
82F2: AF      			xor 	a 									; convert colour in C to palette index
82F3: CB42    			bit 	0,d 								; (assumes standard palette)
82F5: 2802    			jr 		z,__L2Not1
82F7: F603    			or 		$03
82F9:         	__L2Not1:
82F9: CB52    			bit 	2,d
82FB: 2802    			jr 		z,__L2Not2
82FD: F61C    			or 		$1C
82FF:         	__L2Not2:
82FF: CB4A    			bit 	1,d
8301: 2802    			jr 		z,__L2Not3
8303: F6C0    			or 		$C0
8305:         	__L2Not3:
8305: 4F      			ld 		c,a 								; C is foreground
8306: F1      			pop 	af 									; restore char
              	
8307: CD6081  			call 	GFXGetFontGraphicDE 				; font offset in DE
830A: D5      			push 	de 									; transfer to IX
830B: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
830D: C5      			push 	bc
830E: 7C      			ld  	a,h 								; this is the page number.
830F: CB0F    			rrc 	a
8311: CB0F    			rrc 	a
8313: E6C0    			and 	$C0 								; in bits 6 & 7
8315: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8317: 013B12  			ld 		bc,$123B 							; out to layer 2 port
831A: ED79    			out 	(c),a
831C: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
831D: EB      			ex 		de,hl
831E: 6B      			ld 		l,e
831F: 2600    			ld 		h,0
8321: 29      			add 	hl,hl 								
8322: 29      			add 	hl,hl
8323: 29      			add 	hl,hl
8324: CB24    			sla 	h
8326: CB24    			sla 	h
8328: CB24    			sla 	h
              	
832A: 1E08    			ld 		e,8 								; do 8 rows
832C:         	__L2Outer:
832C: E5      			push 	hl 									; save start
832D: 1608    			ld 		d,8 								; do 8 columns
832F: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8332: DD23    			inc 	ix
8334:         	__L2Loop:
8334: 3600    			ld 		(hl),0 								; background
8336: 87      			add 	a,a 								; shift pattern left
8337: 3001    			jr 		nc,__L2NotSet
8339: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
833A:         	__L2NotSet:
833A: 23      			inc 	hl
833B: 15      			dec 	d 									; do a row
833C: 20F6    			jr 		nz,	__L2Loop
833E: E1      			pop 	hl 									; restore, go 256 bytes down.
833F: 24      			inc 	h
8340: 1D      			dec 	e 									; do 8 rows
8341: 20E9    			jr 		nz,__L2Outer	
8343:         	__L2Exit:
8343: DDE1    			pop 	ix
8345: E1      			pop 	hl
8346: D1      			pop 	de
8347: C1      			pop 	bc
8348: F1      			pop 	af
8349: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
834A:         	GFXInitialiseLowRes:
834A: F5      			push 	af
834B: C5      			push 	bc
834C: D5      			push 	de
              	
834D: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8351: AF      			xor 	a 									; layer 2 off.
8352: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8355: ED79    			out 	(c),a
              	
8357: 210040  			ld 		hl,$4000 							; erase the bank to $00 
835A: 110060  			ld 		de,$6000
835D:         	LowClearScreen: 									; assume default palette :)
835D: AF      			xor 	a
835E: 77      			ld 		(hl),a
835F: 12      			ld 		(de),a
8360: 23      			inc 	hl
8361: 13      			inc 	de
8362: 7C      			ld 		a,h
8363: FE58    			cp 		$58
8365: 20F6    			jr		nz,LowClearScreen
8367: AF      			xor 	a
8368: D3FE    			out 	($FE),a
836A: D1      			pop 	de
836B: C1      			pop 	bc
836C: F1      			pop 	af
836D: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8370: 117483  			ld 		de,GFXPrintCharacterLowRes
8373: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8374:         	GFXPrintCharacterLowRes:
8374: F5      			push 	af
8375: C5      			push 	bc
8376: D5      			push 	de
8377: E5      			push 	hl
8378: DDE5    			push 	ix
              	
837A: 43      			ld 		b,e 								; save character in B
              	
837B: 29      			add 	hl,hl
837C: 29      			add 	hl,hl
837D: 7C      			ld	 	a,h 								; check in range 192*4 = 768
837E: FE03    			cp 		3
8380: 3046    			jr 		nc,__LPExit
              	
8382: 7A      			ld 		a,d 								; only lower 3 bits of colour
8383: E607    			and 	7
8385: 4F      			ld 		c,a 								; C is foreground
              	
8386: 78      			ld 		a,b 								; get char back
8387: CD6081  			call 	GFXGetFontGraphicDE
838A: D5      			push 	de
838B: DDE1    			pop 	ix
              	
838D: EB      			ex 		de,hl
838E: 7B      			ld 		a,e 								; put DE => HL
838F: E6C0    			and 	192 								; these are part of Y
8391: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8392: 62      			ld 		h,d		
8393: 29      			add 	hl,hl
8394: 29      			add 	hl,hl
8395: 29      			add 	hl,hl
8396: 29      			add 	hl,hl
8397: CBF4    			set 	6,h 								; put into $4000 range
              	
8399: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
839B: A3      			and 	e 									; and with E, gives X position
839C: 87      			add 	a,a 								; now multiplied by 8.
839D: 5F      			ld 		e,a 								; DE is x offset.
839E: 1600    			ld 		d,0  
              	
83A0: 19      			add 	hl,de
83A1: 7C      			ld 		a,h
83A2: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83A4: 3804    			jr 		c,__LowNotLower2
83A6: 110008  			ld 		de,$0800
83A9: 19      			add 	hl,de
83AA:         	__LowNotLower2:
83AA: 1E08    			ld 		e,8 								; do 8 rows
83AC:         	__LowOuter:
83AC: E5      			push 	hl 									; save start
83AD: 1608    			ld 		d,8 								; do 8 columns
83AF: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83B2: DD23    			inc 	ix
83B4:         	__LowLoop:
83B4: 3600    			ld 		(hl),0 								; background
83B6: 87      			add 	a,a 								; shift pattern left
83B7: 3001    			jr 		nc,__LowNotSet
83B9: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83BA:         	__LowNotSet:
83BA: 2C      			inc 	l
83BB: 15      			dec 	d 									; do a row
83BC: 20F6    			jr 		nz,	__LowLoop
83BE: E1      			pop 	hl 									; restore, go 256 bytes down.
83BF: D5      			push 	de
83C0: 118000  			ld 		de,128
83C3: 19      			add 	hl,de
83C4: D1      			pop 	de
83C5: 1D      			dec 	e 									; do 8 rows
83C6: 20E4    			jr 		nz,__LowOuter	
83C8:         	__LPExit:
83C8: DDE1    			pop 	ix
83CA: E1      			pop 	hl
83CB: D1      			pop 	de
83CC: C1      			pop 	bc
83CD: F1      			pop 	af
83CE: C9      			ret
              	
              			include "support/utilities.asm"				; utility functions
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Macro Expansion Utilities
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;					Generic macro expansion. HL points to code, B to count
              	;
              	; ***************************************************************************************
              	
83CF:         	MacroExpand:
83CF: 7E      			ld 		a,(hl)
83D0: CD6480  			call 	FARCompileByte
83D3: 23      			inc 	hl
83D4: 10F9    			djnz 	MacroExpand
83D6: C9      			ret
              	
              			include "compiler/dictionary.asm"			; dictionary add/update routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at BC ends in $80-$FF, uses the current page/pointer
              	;		values. A identifies whether MACRO ($80) or FORTH $(00)
              	;
              	; ***********************************************************************************************
              	
83D7:         	DICTAddWord:
83D7: F5      			push 	af 									; registers to stack.
83D8: C5      			push 	bc
83D9: D5      			push 	de
83DA: E5      			push	hl
83DB: DDE5    			push 	ix
              	
83DD: C5      			push 	bc 									; save word address.
83DE: 4F      			ld 		c,a 								; put the dictionary marker in C
83DF: 06FF    			ld 		b,-1								; put length of string in B
83E1:         	__DICTAddGetLength:
83E1: 23      			inc 	hl
83E2: 04      			inc 	b
83E3: CB7E    			bit 	7,(hl)
83E5: 28FA    			jr 		z,__DICTAddGetLength
83E7: E1      			pop 	hl 									; restore word address.
              	
83E8: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
83EA: CD3480  			call 	PAGESwitch
              	
83ED: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
83F1:         	__DICTFindEndDictionary:
83F1: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
83F4: B7      			or 		a
83F5: 2807    			jr 		z,__DICTCreateEntry
83F7: 5F      			ld 		e,a
83F8: 1600    			ld 		d,0
83FA: DD19    			add 	ix,de
83FC: 18F3    			jr 		__DICTFindEndDictionary
              	
83FE:         	__DICTCreateEntry:
83FE: 78      			ld 		a,b
83FF: C605    			add 	a,5
8401: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
8404: 3AA28A  			ld 		a,(SINextFreeCodePage)				; code page
8407: DD7701  			ld 		(ix+1),a
840A: ED5BA08A			ld 		de,(SINextFreeCode)					; code address
840E: DD7302  			ld 		(ix+2),e
8411: DD7203  			ld 		(ix+3),d 
              	
8414: 79      			ld 		a,c 								; get FORTH/MACRO flag
8415: E680    			and 	$80
8417: B0      			or 		b 									; or length in
8418: DD7704  			ld 		(ix+4),a 							; length (0..5) forth/macro (7)
              	
841B: EB      			ex 		de,hl 								; put name in DE
841C: 13      			inc 	de 									; skip over tag.
841D:         	__DICTAddCopy:
841D: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
841E: DD7705  			ld 		(ix+5),a
8421: DD23    			inc 	ix 									
8423: 13      			inc 	de
8424: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
8426: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
842A: CD4D80  			call 	PAGERestore
842D: DDE1    			pop 	ix 									; restore and exit
842F: E1      			pop 	hl
8430: D1      	 		pop 	de
8431: C1      			pop 	bc
8432: F1      			pop 	af
8433: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. BC points to name. A is the mask for flag/macro.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
8434:         	DICTFindWord:
8434: C5      			push 	bc 								; save registers - return in EHL Carry
8435: DDE5    			push 	ix
              	
8437: 60      			ld 		h,b 							; put address of name in HL. 
8438: 69      			ld 		l,c
              	
8439: 4F      			ld 		c,a 							; macro forth flag in C
              	
843A: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
843C: CD3480  			call 	PAGESwitch
              	
843F: DD2100C0			ld 		ix,$C000 						; dictionary start			
8443:         	__DICTFindMainLoop:
8443: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
8446: B7      			or 		a
8447: 283E    			jr 		z,__DICTFindFail
              	
8449: DD7E04  			ld 		a,(ix+4) 						; get the flag/macro (and length) byte
844C: A9      			xor 	c 								; xor with the mask
844D: E680    			and 	$80 							; only interested in bit 7
844F: 202D    			jr 		nz,__DICTFindNext 				; so if different, go to next.
              	
8451: DDE5    			push 	ix 								; save pointers on stack.
8453: E5      			push 	hl 
              	
8454: DD7E04  			ld 		a,(ix+4) 						; characters to compare
8457: E63F    			and 	$3F
8459: 47      			ld 		b,a
845A: 23      			inc 	hl 								; skip over tag
845B:         	__DICTCheckName:
845B: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
845E: BE      			cp 		(hl) 							; compare vs the matching character.
845F: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
8461: 23      			inc 	hl 								; HL point to next character
8462: DD23    			inc 	ix
8464: 10F5    			djnz 	__DICTCheckName
              	
8466: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
8468: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
846A: E1      			pop 	hl 								; Found a match. restore HL and IX
846B: DDE1    			pop 	ix
846D: 1600    			ld 		d,0 							; D = 0 for neatness.
846F: DD5E01  			ld 		e,(ix+1)						; E = page
8472: DD6E02  			ld 		l,(ix+2)						; HL = address
8475: DD6603  			ld 		h,(ix+3)		
8478: AF      			xor 	a 								; clear the carry flag.
8479: 1813    			jr 		__DICTFindExit
              	
847B:         	__DICTFindNoMatch:								; this one doesn't match.
847B: E1      			pop 	hl 								; restore HL and IX
847C: DDE1    			pop 	ix
847E:         	__DICTFindNext:
847E: DD5E00  			ld 		e,(ix+0)						; DE = offset
8481: 1600    			ld 		d,$00
8483: DD19    			add 	ix,de 							; next word.
8485: 18BC    			jr 		__DICTFindMainLoop				; and try the next one.
              	
8487:         	__DICTFindFail:
8487: 110000  			ld 		de,$0000 						; return all zeros.
848A: 210000  			ld 		hl,$0000
848D: 37      			scf 									; set carry flag
848E:         	__DICTFindExit:
848E: F5      			push 	af
848F: CD4D80  			call 	PAGERestore
8492: F1      			pop 	af
8493: DDE1    			pop 	ix 								; pop registers and return.
8495: C1      			pop 	bc
8496: C9      			ret
              			include "compiler/buffer.asm"				; buffer routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		buffer.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		23rd November 2018
              	;		Purpose :	Buffer read/write routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;			Given a buffer# in BC, convert that to a page A, and address BC.
              	;
              	; ***************************************************************************************
              	
8497:         	BUFFindBuffer:
8497: C5      			push 	bc 									; save buffer number
8498: 3E05    			ld 		a,5 								; divide by 32
849A:         	__BUFDiv32:
849A: CB38    			srl 	b
849C: CB19    			rr 		c
849E: 3D      			dec 	a
849F: 20F9    			jr 		nz,__BUFDiv32 						; this gives the index into the page
84A1: 3E22    			ld 		a,SourceFirstPage 					; add it twice to first page gives page #
84A3: 81      			add 	c 									; where the buffer is.
84A4: 81      			add 	c
              	
84A5: C1      			pop  	bc 									; get the buffer number back
84A6: F5      			push 	af 									; save buffer page
              	
84A7: 79      			ld 		a,c 								; this is the index in the page
84A8: E61F    			and 	31
84AA: 87      			add 	a,a 								; index x 2 
84AB: F6C0    			or 		$C0 								; put into $C000-$FFF range
84AD: 47      			ld 		b,a 								; BC = this index x 512
84AE: 0E00    			ld 		c,0
              	
84B0: F1      			pop 	af 									; A = saved buffer page
84B1: C9      			ret
              	
              	; ***************************************************************************************
              	;			
              	;							Load Buffer at A:BC into Edit Buffer
              	;
              	; ***************************************************************************************
              	
84B2:         	BUFLoadBuffer:
84B2: F5      			push 	af
84B3: C5      			push 	bc
84B4: D5      			push 	de
84B5: E5      			push 	hl
84B6: CD3480  			call 	PAGESwitch 							; switch to $22
84B9: 69      			ld 		l,c 								; copy it in.
84BA: 60      			ld 		h,b
84BB: 11087B  			ld 		de,EditBuffer
84BE: 010002  			ld 		bc,512
84C1: EDB0    			ldir
84C3: CD4D80  			call 	PAGERestore 						; go back
84C6: E1      			pop 	hl
84C7: D1      			pop 	de
84C8: C1      			pop 	bc
84C9: F1      			pop 	af
84CA: C9      			ret
              	
              	; ***************************************************************************************
              	;			
              	;							Save Buffer into memory at A:BC 
              	;
              	; ***************************************************************************************
              	
84CB:         	BUFSaveBuffer:
84CB: F5      			push 	af
84CC: C5      			push 	bc
84CD: D5      			push 	de
84CE: E5      			push 	hl
84CF: CD3480  			call 	PAGESwitch 							; switch to $22
84D2: 59      			ld 		e,c 								; copy it in.
84D3: 50      			ld 		d,b
84D4: 21087B  			ld 		hl,EditBuffer
84D7: 010002  			ld 		bc,512
84DA: EDB0    			ldir
84DC: CD4D80  			call 	PAGERestore 						; go back
84DF: E1      			pop 	hl
84E0: D1      			pop 	de
84E1: C1      			pop 	bc
84E2: F1      			pop 	af
84E3: C9      			ret
              			include "compiler/constant.asm" 			; ASCII -> Int conversion
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at BC to constant in HL. DE 0, Carry Clear if true
              	;									Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
84E4:         	CONSTConvert:
84E4: C5      		push 	bc
              	
84E5: 50      		ld 		d,b 									; string in DE.
84E6: 59      		ld 		e,c
              		
84E7: 210000  		ld 		hl,$0000								; result in HL.
84EA: 13      		inc 	de 										; skip over the tag
84EB: 0E00    		ld 		c,0										; C is the negate flag
84ED:         	__CONConvLoop:
84ED: 1A      		ld 		a,(de)									; get next character
84EE: 13      		inc 	de
              	
84EF: FE30    		cp 		'0'										; must be 0-9 otherwise
84F1: 3830    		jr 		c,__CONConFail
84F3: FE3A    		cp 		'9'+1
84F5: 302C    		jr 		nc,__CONConFail
              	
84F7: C5      		push 	bc
84F8: E5      		push 	hl 										; HL -> BC
84F9: C1      		pop 	bc
84FA: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
84FB: 29      		add 	hl,hl
84FC: 09      		add 	hl,bc 						
84FD: 29      		add 	hl,hl 									; HL := HL * 10
84FE: 0600    		ld 		b,0 									; add the digit into HL
8500: E60F    		and 	15
8502: 4F      		ld 		c,a
8503: 09      		add 	hl,bc
8504: C1      		pop 	bc
              	
8505: 1A      		ld 		a,(de) 									; check ends in -
8506: FE2D    		cp 		'-'									
8508: 2806    		jr 		z,__CONMinusExit 						
850A: CB7F    		bit 	7,a 									; check done everything.
850C: 28DF    		jr 		z,__CONConvLoop
850E: 180D    		jr 		__CONNotNegative
              	
8510:         	__CONMinusExit:
8510: 13      		inc 	de 										; if not the last, it's an error.
8511: 1A      		ld 		a,(de)
8512: CB7F    		bit 	7,a
8514: 280D    		jr		z,__CONConFail
              	
8516: 7C      		ld 		a,h 									; negate HL
8517: 2F      		cpl 	
8518: 67      		ld 		h,a
8519: 7D      		ld 		a,l
851A: 2F      		cpl
851B: 6F      		ld 		l,a
851C: 23      		inc 	hl
              	
851D:         	__CONNotNegative:
851D: 110000  		ld 		de,$0000
8520: AF      		xor 	a 										; clear carry
8521: C1      		pop 	bc
8522: C9      		ret
              	
8523:         	__CONConFail: 										; didn't convert
8523: 21FFFF  		ld 		hl,$FFFF
8526: 11FFFF  		ld 		de,$FFFF
8529: 37      		scf
852A: C1      		pop 	bc
852B: C9      		ret
              	
              		
              			include "compiler/compiler.asm"				; actual compiler code.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	Compile/Execute code.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
852C:         	CompilerTest:
852C: 010000  			ld 		bc,0
852F: CD3485  			call 	COMCompileBuffer
8532: 18FE    	w1: 	jr 		w1
              	
              	; ***************************************************************************************
              	;
              	;					Compile the buffer given in BC. Not re-entrant.
              	;				Called as normal word, so DE is TOS and data on Z80 Stack
              	;										NOT re-entrant.
              	; ***************************************************************************************
              	
8534:         	COMCompileBuffer:
8534: DD01    			db 		$DD,$01
8536: E1      			pop 	hl 									; return address, back to a data stack
8537: 227B85  			ld 		(__COMCBOut+1),hl 					; save for leaving.
853A: D5      			push 	de 									; make the stack uncached.
              	
853B: CD9784  			call 	BUFFindBuffer 						; A:BC is the buffer page/address
853E: CDB284  			call 	BUFLoadBuffer 						; load buffer into edit buffer.
              	
8541: 210000  			ld 		hl,$0000							; put the stack in IX and HL
8544: 39      			add 	hl,sp
8545: E5      			push 	hl
8546: DDE1    			pop 	ix
              	
8548: 01C0FF  			ld 		bc,-64 								; make working space so we can put stuff
854B: 09      			add 	hl,bc 								; on the stack at IX without stuffing up
854C: F9      			ld 		sp,hl								; this code.
              	
854D: 01087B  			ld 		bc,EditBuffer 						; now process it.
8550:         	__COMCBTag:
8550: 0A      			ld 		a,(bc) 								; look at the first word
8551: FEFF    			cp 		$FF 								; reached the end ?
8553: 2022    			jr 		nz,__COMCBExit
              	
8555: 0A      			ld 		a,(bc)
8556: FE82    			cp 		$82 								; red (defining word)
8558: CC7D85  			call 	z,COMDefinition_Red
855B: FE83    			cp 		$83 								; magenta (variable word)
855D: CC7E85  			call 	z,COMDefinition_Magenta	
8560: FE84    			cp 		$84 								; green (compile) word
8562: CC7F85  			call 	z,COMCompileWord_Green
8565: FE85    			cp 		$85 								; cyan (compile) word
8567: CC8085  			call 	z,COMCompileWord_Cyan
856A: FE86    			cp 		$86 								; yellow (execute) word
856C: CC8185  			call 	z,COMExecuteWord_Yellow
856F:         	__COMCBNext: 										; go to the next tag/end (bit 7 set)
856F: 03      			inc 	bc
8570: 0A      			ld 		a,(bc)
8571: CB7F    			bit 	7,a
8573: 28FA    			jr 		z,__COMCBNext
8575: 18D9    			jr 		__COMCBTag 								
              	
8577:         	__COMCBExit:
8577: DDF9    			ld 		sp,ix
8579: D1      			pop 	de 									; make the stack uncached again.
857A:         	__COMCBOut:
857A: C30000  			jp 		$0000
              	
857D:         	COMDefinition_Red:
857D: C9      			ret
              	
857E:         	COMDefinition_Magenta:
857E: C9      			ret
              	
857F:         	COMCompileWord_Green:
857F: C9      			ret
              	
8580:         	COMCompileWord_Cyan:
8580: C9      			ret
              	
8581:         	COMExecuteWord_Yellow:
8581: C9      			ret
              					
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @forth[ix]   *
              	
8582:         	cforth_2a_forth:
8582: DDE1    	    pop ix
8584:         	cforth_2a_start:
8584: E1      	  pop  hl
8585: CDC280  	  call  MULTMultiply16        ; HL := HL * DE
8588: EB      	  ex   de,hl
              	
              	; @end
              	
8589:         	cforth_2a_end:
8589: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /
              	
858B:         	cforth_2f_forth:
858B: DDE1    	    pop ix
858D:         	cforth_2f_start:
858D: E1      	  pop  hl
858E: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
              	
              	; @end
              	
8591:         	cforth_2f_end:
8591: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   mod
              	
8593:         	cforth_6d_6f_64_forth:
8593: DDE1    	    pop ix
8595:         	cforth_6d_6f_64_start:
8595: E1      	  pop  hl
8596: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
8599: EB      	  ex   de,hl
              	
              	; @end
              	
859A:         	cforth_6d_6f_64_end:
859A: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /mod
              	
859C:         	cforth_2f_6d_6f_64_forth:
859C: DDE1    	    pop ix
859E:         	cforth_2f_6d_6f_64_start:
859E: E1      	  pop  hl
859F: CD9780  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
85A2: E5      	  push  hl
              	
              	; @end
              	
85A3:         	cforth_2f_6d_6f_64_end:
85A3: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] +
              	
85A5:         	cforth_2b_forth:
85A5: DDE1    	    pop ix
85A7:         	cforth_2b_start:
85A7: E1      	  pop  hl
85A8: 19      	  add  hl,de
85A9: EB      	  ex   de,hl
              	
              	; @end
              	
85AA:         	cforth_2b_end:
85AA: DDE9    	    jp (ix)
85AC:         	cforth_2b_macro:
85AC: 0603    	    ld b,cforth_2b_end-cforth_2b_start
85AE: 21A785  	    ld hl,cforth_2b_start
85B1: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  and
              	
85B4:         	cforth_61_6e_64_forth:
85B4: E1      	    pop hl
85B5:         	cforth_61_6e_64_start:
85B5: C1      	  pop  bc
85B6: 7B      	  ld   a,e
85B7: A1      	  and  c
85B8: 5F      	  ld   e,a
85B9: 7A      	  ld   a,d
85BA: A0      	  and  b
85BB: 57      	  ld   d,a
              	
              	; @end
              	
85BC:         	cforth_61_6e_64_end:
85BC: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  or
              	
85BD:         	cforth_6f_72_forth:
85BD: E1      	    pop hl
85BE:         	cforth_6f_72_start:
85BE: C1      	  pop  bc
85BF: 7B      	  ld   a,e
85C0: A9      	  xor  c
85C1: 5F      	  ld   e,a
85C2: 7A      	  ld   a,d
85C3: A8      	  xor  b
85C4: 57      	  ld   d,a
              	
              	; @end
              	
85C5:         	cforth_6f_72_end:
85C5: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  +or
              	
85C6:         	cforth_2b_6f_72_forth:
85C6: E1      	    pop hl
85C7:         	cforth_2b_6f_72_start:
85C7: C1      	  pop  bc
85C8: 7B      	  ld   a,e
85C9: B1      	  or   c
85CA: 5F      	  ld   e,a
85CB: 7A      	  ld   a,d
85CC: B0      	  or   b
85CD: 57      	  ld   d,a
              	
              	; @end
              	
85CE:         	cforth_2b_6f_72_end:
85CE: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   compare.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Comparison words, min and max.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[ix] less
              	
85CF:         	cforth_6c_65_73_73_forth:
85CF: DDE1    	    pop ix
85D1:         	cforth_6c_65_73_73_start:
85D1: E1      	  pop  hl
85D2: EB      	  ex   de,hl
85D3: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
85D4: AC      	  xor  h
85D5: 87      	  add  a,a      ; if the signs are different, check those.
85D6: 380C    	  jr   c,__LessDifferentSigns
              	
85D8: D5      	  push  de
85D9: EB      	  ex   de,hl      ; want to do B-A
85DA: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
85DC: D1      	  pop  de
85DD: 3809    	  jr   c,__LessTrue
              	
85DF:         	__LessFalse:
85DF: 110000  	  ld   de,$0000
85E2: 1807    	  jr   __LessExit
              	
85E4:         	__LessDifferentSigns:
85E4: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
85E6: 28F7    	  jr   z,__LessFalse
              	
85E8:         	__LessTrue:
85E8: 11FFFF  	  ld   de,$FFFF
85EB:         	__LessExit:
              	
              	
              	; @end
              	
85EB:         	cforth_6c_65_73_73_end:
85EB: DDE9    	    jp (ix)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphic.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Graphic System words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] screen.mode
              	
85ED:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth:
85ED: E1      	    pop hl
85EE:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start:
85EE: 7B      	  ld   a,e
85EF: CDE680  	  call GFXMode
85F2: D1      	  pop  de
              	
              	; @end
              	
85F3:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end:
85F3: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] screen.clear
              	
85F4:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth:
85F4:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start:
85F4: CDDC80  	  call GFXClearScreen
              	
              	; @end
              	
85F7:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end:
85F7: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ix] screen!
              	
85F8:         	cforth_73_63_72_65_65_6e_21_forth:
85F8: DDE1    	    pop ix
85FA:         	cforth_73_63_72_65_65_6e_21_start:
85FA: EB      	  ex   de,hl        ; TOS (address) in HL
85FB: D1      	  pop  de         ; data in DE
85FC: CD1B81  	  call  GFXWriteCharacter     ; display it
85FF: D1      	  pop  de         ; fix up stack
              	
              	; @end
              	
8600:         	cforth_73_63_72_65_65_6e_21_end:
8600: DDE9    	    jp (ix)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ix] @
              	
8602:         	cforth_40_forth:
8602: DDE1    	    pop ix
8604:         	cforth_40_start:
8604: EB      	  ex   de,hl
8605: 5E      	  ld   e,(hl)
8606: 23      	  inc  hl
8607: 56      	  ld   d,(hl)
              	
              	; @end
              	
8608:         	cforth_40_end:
8608: DDE9    	    jp (ix)
860A:         	cforth_40_macro:
860A: 0604    	    ld b,cforth_40_end-cforth_40_start
860C: 210486  	    ld hl,cforth_40_start
860F: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] c@
              	
8612:         	cforth_63_40_forth:
8612: E1      	    pop hl
8613:         	cforth_63_40_start:
8613: 1A      	  ld   a,(de)
8614: 5F      	  ld   e,a
8615: 1600    	  ld   d,0
              	
              	; @end
              	
8617:         	cforth_63_40_end:
8617: E9      	    jp (hl)
8618:         	cforth_63_40_macro:
8618: 0604    	    ld b,cforth_63_40_end-cforth_63_40_start
861A: 211386  	    ld hl,cforth_63_40_start
861D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] c!
              	
8620:         	cforth_63_21_forth:
8620: DDE1    	    pop ix
8622:         	cforth_63_21_start:
8622: E1      	  pop  hl
8623: 7D      	  ld   a,l
8624: 12      	  ld   (de),a
8625: D1      	  pop  de
              	
              	; @end
              	
8626:         	cforth_63_21_end:
8626: DDE9    	    jp (ix)
8628:         	cforth_63_21_macro:
8628: 0604    	    ld b,cforth_63_21_end-cforth_63_21_start
862A: 212286  	    ld hl,cforth_63_21_start
862D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] !
              	
8630:         	cforth_21_forth:
8630: DDE1    	    pop ix
8632:         	cforth_21_start:
8632: E1      	  pop  hl
8633: 73      	  ld   (hl),e
8634: 23      	  inc  hl
8635: 72      	  ld   (hl),d
8636: D1      	  pop  de
              	
              	; @end
              	
8637:         	cforth_21_end:
8637: DDE9    	    jp (ix)
8639:         	cforth_21_macro:
8639: 0605    	    ld b,cforth_21_end-cforth_21_start
863B: 213286  	    ld hl,cforth_21_start
863E: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] +!
              	
8641:         	cforth_2b_21_forth:
8641: DDE1    	    pop ix
8643:         	cforth_2b_21_start:
8643: E1      	  pop  hl      ; address in DE, get data in HL
8644: EB      	  ex   de,hl     ; address in HL, data in E
8645: 7E      	  ld   a,(hl)
8646: 83      	  add  a,e
8647: 77      	  ld   (hl),a
8648: 23      	  inc  hl
8649: 7E      	  ld   a,(hl)
864A: 8A      	  adc  a,d
864B: 77      	  ld   (hl),a
864C: D1      	  pop  de
              	
              	; @end
              	
864D:         	cforth_2b_21_end:
864D: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] or!
              	
864F:         	cforth_6f_72_21_forth:
864F: DDE1    	    pop ix
8651:         	cforth_6f_72_21_start:
8651: E1      	  pop  hl
8652: 7E      	  ld   a,(hl)
8653: B3      	  or   e
8654: 77      	  ld   (hl),a
8655: 23      	  inc  hl
8656: 7E      	  ld   a,(hl)
8657: B2      	  or   d
8658: 77      	  ld   (hl),a
8659: D1      	  pop  de
              	
              	; @end
              	
865A:         	cforth_6f_72_21_end:
865A: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] fill
              	
865C:         	cforth_66_69_6c_6c_forth:
865C: DDE1    	    pop ix
865E:         	cforth_66_69_6c_6c_start:
              	          ; called as <byte> <address> <count> fill
865E: E1      	  pop  hl       ; top is count (DE) 2nd address (HL) 3rd value (BC)
865F: C1      	  pop  bc
8660: 7A      	  ld   a,d
8661: B3      	  or   e
8662: 2807    	  jr   z,__fill2
              	
8664: 71      	__fill1:ld   (hl),c
8665: 23      	  inc  hl
8666: 0B      	  dec  bc
8667: 7A      	  ld   a,d
8668: B3      	  or   e
8669: 20F9    	  jr   nz,__fill1
866B:         	__fill2:
866B: D1      	  pop  de
              	
              	; @end
              	
866C:         	cforth_66_69_6c_6c_end:
866C: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] move
              	
866E:         	cforth_6d_6f_76_65_forth:
866E: DDE1    	    pop ix
8670:         	cforth_6d_6f_76_65_start:
              	             ; source destination count move
              	
8670: 42      	  ld   b,d         ; top is count (BC)
8671: 4B      	  ld   c,e
8672: E1      	  pop  hl          ; 2nd is target (HL)
8673: D1      	  pop  de          ; 3rd is source (DE)
              	
8674: 78      	  ld   a,b
8675: B1      	  or   c
8676: 2815    	  jr   z,__move2
              	
8678: AF      	  xor  a          ; find direction.
8679: ED52    	  sbc  hl,de
867B: 7C      	  ld   a,h
867C: 19      	  add  hl,de
867D: CB7F    	  bit  7,a         ; if +ve use LDDR
867F: 2805    	  jr   z,__move3
              	
8681: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
8682: EDB0    	  ldir
8684: 1807    	  jr   __move2
              	
8686:         	__move3:
8686: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
8687: EB      	  ex   de,hl
8688: 09      	  add  hl,bc
8689: 1B      	  dec  de          ; -1 to point to last byte
868A: 2B      	  dec  hl
868B: EDB8    	  lddr
              	
868D:         	__move2:
868D: D1      	  pop  de
              	
              	; @end
              	
868E:         	cforth_6d_6f_76_65_end:
868E: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p@
              	
8690:         	cforth_70_40_forth:
8690: E1      	    pop hl
8691:         	cforth_70_40_start:
8691: 42      	  ld   b,d
8692: 4B      	  ld   c,e
8693: ED58    	  in   e,(c)
8695: 1600    	  ld   d,0
              	
              	; @end
              	
8697:         	cforth_70_40_end:
8697: E9      	    jp (hl)
8698:         	cforth_70_40_macro:
8698: 0606    	    ld b,cforth_70_40_end-cforth_70_40_start
869A: 219186  	    ld hl,cforth_70_40_start
869D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p!
              	
86A0:         	cforth_70_21_forth:
86A0: E1      	    pop hl
86A1:         	cforth_70_21_start:
86A1: 42      	  ld   b,d
86A2: 4B      	  ld   c,e
86A3: D1      	  pop  de
86A4: ED59    	  out  (c),e
86A6: D1      	  pop  de
              	
              	; @end
              	
86A7:         	cforth_70_21_end:
86A7: E9      	    jp (hl)
86A8:         	cforth_70_21_macro:
86A8: 0606    	    ld b,cforth_70_21_end-cforth_70_21_start
86AA: 21A186  	    ld hl,cforth_70_21_start
86AD: C3CF83  	    jp MacroExpand
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[hl] drop
              	
86B0:         	cforth_64_72_6f_70_forth:
86B0: E1      	    pop hl
86B1:         	cforth_64_72_6f_70_start:
86B1: D1      	  pop  de
              	
              	; @end
              	
86B2:         	cforth_64_72_6f_70_end:
86B2: E9      	    jp (hl)
86B3:         	cforth_64_72_6f_70_macro:
86B3: 0601    	    ld b,cforth_64_72_6f_70_end-cforth_64_72_6f_70_start
86B5: 21B186  	    ld hl,cforth_64_72_6f_70_start
86B8: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] dup
              	
86BB:         	cforth_64_75_70_forth:
86BB: E1      	    pop hl
86BC:         	cforth_64_75_70_start:
86BC: D5      	  push  de
              	
              	; @end
              	
86BD:         	cforth_64_75_70_end:
86BD: E9      	    jp (hl)
86BE:         	cforth_64_75_70_macro:
86BE: 0601    	    ld b,cforth_64_75_70_end-cforth_64_75_70_start
86C0: 21BC86  	    ld hl,cforth_64_75_70_start
86C3: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] nip
              	
86C6:         	cforth_6e_69_70_forth:
86C6: DDE1    	    pop ix
86C8:         	cforth_6e_69_70_start:
86C8: E1      	  pop  hl
              	
              	; @end
              	
86C9:         	cforth_6e_69_70_end:
86C9: DDE9    	    jp (ix)
86CB:         	cforth_6e_69_70_macro:
86CB: 0601    	    ld b,cforth_6e_69_70_end-cforth_6e_69_70_start
86CD: 21C886  	    ld hl,cforth_6e_69_70_start
86D0: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] over
              	
86D3:         	cforth_6f_76_65_72_forth:
86D3: DDE1    	    pop ix
86D5:         	cforth_6f_76_65_72_start:
86D5: E1      	  pop  hl
86D6: D5      	  push  de
86D7: EB      	  ex   de,hl
              	
              	; @end
              	
86D8:         	cforth_6f_76_65_72_end:
86D8: DDE9    	    jp (ix)
86DA:         	cforth_6f_76_65_72_macro:
86DA: 0603    	    ld b,cforth_6f_76_65_72_end-cforth_6f_76_65_72_start
86DC: 21D586  	    ld hl,cforth_6f_76_65_72_start
86DF: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] swap
              	
86E2:         	cforth_73_77_61_70_forth:
86E2: DDE1    	    pop ix
86E4:         	cforth_73_77_61_70_start:
86E4: E1      	  pop  hl
86E5: EB      	  ex   de,hl
86E6: E5      	  push  hl
              	
              	; @end
              	
86E7:         	cforth_73_77_61_70_end:
86E7: DDE9    	    jp (ix)
86E9:         	cforth_73_77_61_70_macro:
86E9: 0603    	    ld b,cforth_73_77_61_70_end-cforth_73_77_61_70_start
86EB: 21E486  	    ld hl,cforth_73_77_61_70_start
86EE: C3CF83  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   22nd November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] bswap
              	
86F1:         	cforth_62_73_77_61_70_forth:
86F1:         	cforth_62_73_77_61_70_start:
86F1: 7A      	  ld   a,d
86F2: 53      	  ld   d,e
86F3: 5F      	  ld   e,a
              	
              	; @end
              	
86F4:         	cforth_62_73_77_61_70_end:
86F4: C9      	    ret
86F5:         	cforth_62_73_77_61_70_macro:
86F5: 0603    	    ld b,cforth_62_73_77_61_70_end-cforth_62_73_77_61_70_start
86F7: 21F186  	    ld hl,cforth_62_73_77_61_70_start
86FA: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2*
              	
86FD:         	cforth_32_2a_forth:
86FD:         	cforth_32_2a_start:
86FD: EB      	  ex   de,hl
86FE: 29      	  add  hl,hl
86FF: EB      	  ex   de,hl
              	
              	; @end
              	
8700:         	cforth_32_2a_end:
8700: C9      	    ret
8701:         	cforth_32_2a_macro:
8701: 0603    	    ld b,cforth_32_2a_end-cforth_32_2a_start
8703: 21FD86  	    ld hl,cforth_32_2a_start
8706: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2/
              	
8709:         	cforth_32_2f_forth:
8709:         	cforth_32_2f_start:
8709: CB3A    	  srl  d
870B: CB1B    	  rr   e
              	
              	; @end
              	
870D:         	cforth_32_2f_end:
870D: C9      	    ret
870E:         	cforth_32_2f_macro:
870E: 0604    	    ld b,cforth_32_2f_end-cforth_32_2f_start
8710: 210987  	    ld hl,cforth_32_2f_start
8713: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ++
              	
8716:         	cforth_2b_2b_forth:
8716:         	cforth_2b_2b_start:
8716: 13      	  inc  de
              	
              	; @end
              	
8717:         	cforth_2b_2b_end:
8717: C9      	    ret
8718:         	cforth_2b_2b_macro:
8718: 0601    	    ld b,cforth_2b_2b_end-cforth_2b_2b_start
871A: 211687  	    ld hl,cforth_2b_2b_start
871D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] +++
              	
8720:         	cforth_2b_2b_2b_forth:
8720:         	cforth_2b_2b_2b_start:
8720: 13      	  inc  de
8721: 13      	  inc  de
              	
              	; @end
              	
8722:         	cforth_2b_2b_2b_end:
8722: C9      	    ret
8723:         	cforth_2b_2b_2b_macro:
8723: 0602    	    ld b,cforth_2b_2b_2b_end-cforth_2b_2b_2b_start
8725: 212087  	    ld hl,cforth_2b_2b_2b_start
8728: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] --
              	
872B:         	cforth_2d_2d_forth:
872B:         	cforth_2d_2d_start:
872B: 1B      	  dec  de
              	
              	; @end
              	
872C:         	cforth_2d_2d_end:
872C: C9      	    ret
872D:         	cforth_2d_2d_macro:
872D: 0601    	    ld b,cforth_2d_2d_end-cforth_2d_2d_start
872F: 212B87  	    ld hl,cforth_2d_2d_start
8732: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ---
              	
8735:         	cforth_2d_2d_2d_forth:
8735:         	cforth_2d_2d_2d_start:
8735: 1B      	  dec  de
8736: 1B      	  dec  de
              	
              	; @end
              	
8737:         	cforth_2d_2d_2d_end:
8737: C9      	    ret
8738:         	cforth_2d_2d_2d_macro:
8738: 0602    	    ld b,cforth_2d_2d_2d_end-cforth_2d_2d_2d_start
873A: 213587  	    ld hl,cforth_2d_2d_2d_start
873D: C3CF83  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret] -
              	
8740:         	cforth_2d_forth:
8740:         	cforth_2d_start:
8740: 7A      	  ld   a,d
8741: 2F      	  cpl
8742: 57      	  ld   d,a
8743: 7B      	  ld   a,e
8744: 2F      	  cpl
8745: 5F      	  ld   e,a
              	
              	; @end
              	
8746:         	cforth_2d_end:
8746: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  negate
              	
8747:         	cforth_6e_65_67_61_74_65_forth:
8747:         	cforth_6e_65_67_61_74_65_start:
8747: 7A      	  ld   a,d
8748: 2F      	  cpl
8749: 57      	  ld   d,a
874A: 7B      	  ld   a,e
874B: 2F      	  cpl
874C: 5F      	  ld   e,a
874D: 13      	  inc  de
              	
              	; @end
              	
874E:         	cforth_6e_65_67_61_74_65_end:
874E: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  abs
              	
874F:         	cforth_61_62_73_forth:
874F:         	cforth_61_62_73_start:
874F: CB7A    	  bit  7,d
8751: 2807    	  jr   z,__IsPositive
8753: 7A      	  ld   a,d
8754: 2F      	  cpl
8755: 57      	  ld   d,a
8756: 7B      	  ld   a,e
8757: 2F      	  cpl
8758: 5F      	  ld   e,a
8759: 13      	  inc  de
875A:         	__IsPositive:
              	
              	; @end
              	
875A:         	cforth_61_62_73_end:
875A: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0=
              	
875B:         	cforth_30_3d_forth:
875B:         	cforth_30_3d_start:
875B: 7A      	  ld   a,d
875C: B3      	  or   e
875D: 110000  	  ld   de,$0000
8760: 2001    	  jr   nz,__IsNonZero
8762: 1B      	  dec  de
8763:         	__IsNonZero:
              	
              	; @end
              	
8763:         	cforth_30_3d_end:
8763: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0<
              	
8764:         	cforth_30_3c_forth:
8764:         	cforth_30_3c_start:
8764: CB7A    	  bit  7,d
8766: 110000  	  ld   de,$0000
8769: 2801    	  jr   z,__IsPositive2
876B: 1B      	  dec  de
876C:         	__IsPositive2:
              	
              	; @end
              	
876C:         	cforth_30_3c_end:
876C: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   21st November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] inkey
              	
876D:         	cforth_69_6e_6b_65_79_forth:
876D: E1      	    pop hl
876E:         	cforth_69_6e_6b_65_79_start:
876E: D5      	  push  de
876F: CD8381  	  call  IOScanKeyboard
8772: 5F      	  ld   e,a
8773: 1600    	  ld   d,0
              	
              	; @end
              	
8775:         	cforth_69_6e_6b_65_79_end:
8775: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] halt
              	
8776:         	cforth_68_61_6c_74_forth:
8776: E1      	    pop hl
8777:         	cforth_68_61_6c_74_start:
              	
8777: C32080  	  jp   HaltZ80
              	
              	; @end
              	
877A:         	cforth_68_61_6c_74_end:
877A: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] break
              	
877B:         	cforth_62_72_65_61_6b_forth:
877B:         	cforth_62_72_65_61_6b_start:
877B: DD01    	  db   $DD,$01
              	
              	; @endm
              	
877D:         	cforth_62_72_65_61_6b_end:
877D: C9      	    ret
877E:         	cforth_62_72_65_61_6b_macro:
877E: 0602    	    ld b,cforth_62_72_65_61_6b_end-cforth_62_72_65_61_6b_start
8780: 217B87  	    ld hl,cforth_62_72_65_61_6b_start
8783: C3CF83  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 1,
              	
8786:         	cforth_31_2c_forth:
8786: E1      	    pop hl
8787:         	cforth_31_2c_start:
8787: 7B      	  ld   a,e
8788: CD6480  	  call  FARCompileByte
878B: D1      	  pop  de
              	
              	; @endm
              	
878C:         	cforth_31_2c_end:
878C: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 2,
              	
878D:         	cforth_32_2c_forth:
878D: E1      	    pop hl
878E:         	cforth_32_2c_start:
878E: EB      	  ex   de,hl
878F: CD6480  	  call  FARCompileByte
8792: D1      	  pop  de
              	
              	; @endm
              	
8793:         	cforth_32_2c_end:
8793: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	;    FORTH and MACRO are special cases. See makedictionary.py
              	; ***************************************************************************************
              	
              	
              	; @word[ret] forth
              	
8794:         	cforth_66_6f_72_74_68_forth:
8794:         	cforth_66_6f_72_74_68_start:
8794: 3E00    	  ld   a,$00
8796: 32E78A  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
8799:         	cforth_66_6f_72_74_68_end:
8799: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] macro
              	
879A:         	cforth_6d_61_63_72_6f_forth:
879A:         	cforth_6d_61_63_72_6f_start:
879A: 3E00    	  ld   a,$00
879C: 32E78A  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
879F:         	cforth_6d_61_63_72_6f_end:
879F: C9      	    ret
              	
87A0:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
87A0: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
87A4: 00000000	
87A8: 0C1E1E0C	
87AC: 0C000C00	
87B0: 36360000	
87B4: 00000000	
87B8: 36367F36	
87BC: 7F363600	
87C0: 183E603C	
87C4: 067C1800	
87C8: 0063660C	
87CC: 18336300	
87D0: 1C361C3B	
87D4: 6E663B00	
87D8: 30306000	
87DC: 00000000	
87E0: 0C183030	
87E4: 30180C00	
87E8: 30180C0C	
87EC: 0C183000	
87F0: 00331E7F	
87F4: 1E330000	
87F8: 0018187E	
87FC: 18180000	
8800: 00000000	
8804: 00181830	
8808: 0000007E	
880C: 00000000	
8810: 00000000	
8814: 00181800	
8818: 03060C18	
881C: 30604000	
8820: 3E63676F	
8824: 7B733E00	
8828: 18381818	
882C: 18187E00	
8830: 3C66061C	
8834: 30667E00	
8838: 3C66061C	
883C: 06663C00	
8840: 0E1E3666	
8844: 7F060F00	
8848: 7E607C06	
884C: 06663C00	
8850: 1C30607C	
8854: 66663C00	
8858: 7E66060C	
885C: 18181800	
8860: 3C66663C	
8864: 66663C00	
8868: 3C66663E	
886C: 060C3800	
8870: 00181800	
8874: 00181800	
8878: 00181800	
887C: 00181830	
8880: 0C183060	
8884: 30180C00	
8888: 00007E00	
888C: 007E0000	
8890: 30180C06	
8894: 0C183000	
8898: 3C66060C	
889C: 18001800	
88A0: 3E636F6F	
88A4: 6F603C00	
88A8: 183C6666	
88AC: 7E666600	
88B0: 7E33333E	
88B4: 33337E00	
88B8: 1E336060	
88BC: 60331E00	
88C0: 7C363333	
88C4: 33367C00	
88C8: 7F31343C	
88CC: 34317F00	
88D0: 7F31343C	
88D4: 34307800	
88D8: 1E336060	
88DC: 67331F00	
88E0: 6666667E	
88E4: 66666600	
88E8: 3C181818	
88EC: 18183C00	
88F0: 0F060606	
88F4: 66663C00	
88F8: 7333363C	
88FC: 36337300	
8900: 78303030	
8904: 31337F00	
8908: 63777F7F	
890C: 6B636300	
8910: 63737B6F	
8914: 67636300	
8918: 1C366363	
891C: 63361C00	
8920: 7E33333E	
8924: 30307800	
8928: 3C666666	
892C: 6E3C0E00	
8930: 7E33333E	
8934: 36337300	
8938: 3C667038	
893C: 0E663C00	
8940: 7E5A1818	
8944: 18183C00	
8948: 66666666	
894C: 66667E00	
8950: 66666666	
8954: 663C1800	
8958: 6363636B	
895C: 7F776300	
8960: 6363361C	
8964: 1C366300	
8968: 6666663C	
896C: 18183C00	
8970: 7F63460C	
8974: 19337F00	
8978: 3C303030	
897C: 30303C00	
8980: 6030180C	
8984: 06030100	
8988: 3C0C0C0C	
898C: 0C0C3C00	
8990: 081C3663	
8994: 00000000	
8998: 00000000	
899C: 0000007F	
89A0: 18180C00	
89A4: 00000000	
89A8: 00003C06	
89AC: 3E663B00	
89B0: 7030303E	
89B4: 33336E00	
89B8: 00003C66	
89BC: 60663C00	
89C0: 0E06063E	
89C4: 66663B00	
89C8: 00003C66	
89CC: 7E603C00	
89D0: 1C363078	
89D4: 30307800	
89D8: 00003B66	
89DC: 663E067C	
89E0: 7030363B	
89E4: 33337300	
89E8: 18003818	
89EC: 18183C00	
89F0: 06000606	
89F4: 0666663C	
89F8: 70303336	
89FC: 3C367300	
8A00: 38181818	
8A04: 18183C00	
8A08: 0000667F	
8A0C: 7F6B6300	
8A10: 00007C66	
8A14: 66666600	
8A18: 00003C66	
8A1C: 66663C00	
8A20: 00006E33	
8A24: 333E3078	
8A28: 00003B66	
8A2C: 663E060F	
8A30: 00006E3B	
8A34: 33307800	
8A38: 00003E60	
8A3C: 3C067C00	
8A40: 08183E18	
8A44: 181A0C00	
8A48: 00006666	
8A4C: 66663B00	
8A50: 00006666	
8A54: 663C1800	
8A58: 0000636B	
8A5C: 7F7F3600	
8A60: 00006336	
8A64: 1C366300	
8A68: 00006666	
8A6C: 663E067C	
8A70: 00007E4C	
8A74: 18327E00	
8A78: 0E181870	
8A7C: 18180E00	
8A80: 0C0C0C00	
8A84: 0C0C0C00	
8A88: 7018180E	
8A8C: 18187000	
8A90: 3B6E0000	
8A94: 00000000	
8A98: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8AA0:         	SystemInformationTable:
              	
8AA0:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8AA0: 00A0    			dw 		FreeMemory
8AA2:         	SINextFreeCodePage: 								; +2 	Next Free Code Byte Page
8AA2: 2600    			db 		FirstCodePage,0
              	
8AA4:         	SIBootCodeAddress:									; +4	Run from here
8AA4: 2C85    			dw 		CompilerTest
8AA6:         	SIBootCodePage: 									; +6    Run page.
8AA6: 2600    			db		FirstCodePage,0
              	
8AA8:         	SIPageUsage:										; +8 	Page Usage Table
8AA8: C68A0000			dw 		PageUsage,0 			
              	
8AAC:         	SIDisplayInformation:								; +12 	Display Information structure address
8AAC: E88A0000			dw 		DIScreenWidth,0
              	
8AB0:         	SIStack:											; +16 	Initial Z80 stack value
8AB0: FC7E0000			dw 		StackTop,0							
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8AB4:         	PAGEStackPointer: 									; stack used for switching pages
8AB4: 0000    			dw 		0
8AB6:         	PAGEStackBase:
8AB6: FFFFFFFF			ds 		16
8ABA: FF...   	
              	;
              	;		Page usage table. Note this needs to match up with the definitions in kernel.asm
              	;
8AC6:         	PageUsage:
8AC6: 01      			db 		1 									; $20 Dictionary (1)
8AC7: 0303    			db 		3,3 								; $22 User Code (3)
8AC9: 02      			db 		2 									; $26 First binary code page (2)
8ACA: 00000000			db 		0,0,0,0 							; to $2E, remaining pages
8ACE: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8AD2: 00000000	
8AD6: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8ADA: 00000000	
8ADE: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8AE2: 00000000	
8AE6: FF      			db 		$FF
              	
8AE7:         	DICTForthMacroFlag:									; does it go in FORTH ($00) MACRO ($40)
8AE7: 00      			db 		0
              	;
              	;			Display Information
              	;
8AE8:         	DIScreenWidth:										; +0 	Screen Width
8AE8: 00000000			dw 		0,0
8AEC:         	DIScreenHeight:										; +4 	Screen Height
8AEC: 00000000			dw 		0,0
8AF0:         	DIScreenSize: 										; +8    Screen Size in Characters
8AF0: 00000000			dw 		0,0
8AF4:         	DIScreenDriver:										; +12 	Screen Driver
8AF4: 00000000			dw 		0,0 								
8AF8:         	DIFontBase:											; +16 	768 byte font, begins with space
8AF8: A0870000			dw 		AlternateFont,0 							
8AFC:         	DIScreenMode:										; +20 	Current Mode
8AFC: 00000000			dw 		0,0
              	
8B00: FFFFFFFF			org 	$A000
8B04: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont               = $87A0 = 34720          kernel.asm:70
BUFFindBuffer               = $8497 = 33943          buffer.asm:18
BUFLoadBuffer               = $84B2 = 33970          buffer.asm:49
BUFSaveBuffer               = $84CB = 33995          buffer.asm:73 (unused)
Boot                        = $8006 = 32774          kernel.asm:33
COMCompileBuffer            = $8534 = 34100          compiler.asm:24
COMCompileWord_Cyan         = $8580 = 34176          compiler.asm:81
COMCompileWord_Green        = $857F = 34175          compiler.asm:78
COMDefinition_Magenta       = $857E = 34174          compiler.asm:75
COMDefinition_Red           = $857D = 34173          compiler.asm:72
COMExecuteWord_Yellow       = $8581 = 34177          compiler.asm:84
CONSTConvert                = $84E4 = 34020          constant.asm:19 (unused)
CompilerTest                = $852C = 34092          compiler.asm:12
DICTAddWord                 = $83D7 = 33751          dictionary.asm:19 (unused)
DICTFindWord                = $8434 = 33844          dictionary.asm:93 (unused)
DICTForthMacroFlag          = $8AE7 = 35559          data.asm:62
DIFontBase                  = $8AF8 = 35576          data.asm:75
DIScreenDriver              = $8AF4 = 35572          data.asm:73
DIScreenHeight              = $8AEC = 35564          data.asm:69
DIScreenMode                = $8AFC = 35580          data.asm:77
DIScreenSize                = $8AF0 = 35568          data.asm:71
DIScreenWidth               = $8AE8 = 35560          data.asm:67
DIVDivideMod16              = $8097 = 32919          divide.asm:18
DictionaryPage              = $0020 =    32          kernel.asm:17
Div16_Loop1                 = $80A1 = 32929          divide.asm:27
Div16_Loop2                 = $80B2 = 32946          divide.asm:41
Div16_NoAdd1                = $80A9 = 32937          divide.asm:33
Div16_NoAdd2                = $80BA = 32954          divide.asm:47
EditBuffer                  = $7B08 = 31496          kernel.asm:25
ErrorHandler                = $801E = 32798          kernel.asm:45
FARCompileByte              = $8064 = 32868          farmemory.asm:21
FARCompileByteL             = $8063 = 32867          farmemory.asm:18 (unused)
FARCompileWord              = $807C = 32892          farmemory.asm:43 (unused)
FirstCodePage               = $0026 =    38          kernel.asm:20
FreeMemory                  = $A000 = 40960          data.asm:81
GFXClearScreen              = $80DC = 32988          graphics.asm:18
GFXGetFontGraphicDE         = $8160 = 33120          graphics.asm:146
GFXInitialise48k            = $8250 = 33360          screen48k.asm:19
GFXInitialiseLayer2         = $82B3 = 33459          screen_layer2.asm:19
GFXInitialiseLowRes         = $834A = 33610          screen_lores.asm:18
GFXMode                     = $80E6 = 32998          graphics.asm:32
GFXPrintCharacter48k        = $827C = 33404          screen48k.asm:53
GFXPrintCharacterLayer2     = $82E3 = 33507          screen_layer2.asm:56
GFXPrintCharacterLowRes     = $8374 = 33652          screen_lores.asm:50
GFXWriteCharacter           = $811B = 33051          graphics.asm:78
GFXWriteHexWord             = $812E = 33070          graphics.asm:101 (unused)
GFXWriteHexWordA            = $8130 = 33072          graphics.asm:103 (unused)
HaltZ80                     = $8020 = 32800          kernel.asm:48
IOScanKeyboard              = $8183 = 33155          keyboard.asm:18
L2PClear                    = $82BC = 33468          screen_layer2.asm:26
L2PClearBank                = $82CC = 33484          screen_layer2.asm:35
LowClearScreen              = $835D = 33629          screen_lores.asm:30
MULTMultiply16              = $80C2 = 32962          multiply.asm:18
MacroExpand                 = $83CF = 33743          utilities.asm:18
PAGEInitialise              = $8024 = 32804          paging.asm:18
PAGERestore                 = $804D = 32845          paging.asm:62
PAGEStackBase               = $8AB6 = 35510          data.asm:47
PAGEStackPointer            = $8AB4 = 35508          data.asm:45
PAGESwitch                  = $8034 = 32820          paging.asm:34
PageUsage                   = $8AC6 = 35526          data.asm:52
SIBootCodeAddress           = $8AA4 = 35492          data.asm:25
SIBootCodePage              = $8AA6 = 35494          data.asm:27
SIDisplayInformation        = $8AAC = 35500          data.asm:33 (unused)
SINextFreeCode              = $8AA0 = 35488          data.asm:20
SINextFreeCodePage          = $8AA2 = 35490          data.asm:22
SIPageUsage                 = $8AA8 = 35496          data.asm:30 (unused)
SIStack                     = $8AB0 = 35504          data.asm:36
SourceFirstPage             = $0022 =    34          kernel.asm:18
SourcePages                 = $0040 =    64          kernel.asm:19
StackTop                    = $7EFC = 32508          kernel.asm:26
SystemInformationTable      = $8AA0 = 35488          data.asm:18
__BUFDiv32                  = $849A = 33946          buffer.asm:21
__COMCBExit                 = $8577 = 34167          compiler.asm:66
__COMCBNext                 = $856F = 34159          compiler.asm:59
__COMCBOut                  = $857A = 34170          compiler.asm:69
__COMCBTag                  = $8550 = 34128          compiler.asm:43
__CONConFail                = $8523 = 34083          constant.asm:77
__CONConvLoop               = $84ED = 34029          constant.asm:28
__CONMinusExit              = $8510 = 34064          constant.asm:57
__CONNotNegative            = $851D = 34077          constant.asm:71
__Core__Mult_Loop           = $80C9 = 32969          multiply.asm:24
__Core__Mult_Shift          = $80CE = 32974          multiply.asm:28
__DICTAddCopy               = $841D = 33821          dictionary.asm:68
__DICTAddGetLength          = $83E1 = 33761          dictionary.asm:29
__DICTCheckName             = $845B = 33883          dictionary.asm:123
__DICTCreateEntry           = $83FE = 33790          dictionary.asm:50
__DICTFindEndDictionary     = $83F1 = 33777          dictionary.asm:41
__DICTFindExit              = $848E = 33934          dictionary.asm:156
__DICTFindFail              = $8487 = 33927          dictionary.asm:152
__DICTFindMainLoop          = $8443 = 33859          dictionary.asm:106
__DICTFindNext              = $847E = 33918          dictionary.asm:146
__DICTFindNoMatch           = $847B = 33915          dictionary.asm:143
__GFXConfigure              = $8100 = 33024          graphics.asm:53
__GFXLayer2                 = $80F8 = 33016          graphics.asm:46
__GFXLowRes                 = $80FD = 33021          graphics.asm:50
__GFXPromptCharacter        = $817B = 33147          graphics.asm:167
__GFXWCExit                 = $8129 = 33065          graphics.asm:88
__GFXWHByte                 = $8142 = 33090          graphics.asm:119
__GFXWHDigit                = $8158 = 33112          graphics.asm:133
__GFXWHNibble               = $814F = 33103          graphics.asm:127
__IsNonZero                 = $8763 = 34659          __words.asm:856
__IsPositive                = $875A = 34650          __words.asm:837
__IsPositive2               = $876C = 34668          __words.asm:874
__L2Exit                    = $8343 = 33603          screen_layer2.asm:136
__L2Loop                    = $8334 = 33588          screen_layer2.asm:123
__L2Not1                    = $82F9 = 33529          screen_layer2.asm:76
__L2Not2                    = $82FF = 33535          screen_layer2.asm:80
__L2Not3                    = $8305 = 33541          screen_layer2.asm:84
__L2NotSet                  = $833A = 33594          screen_layer2.asm:128
__L2Outer                   = $832C = 33580          screen_layer2.asm:118
__LPExit                    = $83C8 = 33736          screen_lores.asm:120
__LessDifferentSigns        = $85E4 = 34276          __words.asm:198
__LessExit                  = $85EB = 34283          __words.asm:204
__LessFalse                 = $85DF = 34271          __words.asm:194
__LessTrue                  = $85E8 = 34280          __words.asm:202
__LowLoop                   = $83B4 = 33716          screen_lores.asm:104
__LowNotLower2              = $83AA = 33706          screen_lores.asm:97
__LowNotSet                 = $83BA = 33722          screen_lores.asm:109
__LowOuter                  = $83AC = 33708          screen_lores.asm:99
__ZXWCCopy                  = $82A8 = 33448          screen48k.asm:101
__ZXWCExit                  = $82AE = 33454          screen48k.asm:107
___kr4                      = $81B4 = 33204          keyboard.asm:49
__cs1                       = $8260 = 33376          screen48k.asm:29
__cs2                       = $8268 = 33384          screen48k.asm:34
__fill1                     = $8664 = 34404          __words.asm:428
__fill2                     = $866B = 34411          __words.asm:434
__kr1                       = $8198 = 33176          keyboard.asm:32
__kr2                       = $81A3 = 33187          keyboard.asm:38
__kr3                       = $81A5 = 33189          keyboard.asm:41
__kr_exit                   = $81D4 = 33236          keyboard.asm:79
__kr_keypressed             = $81CE = 33230          keyboard.asm:73
__kr_no_shift_table         = $81D8 = 33240          keyboard.asm:94
__kr_shift_table            = $8228 = 33320          keyboard.asm:106
__kr_symbol_shift_table     = $8200 = 33280          keyboard.asm:100
__move2                     = $868D = 34445          __words.asm:480
__move3                     = $8686 = 34438          __words.asm:472
_end                        = $C001 = 49153          kernel.asm:27 (unused)
_size                       = $4001 = 16385          kernel.asm:27 (unused)
cforth_21_end               = $8637 = 34359          __words.asm:359
cforth_21_forth             = $8630 = 34352          __words.asm:348 (unused)
cforth_21_macro             = $8639 = 34361          __words.asm:361 (unused)
cforth_21_start             = $8632 = 34354          __words.asm:350
cforth_2a_end               = $8589 = 34185          __words.asm:27 (unused)
cforth_2a_forth             = $8582 = 34178          __words.asm:18 (unused)
cforth_2a_start             = $8584 = 34180          __words.asm:20 (unused)
cforth_2b_21_end            = $864D = 34381          __words.asm:387 (unused)
cforth_2b_21_forth          = $8641 = 34369          __words.asm:371 (unused)
cforth_2b_21_start          = $8643 = 34371          __words.asm:373 (unused)
cforth_2b_2b_2b_end         = $8722 = 34594          __words.asm:738
cforth_2b_2b_2b_forth       = $8720 = 34592          __words.asm:731 (unused)
cforth_2b_2b_2b_macro       = $8723 = 34595          __words.asm:740 (unused)
cforth_2b_2b_2b_start       = $8720 = 34592          __words.asm:732
cforth_2b_2b_end            = $8717 = 34583          __words.asm:719
cforth_2b_2b_forth          = $8716 = 34582          __words.asm:713 (unused)
cforth_2b_2b_macro          = $8718 = 34584          __words.asm:721 (unused)
cforth_2b_2b_start          = $8716 = 34582          __words.asm:714
cforth_2b_6f_72_end         = $85CE = 34254          __words.asm:161 (unused)
cforth_2b_6f_72_forth       = $85C6 = 34246          __words.asm:148 (unused)
cforth_2b_6f_72_start       = $85C7 = 34247          __words.asm:150 (unused)
cforth_2b_end               = $85AA = 34218          __words.asm:94
cforth_2b_forth             = $85A5 = 34213          __words.asm:85 (unused)
cforth_2b_macro             = $85AC = 34220          __words.asm:96 (unused)
cforth_2b_start             = $85A7 = 34215          __words.asm:87
cforth_2d_2d_2d_end         = $8737 = 34615          __words.asm:775
cforth_2d_2d_2d_forth       = $8735 = 34613          __words.asm:768 (unused)
cforth_2d_2d_2d_macro       = $8738 = 34616          __words.asm:777 (unused)
cforth_2d_2d_2d_start       = $8735 = 34613          __words.asm:769
cforth_2d_2d_end            = $872C = 34604          __words.asm:756
cforth_2d_2d_forth          = $872B = 34603          __words.asm:750 (unused)
cforth_2d_2d_macro          = $872D = 34605          __words.asm:758 (unused)
cforth_2d_2d_start          = $872B = 34603          __words.asm:751
cforth_2d_end               = $8746 = 34630          __words.asm:798 (unused)
cforth_2d_forth             = $8740 = 34624          __words.asm:787 (unused)
cforth_2d_start             = $8740 = 34624          __words.asm:788 (unused)
cforth_2f_6d_6f_64_end      = $85A3 = 34211          __words.asm:77 (unused)
cforth_2f_6d_6f_64_forth    = $859C = 34204          __words.asm:68 (unused)
cforth_2f_6d_6f_64_start    = $859E = 34206          __words.asm:70 (unused)
cforth_2f_end               = $8591 = 34193          __words.asm:43 (unused)
cforth_2f_forth             = $858B = 34187          __words.asm:35 (unused)
cforth_2f_start             = $858D = 34189          __words.asm:37 (unused)
cforth_30_3c_end            = $876C = 34668          __words.asm:878 (unused)
cforth_30_3c_forth          = $8764 = 34660          __words.asm:868 (unused)
cforth_30_3c_start          = $8764 = 34660          __words.asm:869 (unused)
cforth_30_3d_end            = $8763 = 34659          __words.asm:860 (unused)
cforth_30_3d_forth          = $875B = 34651          __words.asm:849 (unused)
cforth_30_3d_start          = $875B = 34651          __words.asm:850 (unused)
cforth_31_2c_end            = $878C = 34700          __words.asm:955 (unused)
cforth_31_2c_forth          = $8786 = 34694          __words.asm:946 (unused)
cforth_31_2c_start          = $8787 = 34695          __words.asm:948 (unused)
cforth_32_2a_end            = $8700 = 34560          __words.asm:682
cforth_32_2a_forth          = $86FD = 34557          __words.asm:674 (unused)
cforth_32_2a_macro          = $8701 = 34561          __words.asm:684 (unused)
cforth_32_2a_start          = $86FD = 34557          __words.asm:675
cforth_32_2c_end            = $8793 = 34707          __words.asm:972 (unused)
cforth_32_2c_forth          = $878D = 34701          __words.asm:963 (unused)
cforth_32_2c_start          = $878E = 34702          __words.asm:965 (unused)
cforth_32_2f_end            = $870D = 34573          __words.asm:701
cforth_32_2f_forth          = $8709 = 34569          __words.asm:694 (unused)
cforth_32_2f_macro          = $870E = 34574          __words.asm:703 (unused)
cforth_32_2f_start          = $8709 = 34569          __words.asm:695
cforth_40_end               = $8608 = 34312          __words.asm:293
cforth_40_forth             = $8602 = 34306          __words.asm:283 (unused)
cforth_40_macro             = $860A = 34314          __words.asm:295 (unused)
cforth_40_start             = $8604 = 34308          __words.asm:285
cforth_61_62_73_end         = $875A = 34650          __words.asm:841 (unused)
cforth_61_62_73_forth       = $874F = 34639          __words.asm:826 (unused)
cforth_61_62_73_start       = $874F = 34639          __words.asm:827 (unused)
cforth_61_6e_64_end         = $85BC = 34236          __words.asm:119 (unused)
cforth_61_6e_64_forth       = $85B4 = 34228          __words.asm:106 (unused)
cforth_61_6e_64_start       = $85B5 = 34229          __words.asm:108 (unused)
cforth_62_72_65_61_6b_end   = $877D = 34685          __words.asm:934
cforth_62_72_65_61_6b_forth = $877B = 34683          __words.asm:928 (unused)
cforth_62_72_65_61_6b_macro = $877E = 34686          __words.asm:936 (unused)
cforth_62_72_65_61_6b_start = $877B = 34683          __words.asm:929
cforth_62_73_77_61_70_end   = $86F4 = 34548          __words.asm:662
cforth_62_73_77_61_70_forth = $86F1 = 34545          __words.asm:654 (unused)
cforth_62_73_77_61_70_macro = $86F5 = 34549          __words.asm:664 (unused)
cforth_62_73_77_61_70_start = $86F1 = 34545          __words.asm:655
cforth_63_21_end            = $8626 = 34342          __words.asm:336
cforth_63_21_forth          = $8620 = 34336          __words.asm:326 (unused)
cforth_63_21_macro          = $8628 = 34344          __words.asm:338 (unused)
cforth_63_21_start          = $8622 = 34338          __words.asm:328
cforth_63_40_end            = $8617 = 34327          __words.asm:314
cforth_63_40_forth          = $8612 = 34322          __words.asm:305 (unused)
cforth_63_40_macro          = $8618 = 34328          __words.asm:316 (unused)
cforth_63_40_start          = $8613 = 34323          __words.asm:307
cforth_64_72_6f_70_end      = $86B2 = 34482          __words.asm:553
cforth_64_72_6f_70_forth    = $86B0 = 34480          __words.asm:546 (unused)
cforth_64_72_6f_70_macro    = $86B3 = 34483          __words.asm:555 (unused)
cforth_64_72_6f_70_start    = $86B1 = 34481          __words.asm:548
cforth_64_75_70_end         = $86BD = 34493          __words.asm:572
cforth_64_75_70_forth       = $86BB = 34491          __words.asm:565 (unused)
cforth_64_75_70_macro       = $86BE = 34494          __words.asm:574 (unused)
cforth_64_75_70_start       = $86BC = 34492          __words.asm:567
cforth_66_69_6c_6c_end      = $866C = 34412          __words.asm:439 (unused)
cforth_66_69_6c_6c_forth    = $865C = 34396          __words.asm:418 (unused)
cforth_66_69_6c_6c_start    = $865E = 34398          __words.asm:420 (unused)
cforth_66_6f_72_74_68_end   = $8799 = 34713          __words.asm:989 (unused)
cforth_66_6f_72_74_68_forth = $8794 = 34708          __words.asm:982 (unused)
cforth_66_6f_72_74_68_start = $8794 = 34708          __words.asm:983 (unused)
cforth_68_61_6c_74_end      = $877A = 34682          __words.asm:920 (unused)
cforth_68_61_6c_74_forth    = $8776 = 34678          __words.asm:912 (unused)
cforth_68_61_6c_74_start    = $8777 = 34679          __words.asm:914 (unused)
cforth_69_6e_6b_65_79_end   = $8775 = 34677          __words.asm:904 (unused)
cforth_69_6e_6b_65_79_forth = $876D = 34669          __words.asm:894 (unused)
cforth_69_6e_6b_65_79_start = $876E = 34670          __words.asm:896 (unused)
cforth_6c_65_73_73_end      = $85EB = 34283          __words.asm:209 (unused)
cforth_6c_65_73_73_forth    = $85CF = 34255          __words.asm:178 (unused)
cforth_6c_65_73_73_start    = $85D1 = 34257          __words.asm:180 (unused)
cforth_6d_61_63_72_6f_end   = $879F = 34719          __words.asm:1004 (unused)
cforth_6d_61_63_72_6f_forth = $879A = 34714          __words.asm:997 (unused)
cforth_6d_61_63_72_6f_start = $879A = 34714          __words.asm:998 (unused)
cforth_6d_6f_64_end         = $859A = 34202          __words.asm:60 (unused)
cforth_6d_6f_64_forth       = $8593 = 34195          __words.asm:51 (unused)
cforth_6d_6f_64_start       = $8595 = 34197          __words.asm:53 (unused)
cforth_6d_6f_76_65_end      = $868E = 34446          __words.asm:485 (unused)
cforth_6d_6f_76_65_forth    = $866E = 34414          __words.asm:447 (unused)
cforth_6d_6f_76_65_start    = $8670 = 34416          __words.asm:449 (unused)
cforth_6e_65_67_61_74_65_end = $874E = 34638          __words.asm:818 (unused)
cforth_6e_65_67_61_74_65_forth = $8747 = 34631          __words.asm:806 (unused)
cforth_6e_65_67_61_74_65_start = $8747 = 34631          __words.asm:807 (unused)
cforth_6e_69_70_end         = $86C9 = 34505          __words.asm:591
cforth_6e_69_70_forth       = $86C6 = 34502          __words.asm:584 (unused)
cforth_6e_69_70_macro       = $86CB = 34507          __words.asm:593 (unused)
cforth_6e_69_70_start       = $86C8 = 34504          __words.asm:586
cforth_6f_72_21_end         = $865A = 34394          __words.asm:410 (unused)
cforth_6f_72_21_forth       = $864F = 34383          __words.asm:395 (unused)
cforth_6f_72_21_start       = $8651 = 34385          __words.asm:397 (unused)
cforth_6f_72_end            = $85C5 = 34245          __words.asm:140 (unused)
cforth_6f_72_forth          = $85BD = 34237          __words.asm:127 (unused)
cforth_6f_72_start          = $85BE = 34238          __words.asm:129 (unused)
cforth_6f_76_65_72_end      = $86D8 = 34520          __words.asm:612
cforth_6f_76_65_72_forth    = $86D3 = 34515          __words.asm:603 (unused)
cforth_6f_76_65_72_macro    = $86DA = 34522          __words.asm:614 (unused)
cforth_6f_76_65_72_start    = $86D5 = 34517          __words.asm:605
cforth_70_21_end            = $86A7 = 34471          __words.asm:526
cforth_70_21_forth          = $86A0 = 34464          __words.asm:515 (unused)
cforth_70_21_macro          = $86A8 = 34472          __words.asm:528 (unused)
cforth_70_21_start          = $86A1 = 34465          __words.asm:517
cforth_70_40_end            = $8697 = 34455          __words.asm:503
cforth_70_40_forth          = $8690 = 34448          __words.asm:493 (unused)
cforth_70_40_macro          = $8698 = 34456          __words.asm:505 (unused)
cforth_70_40_start          = $8691 = 34449          __words.asm:495
cforth_73_63_72_65_65_6e_21_end = $8600 = 34304          __words.asm:266 (unused)
cforth_73_63_72_65_65_6e_21_forth = $85F8 = 34296          __words.asm:256 (unused)
cforth_73_63_72_65_65_6e_21_start = $85FA = 34298          __words.asm:258 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end = $85F7 = 34295          __words.asm:248 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth = $85F4 = 34292          __words.asm:242 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start = $85F4 = 34292          __words.asm:243 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end = $85F3 = 34291          __words.asm:234 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth = $85ED = 34285          __words.asm:225 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start = $85EE = 34286          __words.asm:227 (unused)
cforth_73_77_61_70_end      = $86E7 = 34535          __words.asm:633
cforth_73_77_61_70_forth    = $86E2 = 34530          __words.asm:624 (unused)
cforth_73_77_61_70_macro    = $86E9 = 34537          __words.asm:635 (unused)
cforth_73_77_61_70_start    = $86E4 = 34532          __words.asm:626
w1                          = $8532 = 34098          compiler.asm:15


total time: 0.0097 sec.
no errors

              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-23 16:16:01
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop = $7EF0 									; Top of stack
7B08:         	EditBuffer = $7B08 									; 512 byte edit buffer to $7D10
7D40:         	COMWorkingStack = $7D40 							; working stack while compiling.
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	BootstrapPage = $22 								; bootstrap page
0024:         	FirstCodePage = $24 								; first page of actual code.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: D68B    			dw 		SystemInformationTable
              	
8006: ED7BE68B	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
800A: F3      			di											; disable interrupts
              		
800B: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
              			
800F: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8011: CDBC81  			call 	GFXMode
              	
8014: 3ADC8B  			ld 		a,(SIBootCodePage) 					; get the page to start
8017: CDFB80  			call 	PAGEInitialise
801A: 2ADA8B  			ld 		hl,(SIBootCodeAddress) 				; get boot address
801D: E9      			jp 		(hl) 								; and go there
              	
801E: F3      	HaltZ80:di 											; stop everything.
801F: 76      			halt
8020: 18FC    			jr 		HaltZ80
              	
              			include "support/commandline.asm"			; command line system
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		commandline.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		23rd November 2018
              	;		Purpose :	Command line handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								Command Line Warm Start
              	;
              	; ***************************************************************************************
              	
8022:         	StartSystem:
8022: CDB281  			call 	GFXClearScreen 						; clear the screen
8025: 219C80  			ld 		hl,SystemIntroMessage
8028: 11CDAB  			ld 		de,$ABCD
              	;
              	;					Come here with message to be shown in HL
              	;
802B:         	ErrorHandler: 										; handle error, message is at HL
802B: ED7BE68B			ld 		sp,(SIStack)						; reset stack
802F: D5      			push 	de 									; save DE for now
8030: E5      			push 	hl 									; save message
              	;
              	;		Clear bottom lines
              	;
8031: 2A468C  			ld 		hl,(DIScreenSize)					; clear the bottom 2 lines.
8034: 11C0FF  			ld 		de,-64
8037: 19      			add 	hl,de
8038:         	__CLIClearLoop:
8038: 112007  			ld 		de,$0720
803B: CDF181  			call 	GFXWriteCharacter
803E: 23      			inc 	hl
803F: 10F7    			djnz 	__CLIClearLoop
              	;
              	;		Display error message
              	;
8041: C1      			pop 	bc  								; error message into BC
8042: 2A468C  			ld 		hl,(DIScreenSize)  					; error message from bottom-48 onwards.
8045: 11D0FF  			ld 		de,-48
8048: 19      			add 	hl,de
8049:         	__CLIDisplayMessage:
8049: 0A      			ld 		a,(bc)
804A: 5F      			ld 		e,a
804B: 87      			add 	a,a
804C: 380B    			jr 		c,__CLIDisplayStack 				; bit 7 set
804E: 2809    			jr 		z,__CLIDisplayStack					; or zero
8050: 1602    			ld 		d,2
8052: CDF181  			call 	GFXWriteCharacter
8055: 23      			inc 	hl
8056: 03      			inc 	bc
8057: 18F0    			jr 		__CLIDisplayMessage
              	;
              	;		Show A and B
              	;
8059:         	__CLIDisplayStack: 									; display A and B
8059: 2A468C  			ld 		hl,(DIScreenSize)
805C: 01E0FF  			ld 		bc,-32
805F: 09      			add 	hl,bc
              	
              	;		Enter the command line
              	;
8060:         	__CLIEnterCommandLine:
8060: 2A468C  			ld 		hl,(DIScreenSize) 					; HL = start of entry
8063: 11C0FF  			ld 		de,-64
8066: 19      			add 	hl,de
8067: DD21FC8B			ld 		ix,CLIBuffer 						; IX = character position.
              	
806B:         	__CLILoop:
806B: 117F04  			ld 		de,$047F 							; write the cursor out
806E: CDF181  			call 	GFXWriteCharacter 					
8071: CDE380  			call 	CLIGetKey 							; key get
8074: FE0D    			cp 		13
8076: 281B    			jr		z,__CLIExecuteWord
8078: FE20    			cp 		32 									; execute on space or return
807A: 2817    			jr		z,__CLIExecuteWord
807C: 3818    			jr 		c,__CLILoopBack 					; any control clears word
              	
807E: DD7700  			ld 		(ix+0),a 							; put in buffer
8081: 5F      			ld 		e,a 								; display on screen
8082: 1606    			ld 		d,6
8084: CDF181  			call 	GFXWriteCharacter
8087: 7D      			ld 		a,l 								; check reached limit
8088: E61F    			and 	$1F
808A: FE1E    			cp 		$1E
808C: 28D2    			jr 		z,__CLIEnterCommandLine
808E: 23      			inc 	hl 									; go round again with one extra character
808F: DD23    			inc 	ix
8091: 18D8    			jr 		__CLILoop
              	;
              	;		Execute word in buffer
              	;
8093:         	__CLIExecuteWord:
8093: D1      			pop 	de
8094: DD01    			db 		$DD,$01
              	
8096:         	__CLILoopBack:
8096: 21A980  			ld 		hl,SystemEmptyMessage
8099: C32B80  			jp 		ErrorHandler
              	
809C:         	SystemIntroMessage:
809C: 466C6174			db 		"Flat 21-11-18"
80A0: 2032312D	
80A4: 31312D31	
80A8: 38      	
80A9:         	SystemEmptyMessage:
80A9: 20FF    			db 		" ",$FF
              	
              	;
              	;		Display DE in Decimal at HL
              	;
80AB:         	__CLIDisplayDecimal:
80AB: C5      			push 	bc
80AC: D5      			push 	de
80AD: E5      			push 	hl
80AE: D5      			push 	de
80AF: CB7A    			bit 	7,d
80B1: 2807    			jr 		z,__CLIDDNotNegative
80B3: 7A      			ld 		a,d
80B4: 2F      			cpl 
80B5: 57      			ld 		d,a
80B6: 7B      			ld 		a,e
80B7: 2F      			cpl 
80B8: 5F      			ld 		e,a
80B9: 13      			inc 	de
80BA:         	__CLIDDNotNegative:
80BA: CDCA80  			call 	__CLIDisplayRecursive
80BD: C1      			pop 	bc
80BE: 112D05  			ld 		de,$0500+'-'
80C1: CB78    			bit 	7,b
80C3: C4F181  			call 	nz,GFXWriteCharacter
80C6: E1      			pop 	hl
80C7: D1      			pop 	de
80C8: C1      			pop 	bc
80C9: C9      			ret
              	
80CA:         	__CLIDisplayRecursive:
80CA: E5      			push 	hl
80CB: 210A00  			ld 		hl,10
80CE: CD6D81  			call 	DIVDivideMod16
80D1: E3      			ex 		(sp),hl
80D2: 7A      			ld 		a,d
80D3: B3      			or 		e
80D4: C4CA80  			call 	nz,__CLIDisplayRecursive
80D7: D1      			pop 	de
80D8: 7B      			ld 		a,e
80D9: C630    			add 	a,48
80DB: 5F      			ld 		e,a
80DC: 1605    			ld 		d,5
80DE: CDF181  			call 	GFXWriteCharacter
80E1: 23      			inc 	hl
80E2: C9      			ret
              	;
              	;		Get keystroke into A (No repeating)
              	;
80E3:         	CLIGetKey:
80E3: C5      			push 	bc
80E4:         	__CLIWaitChange:
80E4: CDEC80  			call 	__CLIGetKeyboardChange
80E7: B7      			or 		a
80E8: 28FA    			jr 		z,__CLIWaitChange
80EA: C1      			pop 	bc
80EB: C9      			ret
              	
80EC:         	__CLIGetKeyboardChange:
80EC: CD5982  			call 	IOScanKeyboard
80EF: 47      			ld 		b,a
80F0: 3A3C8C  			ld 		a,(CLILastKeyboardState)
80F3: B8      			cp 		b
80F4: 28F6    			jr 		z,__CLIGetKeyboardChange
80F6: 78      			ld 		a,b
80F7: 323C8C  			ld 		(CLILastKeyboardState),a
80FA: C9      			ret
              	
              			
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
80FB:         	PAGEInitialise:
80FB: ED9256  			db 		$ED,$92,$56							; switch to page A
80FE: 3C      			inc 	a
80FF: ED9257  			db 		$ED,$92,$57
8102: 3D      			dec 	a
8103: 08      			ex 		af,af' 								; put page in A'
8104: 21EC8B  			ld 		hl,PAGEStackBase 					; reset the page stack
8107: 22EA8B  			ld 		(PAGEStackPointer),hl
810A: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
810B:         	PAGESwitch:
810B: F5      			push 	af
810C: E5      			push 	hl
              	
810D: F5      			push 	af 									; save A on stack
810E: 2AEA8B  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
8111: 08      			ex 		af,af'
8112: 77      			ld 		(hl),a
8113: 23      			inc 	hl
8114: 22EA8B  			ld 		(PAGEStackPointer),hl
              	
8117: F1      			pop 	af 									; restore new A
8118: ED9256  			db 		$ED,$92,$56							; switch to page A
811B: 3C      			inc 	a
811C: ED9257  			db 		$ED,$92,$57
811F: 3D      			dec 	a
8120: 08      			ex 		af,af' 								; put page in A'
              	
8121: E1      			pop 	hl
8122: F1      			pop 	af
8123: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8124:         	PAGERestore:
8124: F5      			push 	af
8125: E5      			push 	hl
8126: 2AEA8B  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
8129: 2B      			dec 	hl
812A: 7E      			ld 		a,(hl)
812B: 22EA8B  			ld 		(PAGEStackPointer),hl
812E: ED9256  			db 		$ED,$92,$56							; switch to page A
8131: 3C      			inc 	a
8132: ED9257  			db 		$ED,$92,$57
8135: 3D      			dec 	a
8136: 08      			ex 		af,af' 								; reset A'
8137: E1      			pop 	hl
8138: F1      			pop 	af
8139: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              		
813A:         	FARCompileByte:
813A: F5      			push 	af 									; save byte and HL
813B: E5      			push 	hl
813C: F5      			push 	af 									; save byte
813D: 3AD88B  			ld		a,(SINextFreeCodePage) 				; switch to page
8140: CD0B81  			call 	PAGESwitch
8143: 2AD68B  			ld 		hl,(SINextFreeCode) 				; write to memory location
8146: F1      			pop 	af
8147: 77      			ld 		(hl),a
8148: 23      			inc 	hl 									; bump memory location
8149: 22D68B  			ld 		(SINextFreeCode),hl 				; write back
814C: CD2481  			call 	PAGERestore
814F: E1      			pop 	hl 									; restore and exit
8150: F1      			pop 	af
8151: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
8152:         	FARCompileWord:
8152: F5      			push 	af 									; save byte and HL
8153: D5      			push 	de
8154: E5      			push 	hl
8155: EB      			ex 		de,hl 								; word into DE
8156: 3AD88B  			ld		a,(SINextFreeCodePage) 				; switch to page
8159: CD0B81  			call 	PAGESwitch
815C: 2AD68B  			ld 		hl,(SINextFreeCode) 				; write to memory location
815F: 73      			ld 		(hl),e
8160: 23      			inc 	hl 	
8161: 72      			ld 		(hl),d
8162: 23      			inc 	hl
8163: 22D68B  			ld 		(SINextFreeCode),hl 				; write back
8166: CD2481  			call 	PAGERestore
8169: E1      			pop 	hl
816A: D1      			pop 	de 									; restore and exit
816B: F1      			pop 	af
816C: C9      			ret
              												
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
816D:         	DIVDivideMod16:
              	
816D: C5      		push 	bc
816E: 42      		ld 		b,d 				; DE 
816F: 4B      		ld 		c,e
8170: EB      		ex 		de,hl
8171: 210000  		ld 		hl,0
8174: 78      		ld 		a,b
8175: 0608    		ld 		b,8
8177:         	Div16_Loop1:
8177: 17      		rla
8178: ED6A    		adc 	hl,hl
817A: ED52    		sbc 	hl,de
817C: 3001    		jr 		nc,Div16_NoAdd1
817E: 19      		add 	hl,de
817F:         	Div16_NoAdd1:
817F: 10F6    		djnz 	Div16_Loop1
8181: 17      		rla
8182: 2F      		cpl
8183: 47      		ld 		b,a
8184: 79      		ld 		a,c
8185: 48      		ld 		c,b
8186: 0608    		ld 		b,8
8188:         	Div16_Loop2:
8188: 17      		rla
8189: ED6A    		adc 	hl,hl
818B: ED52    		sbc 	hl,de
818D: 3001    		jr 		nc,Div16_NoAdd2
818F: 19      		add 	hl,de
8190:         	Div16_NoAdd2:
8190: 10F6    		djnz 	Div16_Loop2
8192: 17      		rla
8193: 2F      		cpl
8194: 51      		ld 		d,c
8195: 5F      		ld 		e,a
8196: C1      		pop 	bc
8197: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8198:         	MULTMultiply16:
8198: C5      			push 	bc
8199: D5      			push 	de
819A: 44      			ld 		b,h 							; get multipliers in DE/BC
819B: 4D      			ld 		c,l
819C: 210000  			ld 		hl,0 							; zero total
819F:         	__Core__Mult_Loop:
819F: CB41    			bit 	0,c 							; lsb of shifter is non-zero
81A1: 2801    			jr 		z,__Core__Mult_Shift
81A3: 19      			add 	hl,de 							; add adder to total
81A4:         	__Core__Mult_Shift:
81A4: CB38    			srl 	b 								; shift BC right.
81A6: CB19    			rr 		c
81A8: EB      			ex 		de,hl 							; shift DE left
81A9: 29      			add 	hl,hl
81AA: EB      			ex 		de,hl
81AB: 78      			ld 		a,b 							; loop back if BC is nonzero
81AC: B1      			or 		c
81AD: 20F0    			jr 		nz,__Core__Mult_Loop
81AF: D1      			pop 	de
81B0: C1      			pop 	bc
81B1: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
81B2:         	GFXClearScreen:
81B2: E5      			push 	hl 									; clear screen by reinitialising
81B3: 3A528C  			ld 		a,(DIScreenMode)
81B6: 6F      			ld 		l,a
81B7: CDBC81  			call 	GFXMode
81BA: E1      			pop 	hl
81BB: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
81BC:         	GFXMode:
81BC: C5      			push 	bc
81BD: D5      			push 	de
81BE: E5      			push 	hl
81BF: 7D      			ld 		a,l 								; save current mode
81C0: 32528C  			ld 		(DIScreenMode),a
81C3: 2D      			dec 	l 									; L = 1 mode layer2
81C4: 2808    			jr 		z,__GFXLayer2
81C6: 2D      			dec 	l
81C7: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
81C9: CD2683  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
81CC: 1808    			jr 		__GFXConfigure
              	
81CE:         	__GFXLayer2:
81CE: CD8983  			call 	GFXInitialiseLayer2
81D1: 1803    			jr 		__GFXConfigure
              	
81D3:         	__GFXLowRes:
81D3: CD2084  			call 	GFXInitialiseLowRes
              	
81D6:         	__GFXConfigure:
81D6: 7D      			ld 		a,l 								; save screen size
81D7: 323E8C  			ld 		(DIScreenWidth),a
81DA: 7C      			ld 		a,h
81DB: 32428C  			ld 		(DIScreenHeight),a
81DE: EB      			ex 		de,hl 								; save driver
81DF: 224A8C  			ld 		(DIScreenDriver),hl
              	
81E2: 6A      			ld 		l,d 								; put sizes in HL DE
81E3: 2600    			ld 		h,0
81E5: 1600    			ld 		d,0
81E7: CD9881  			call 	MULTMultiply16 						; multiply to get size and store.
81EA: 22468C  			ld 		(DIScreenSize),hl
              	
81ED: E1      			pop 	hl
81EE: D1      			pop 	de
81EF: C1      			pop 	bc
81F0: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
81F1:         	GFXWriteCharacter:
81F1: F5      			push 	af
81F2: C5      			push 	bc
81F3: D5      			push 	de
81F4: E5      			push 	hl
81F5: 01FF81  			ld 		bc,__GFXWCExit
81F8: C5      			push 	bc
81F9: ED4B4A8C			ld 		bc,(DIScreenDriver)
81FD: C5      			push 	bc
81FE: C9      			ret
81FF:         	__GFXWCExit:
81FF: E1      			pop 	hl
8200: D1      			pop 	de
8201: C1      			pop 	bc
8202: F1      			pop 	af
8203: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8204:         	GFXWriteHexWord:
8204: 3E06    			ld 		a,6 
8206:         	GFXWriteHexWordA:
8206: C5      			push 	bc
8207: D5      			push 	de
8208: E5      			push 	hl
8209: 4F      			ld 		c,a
820A: 7A      			ld 		a,d
820B: D5      			push 	de
820C: CD1882  			call 	__GFXWHByte
820F: D1      			pop 	de
8210: 7B      			ld 		a,e
8211: CD1882  			call	__GFXWHByte
8214: E1      			pop 	hl
8215: D1      			pop 	de
8216: C1      			pop 	bc
8217: C9      			ret
              	
8218:         	__GFXWHByte:
8218: F5      			push 	af
8219: CB0F    			rrc 	a
821B: CB0F    			rrc		a
821D: CB0F    			rrc 	a
821F: CB0F    			rrc 	a
8221: CD2582  			call 	__GFXWHNibble
8224: F1      			pop 	af
8225:         	__GFXWHNibble:
8225: 51      			ld 		d,c
8226: E60F    			and 	15
8228: FE0A    			cp 		10
822A: 3802    			jr 		c,__GFXWHDigit
822C: C607    			add		a,7
822E:         	__GFXWHDigit:
822E: C630    			add 	a,48
8230: 5F      			ld 		e,a
8231: CDF181  			call 	GFXWriteCharacter
8234: 23      			inc 	hl
8235: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8236:         	GFXGetFontGraphicDE:
8236: F5      			push 	af
8237: E5      			push 	hl
8238: E67F    			and 	$7F 								; bits 0-6 only.
823A: D620    			sub 	32
823C: 6F      			ld 		l,a 								; put in HL
823D: 2600    			ld 		h,0
823F: 29      			add 	hl,hl 								; x 8
8240: 29      			add 	hl,hl
8241: 29      			add 	hl,hl
8242: ED5B4E8C			ld 		de,(DIFontBase) 					; add the font base.
8246: 19      			add 	hl,de
8247: EB      			ex 		de,hl 								; put in DE (font address)
              	
8248: E1      			pop 	hl
8249: F1      			pop 	af
824A: FE7F    			cp 		$7F 								; map $7F to the prompt character
824C: C0      			ret 	nz
824D: 115182  			ld 		de,__GFXPromptCharacter
8250: C9      			ret
              	
8251:         	__GFXPromptCharacter:
8251: FC7E3F1F			db 		$FC,$7E,$3F,$1F
8255: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8259:         	IOScanKeyboard:
8259: C5      			push 	bc
825A: D5      			push 	de
825B: E5      			push 	hl
              	
825C: 21AE82  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
825F: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8261: 06FE    			ld 		b,$FE
8263: ED78    			in 		a,(c)
8265: CB47    			bit 	0,a
8267: 2005    			jr 		nz,__kr1
8269: 21FE82  			ld 		hl,__kr_shift_table
826C: 180B    			jr 		__kr2
826E:         	__kr1:
826E: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8270: ED78    			in 		a,(c)
8272: CB4F    			bit 	1,a
8274: 2003    			jr 		nz,__kr2
8276: 21D682  			ld 		hl,__kr_symbol_shift_table
8279:         	__kr2:
              	
8279: 1EFE    			ld 		e,$FE 								; scan pattern.
827B: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
827C: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
827E: FEFE    			cp 		$FE
8280: 2808    			jr 		z,___kr4
8282: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8284: FE7F    			cp 		$7F
8286: 2802    			jr 		z,___kr4
8288: 161F    			ld 		d,$01F 								; check all bits.
828A:         	___kr4:
828A: 43      			ld 		b,e 								; scan the keyboard
828B: 0EFE    			ld 		c,$FE
828D: ED78    			in 		a,(c)
828F: 2F      			cpl 										; make that active high.
8290: A2      			and 	d  									; and with check value.
8291: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
8293: 23      			inc 	hl 									; next set of keyboard characters
8294: 23      			inc 	hl
8295: 23      			inc 	hl
8296: 23      			inc 	hl
8297: 23      			inc 	hl
              	
8298: 7B      			ld 		a,e 								; get pattern
8299: 87      			add 	a,a 								; shift left
829A: F601    			or 		1 									; set bit 1.
829C: 5F      			ld 		e,a
              	
829D: FEFF    			cp 		$FF 								; finished when all 1's.
829F: 20DA    			jr 		nz,__kr3 
82A1: AF      			xor 	a
82A2: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
82A4:         	__kr_keypressed:
82A4: 23      			inc 	hl  								; shift right until carry set
82A5: 1F      			rra
82A6: 30FC    			jr 		nc,__kr_keypressed
82A8: 2B      			dec 	hl 									; undo the last inc hl
82A9: 7E      			ld 		a,(hl) 								; get the character number.
82AA:         	__kr_exit:
82AA: E1      			pop 	hl
82AB: D1      			pop 	de
82AC: C1      			pop 	bc
82AD: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
82AE:         	__kr_no_shift_table:
82AE: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
82B2: 76617364	
82B6: 6667    	
82B8: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
82BC: 74313233	
82C0: 3435    	
82C2: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
82C6: 36706F69	
82CA: 7579    	
82CC: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
82D0: 6820006D	
82D4: 6E62    	
              	
82D6:         	__kr_symbol_shift_table:
82D6: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
82DA: 2F7E7C5C	
82DE: 7B7D    	
82E0: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
82E4: 3E214023	
82E8: 2425    	
82EA: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
82EE: 26223B00	
82F2: 5D5B    	
82F4: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
82F8: 5E20002E	
82FC: 2C2A    	
              	
82FE:         	__kr_shift_table:
82FE: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8302: 2F7E7C5C	
8306: 7B7D    	
8308: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
830C: 3E214023	
8310: 2414    	
8312: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8316: 15223B00	
831A: 5D5B    	
831C: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8320: 5E20002E	
8324: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8326:         	GFXInitialise48k:
8326: F5      			push 	af 									; save registers
8327: C5      			push 	bc
              	
8328: 013B12  			ld 		bc,$123B 							; Layer 2 access port
832B: 3E00    			ld 		a,0 								; disable Layer 2
832D: ED79    			out 	(c),a
832F: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8333: 210040  			ld 		hl,$4000 							; clear pixel memory
8336: 3600    	__cs1:	ld 		(hl),0
8338: 23      			inc 	hl
8339: 7C      			ld 		a,h
833A: FE58    			cp 		$58
833C: 20F8    			jr 		nz,__cs1
833E: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8340: 23      			inc 	hl
8341: 7C      			ld 		a,h
8342: FE5B    			cp 		$5B
8344: 20F8    			jr 		nz,__cs2	
8346: AF      			xor 	a 									; border off
8347: D3FE    			out 	($FE),a
8349: C1      			pop 	bc
834A: F1      			pop 	af
834B: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
834E: 115283  			ld 		de,GFXPrintCharacter48k
8351: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8352:         	GFXPrintCharacter48k:
8352: F5      			push 	af 									; save registers
8353: C5      			push 	bc
8354: D5      			push 	de
8355: E5      			push 	hl
              	
8356: 43      			ld 		b,e 								; character in B
8357: 7C      			ld 		a,h 								; check range.
8358: FE03    			cp 		3
835A: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
835C: E5      			push 	hl 									; save position.
835D: 7C      			ld 		a,h
835E: C658    			add 	$58
8360: 67      			ld 		h,a
              	
8361: 7A      			ld 		a,d 								; get current colour
8362: E607    			and 	7  									; mask 0..2
8364: F640    			or 		$40  								; make bright
8366: 77      			ld 		(hl),a 								; store it.	
8367: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8368: D5      			push 	de
8369: EB      			ex 		de,hl
836A: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
836B: 7A      			ld 		a,d
836C: E603    			and 	3
836E: 87      			add 	a,a
836F: 87      			add 	a,a
8370: 87      			add 	a,a
8371: F640    			or 		$40
8373: 67      			ld 		h,a
8374: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8375: 78      			ld 		a,b 								; get character
8376: CD3682  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
8379: 78      			ld 		a,b
837A: 0608    			ld 		b,8 								; copy 8 characters
837C: 0E00    			ld 		c,0 								; XOR value 0
837E:         	__ZXWCCopy:
837E: 1A      			ld 		a,(de)								; get font data
837F: 77      			ld 		(hl),a 								; write back
8380: 24      			inc 	h 									; bump pointers
8381: 13      			inc 	de
8382: 10FA    			djnz 	__ZXWCCopy 							; do B times.
8384:         	__ZXWCExit:
8384: E1      			pop 	hl 									; restore and exit
8385: D1      			pop 	de
8386: C1      			pop 	bc
8387: F1      			pop 	af
8388: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
8389:         	GFXInitialiseLayer2:
8389: F5      			push 	af
838A: C5      			push 	bc
838B: D5      			push 	de
838C: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8390: 1E02    			ld 		e,2 								; 3 banks to erase
8392:         	L2PClear:
8392: 7B      			ld 		a,e 								; put bank number in bits 6/7
8393: CB0F    			rrc 	a
8395: CB0F    			rrc 	a
8397: F603    			or 		2+1 								; shadow on, visible, enable write paging
8399: 013B12  			ld 		bc,$123B 							; out to layer 2 port
839C: ED79    			out 	(c),a
839E: 210040  			ld 		hl,$4000 							; erase the bank to $00 
83A1: 55      			ld 		d,l 								; D = 0, slightly quicker.
83A2:         	L2PClearBank: 										; assume default palette :)
83A2: 2B      			dec 	hl
83A3: 72      			ld 		(hl),d
83A4: 7C      			ld 		a,h
83A5: B5      			or 		l
83A6: 20FA    			jr		nz,L2PClearBank
83A8: 1D      			dec 	e
83A9: F29283  			jp 		p,L2PClear
              	
83AC: AF      			xor 	a
83AD: D3FE    			out 	($FE),a
              	
83AF: D1      			pop 	de
83B0: C1      			pop 	bc
83B1: F1      			pop 	af
83B2: 212018  			ld 		hl,$1820 							; still 32 x 24 	
83B5: 11B983  			ld 		de,GFXPrintCharacterLayer2
83B8: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
83B9:         	GFXPrintCharacterLayer2:
83B9: F5      			push 	af
83BA: C5      			push 	bc
83BB: D5      			push 	de
83BC: E5      			push 	hl
83BD: DDE5    			push 	ix
              	
83BF: 43      			ld 		b,e 								; save A temporarily
83C0: 78      			ld 		a,b
              	
83C1: 7C      			ld 		a,h
83C2: FE03    			cp 		3
83C4: 3053    			jr 		nc,__L2Exit 						; check position in range
83C6: 78      			ld 		a,b
              	
83C7: F5      			push 	af 	
83C8: AF      			xor 	a 									; convert colour in C to palette index
83C9: CB42    			bit 	0,d 								; (assumes standard palette)
83CB: 2802    			jr 		z,__L2Not1
83CD: F603    			or 		$03
83CF:         	__L2Not1:
83CF: CB52    			bit 	2,d
83D1: 2802    			jr 		z,__L2Not2
83D3: F61C    			or 		$1C
83D5:         	__L2Not2:
83D5: CB4A    			bit 	1,d
83D7: 2802    			jr 		z,__L2Not3
83D9: F6C0    			or 		$C0
83DB:         	__L2Not3:
83DB: 4F      			ld 		c,a 								; C is foreground
83DC: F1      			pop 	af 									; restore char
              	
83DD: CD3682  			call 	GFXGetFontGraphicDE 				; font offset in DE
83E0: D5      			push 	de 									; transfer to IX
83E1: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
83E3: C5      			push 	bc
83E4: 7C      			ld  	a,h 								; this is the page number.
83E5: CB0F    			rrc 	a
83E7: CB0F    			rrc 	a
83E9: E6C0    			and 	$C0 								; in bits 6 & 7
83EB: F603    			or 		$03 								; shadow on, visible, enable write pagin.
83ED: 013B12  			ld 		bc,$123B 							; out to layer 2 port
83F0: ED79    			out 	(c),a
83F2: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
83F3: EB      			ex 		de,hl
83F4: 6B      			ld 		l,e
83F5: 2600    			ld 		h,0
83F7: 29      			add 	hl,hl 								
83F8: 29      			add 	hl,hl
83F9: 29      			add 	hl,hl
83FA: CB24    			sla 	h
83FC: CB24    			sla 	h
83FE: CB24    			sla 	h
              	
8400: 1E08    			ld 		e,8 								; do 8 rows
8402:         	__L2Outer:
8402: E5      			push 	hl 									; save start
8403: 1608    			ld 		d,8 								; do 8 columns
8405: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8408: DD23    			inc 	ix
840A:         	__L2Loop:
840A: 3600    			ld 		(hl),0 								; background
840C: 87      			add 	a,a 								; shift pattern left
840D: 3001    			jr 		nc,__L2NotSet
840F: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8410:         	__L2NotSet:
8410: 23      			inc 	hl
8411: 15      			dec 	d 									; do a row
8412: 20F6    			jr 		nz,	__L2Loop
8414: E1      			pop 	hl 									; restore, go 256 bytes down.
8415: 24      			inc 	h
8416: 1D      			dec 	e 									; do 8 rows
8417: 20E9    			jr 		nz,__L2Outer	
8419:         	__L2Exit:
8419: DDE1    			pop 	ix
841B: E1      			pop 	hl
841C: D1      			pop 	de
841D: C1      			pop 	bc
841E: F1      			pop 	af
841F: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8420:         	GFXInitialiseLowRes:
8420: F5      			push 	af
8421: C5      			push 	bc
8422: D5      			push 	de
              	
8423: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8427: AF      			xor 	a 									; layer 2 off.
8428: 013B12  			ld 		bc,$123B 							; out to layer 2 port
842B: ED79    			out 	(c),a
              	
842D: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8430: 110060  			ld 		de,$6000
8433:         	LowClearScreen: 									; assume default palette :)
8433: AF      			xor 	a
8434: 77      			ld 		(hl),a
8435: 12      			ld 		(de),a
8436: 23      			inc 	hl
8437: 13      			inc 	de
8438: 7C      			ld 		a,h
8439: FE58    			cp 		$58
843B: 20F6    			jr		nz,LowClearScreen
843D: AF      			xor 	a
843E: D3FE    			out 	($FE),a
8440: D1      			pop 	de
8441: C1      			pop 	bc
8442: F1      			pop 	af
8443: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8446: 114A84  			ld 		de,GFXPrintCharacterLowRes
8449: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
844A:         	GFXPrintCharacterLowRes:
844A: F5      			push 	af
844B: C5      			push 	bc
844C: D5      			push 	de
844D: E5      			push 	hl
844E: DDE5    			push 	ix
              	
8450: 43      			ld 		b,e 								; save character in B
              	
8451: 29      			add 	hl,hl
8452: 29      			add 	hl,hl
8453: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8454: FE03    			cp 		3
8456: 3046    			jr 		nc,__LPExit
              	
8458: 7A      			ld 		a,d 								; only lower 3 bits of colour
8459: E607    			and 	7
845B: 4F      			ld 		c,a 								; C is foreground
              	
845C: 78      			ld 		a,b 								; get char back
845D: CD3682  			call 	GFXGetFontGraphicDE
8460: D5      			push 	de
8461: DDE1    			pop 	ix
              	
8463: EB      			ex 		de,hl
8464: 7B      			ld 		a,e 								; put DE => HL
8465: E6C0    			and 	192 								; these are part of Y
8467: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8468: 62      			ld 		h,d		
8469: 29      			add 	hl,hl
846A: 29      			add 	hl,hl
846B: 29      			add 	hl,hl
846C: 29      			add 	hl,hl
846D: CBF4    			set 	6,h 								; put into $4000 range
              	
846F: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
8471: A3      			and 	e 									; and with E, gives X position
8472: 87      			add 	a,a 								; now multiplied by 8.
8473: 5F      			ld 		e,a 								; DE is x offset.
8474: 1600    			ld 		d,0  
              	
8476: 19      			add 	hl,de
8477: 7C      			ld 		a,h
8478: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
847A: 3804    			jr 		c,__LowNotLower2
847C: 110008  			ld 		de,$0800
847F: 19      			add 	hl,de
8480:         	__LowNotLower2:
8480: 1E08    			ld 		e,8 								; do 8 rows
8482:         	__LowOuter:
8482: E5      			push 	hl 									; save start
8483: 1608    			ld 		d,8 								; do 8 columns
8485: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8488: DD23    			inc 	ix
848A:         	__LowLoop:
848A: 3600    			ld 		(hl),0 								; background
848C: 87      			add 	a,a 								; shift pattern left
848D: 3001    			jr 		nc,__LowNotSet
848F: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8490:         	__LowNotSet:
8490: 2C      			inc 	l
8491: 15      			dec 	d 									; do a row
8492: 20F6    			jr 		nz,	__LowLoop
8494: E1      			pop 	hl 									; restore, go 256 bytes down.
8495: D5      			push 	de
8496: 118000  			ld 		de,128
8499: 19      			add 	hl,de
849A: D1      			pop 	de
849B: 1D      			dec 	e 									; do 8 rows
849C: 20E4    			jr 		nz,__LowOuter	
849E:         	__LPExit:
849E: DDE1    			pop 	ix
84A0: E1      			pop 	hl
84A1: D1      			pop 	de
84A2: C1      			pop 	bc
84A3: F1      			pop 	af
84A4: C9      			ret
              	
              	
              			include "compiler/utilities.asm" 			; compiler utilities
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Compiler Utilities
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;					Generic macro expansion. HL points to code, B to count
              	;
              	; ***************************************************************************************
              	
84A5:         	MacroExpand:
84A5: 7E      			ld 		a,(hl)
84A6: CD3A81  			call 	FARCompileByte
84A9: 23      			inc 	hl
84AA: 10F9    			djnz 	MacroExpand
84AC: C9      			ret
              			include "compiler/loader.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		loader.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Source loader
              	;		Date : 		22nd November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;									Load the bootstrap page
              	;
              	; ********************************************************************************************************
              	
84AD:         	LOADBootstrap:
84AD: 3E22    			ld 		a,BootstrapPage 					; set the current page to bootstrap page.
84AF: CD0B81  			call 	PAGESwitch
84B2: DD2100C0			ld 		ix,$C000 							; current section being loaded.
84B6: 0E00    			ld 		c,0 								; used to display progress.
              	
84B8: 11CDAB  			ld 		de,$ABCD
              	;
              	;		Once here for every 'chunk'. We copy the text to the editor buffer in 
              	;		chunks (currently 512 bytes) until we've done all 16k of the page.
              	;
84BB:         	__LOADBootLoop:
84BB: DDE5    			push 	ix 									; HL = Current Section
84BD: E1      			pop 	hl
84BE: C5      			push 	bc
84BF: D5      			push 	de
84C0: 11087B  			ld 		de,EditBuffer  						; Copy to edit buffer 1/2k (512 bytes) of code.
84C3: 010002  			ld 		bc,512
84C6: EDB0    			ldir 	
84C8: D1      			pop 	de
84C9: C1      			pop 	bc
              	
84CA: D5      			push 	de
84CB: 2600    			ld 		h,0 								; Progress prompt.
84CD: DD7C    			ld 		a,ixh 								; derive position.
84CF: CB0F    			rrc 	a
84D1: E61F    			and 	31
84D3: 6F      			ld 		l,a
84D4: 112A02  			ld 		de,$022A
84D7: CDF181  			call 	GFXWriteCharacter
84DA: 0C      			inc 	c
84DB: D1      			pop 	de
              	
84DC: 21087B  			ld 		hl,EditBuffer
84DF:         	__LOADScanLoop:
84DF: 7E      			ld 		a,(hl) 								; look at tage
84E0: FEFF    			cp 		$FF 								; was it $FF ?
84E2: 280A    			jr 		z,__LOADScanExit 					; if so, we are done.
              	
84E4: CD0486  			call 	COMCompileExecute 					; execute text at HL
              	
84E7:         	__LOADNextWord: 									; look for the next bit 7 high.
84E7: 23      			inc 	hl 									; advance forward to next word.
84E8: CB7E    			bit		7,(hl)
84EA: 28FB    			jr 		z,__LOADNextWord
84EC: 18F1    			jr 		__LOADScanLoop
              	
84EE:         	__LOADScanExit:
84EE: 010002  			ld 		bc,512 								; add 512 size to IX
84F1: DD09    			add 	ix,bc
84F3: DDE5    			push 	ix									; until wrapped round to $0000
84F5: C1      			pop 	bc
84F6: CB78    			bit 	7,b
84F8: 20C1    			jr 		nz,__LOADBootLoop
              	
84FA:         	__LOADEnds:
84FA: CD2481  			call 	PAGERestore 						; restore page
84FD: C32280  			jp 		StartSystem 
              	
              			include "compiler/constant.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at HL to constant in HL. DE 0, Carry Clear if true
              	;									Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
8500:         	CONSTConvert:
8500: C5      		push 	bc
              	
8501: EB      		ex 		de,hl 									; string in DE.
8502: 210000  		ld 		hl,$0000								; result in HL.
8505: 13      		inc 	de 										; skip over the tag
8506: 0E00    		ld 		c,0										; C is the negate flag
8508:         	__CONConvLoop:
8508: 1A      		ld 		a,(de)									; get next character
8509: 13      		inc 	de
              	
850A: FE30    		cp 		'0'										; must be 0-9 otherwise
850C: 3830    		jr 		c,__CONConFail
850E: FE3A    		cp 		'9'+1
8510: 302C    		jr 		nc,__CONConFail
              	
8512: C5      		push 	bc
8513: E5      		push 	hl 										; HL -> BC
8514: C1      		pop 	bc
8515: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
8516: 29      		add 	hl,hl
8517: 09      		add 	hl,bc 						
8518: 29      		add 	hl,hl 									; HL := HL * 10
8519: 0600    		ld 		b,0 									; add the digit into HL
851B: E60F    		and 	15
851D: 4F      		ld 		c,a
851E: 09      		add 	hl,bc
851F: C1      		pop 	bc
              	
8520: 1A      		ld 		a,(de) 									; check ends in -
8521: FE2D    		cp 		'-'									
8523: 2806    		jr 		z,__CONMinusExit 						
8525: CB7F    		bit 	7,a 									; check done everything.
8527: 28DF    		jr 		z,__CONConvLoop
8529: 180D    		jr 		__CONNotNegative
              	
852B:         	__CONMinusExit:
852B: 13      		inc 	de 										; if not the last, it's an error.
852C: 1A      		ld 		a,(de)
852D: CB7F    		bit 	7,a
852F: 280D    		jr		z,__CONConFail
              	
8531: 7C      		ld 		a,h 									; negate HL
8532: 2F      		cpl 	
8533: 67      		ld 		h,a
8534: 7D      		ld 		a,l
8535: 2F      		cpl
8536: 6F      		ld 		l,a
8537: 23      		inc 	hl
              	
8538:         	__CONNotNegative:
8538: 110000  		ld 		de,$0000
853B: AF      		xor 	a 										; clear carry
853C: C1      		pop 	bc
853D: C9      		ret
              	
853E:         	__CONConFail: 										; didn't convert
853E: 21FFFF  		ld 		hl,$FFFF
8541: 11FFFF  		ld 		de,$FFFF
8544: 37      		scf
8545: C1      		pop 	bc
8546: C9      		ret
              	
              		
              			include "compiler/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at HL ends in $80-$FF, uses the current page/pointer
              	;		values. A identifies whether MACRO ($80) or FORTH $(00)
              	;
              	; ***********************************************************************************************
              	
8547:         	DICTAddWord:
8547: F5      			push 	af 									; registers to stack.
8548: C5      			push 	bc
8549: D5      			push 	de
854A: E5      			push	hl
854B: DDE5    			push 	ix
854D: E5      			push 	hl 									
854E: 06FF    			ld 		b,-1								; put length of string in B
8550:         	__DICTAddGetLength:
8550: 23      			inc 	hl
8551: 04      			inc 	b
8552: CB7E    			bit 	7,(hl)
8554: 28FA    			jr 		z,__DICTAddGetLength
8556: E1      			pop 	hl
              	
8557: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
8559: CD0B81  			call 	PAGESwitch
              	
855C: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
8560:         	__DICTFindEndDictionary:
8560: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
8563: B7      			or 		a
8564: 2807    			jr 		z,__DICTCreateEntry
8566: 5F      			ld 		e,a
8567: 1600    			ld 		d,0
8569: DD19    			add 	ix,de
856B: 18F3    			jr 		__DICTFindEndDictionary
              	
856D:         	__DICTCreateEntry:
856D: 78      			ld 		a,b
856E: C605    			add 	a,5
8570: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
8573: 3AD88B  			ld 		a,(SINextFreeCodePage)				; code page
8576: DD7701  			ld 		(ix+1),a
8579: ED5BD68B			ld 		de,(SINextFreeCode)					; code address
857D: DD7302  			ld 		(ix+2),e
8580: DD7203  			ld 		(ix+3),d 
              	
8583: 79      			ld 		a,c 								; get FORTH/MACRO flag
8584: E680    			and 	$80
8586: B0      			or 		b 									; or length in
8587: DD7704  			ld 		(ix+4),a 							; length (0..5) forth/macro (7)
              	
858A: EB      			ex 		de,hl 								; put name in DE
858B: 13      			inc 	de 									; skip over tag.
858C:         	__DICTAddCopy:
858C: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
858D: DD7705  			ld 		(ix+5),a
8590: DD23    			inc 	ix 									
8592: 13      			inc 	de
8593: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
8595: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
8599: CD2481  			call 	PAGERestore
859C: DDE1    			pop 	ix 									; restore and exit
859E: E1      			pop 	hl
859F: D1      	 		pop 	de
85A0: C1      			pop 	bc
85A1: F1      			pop 	af
85A2: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. HL points to name. C is the mask for flag/macro.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
85A3:         	DICTFindWord:
85A3: C5      			push 	bc 								; save registers - return in EHL Carry
85A4: DDE5    			push 	ix
              	
85A6: 4F      			ld 		c,a 							; macro forth flag in C
85A7: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
85A9: CD0B81  			call 	PAGESwitch
              	
85AC: DD2100C0			ld 		ix,$C000 						; dictionary start			
85B0:         	__DICTFindMainLoop:
85B0: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
85B3: B7      			or 		a
85B4: 283E    			jr 		z,__DICTFindFail
              	
85B6: DD7E04  			ld 		a,(ix+4) 						; get the flag/macro (and length) byte
85B9: A9      			xor 	c 								; xor with the mask
85BA: E680    			and 	$80 							; only interested in bit 7
85BC: 202D    			jr 		nz,__DICTFindNext 				; so if different, go to next.
              	
85BE: DDE5    			push 	ix 								; save pointers on stack.
85C0: E5      			push 	hl 
              	
85C1: DD7E04  			ld 		a,(ix+4) 						; characters to compare
85C4: E63F    			and 	$3F
85C6: 47      			ld 		b,a
85C7: 23      			inc 	hl 								; skip over tag
85C8:         	__DICTCheckName:
85C8: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
85CB: BE      			cp 		(hl) 							; compare vs the matching character.
85CC: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
85CE: 23      			inc 	hl 								; HL point to next character
85CF: DD23    			inc 	ix
85D1: 10F5    			djnz 	__DICTCheckName
              	
85D3: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
85D5: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
85D7: E1      			pop 	hl 								; Found a match. restore HL and IX
85D8: DDE1    			pop 	ix
85DA: 1600    			ld 		d,0 							; D = 0 for neatness.
85DC: DD5E01  			ld 		e,(ix+1)						; E = page
85DF: DD6E02  			ld 		l,(ix+2)						; HL = address
85E2: DD6603  			ld 		h,(ix+3)		
85E5: AF      			xor 	a 								; clear the carry flag.
85E6: 1813    			jr 		__DICTFindExit
              	
85E8:         	__DICTFindNoMatch:								; this one doesn't match.
85E8: E1      			pop 	hl 								; restore HL and IX
85E9: DDE1    			pop 	ix
85EB:         	__DICTFindNext:
85EB: DD5E00  			ld 		e,(ix+0)						; DE = offset
85EE: 1600    			ld 		d,$00
85F0: DD19    			add 	ix,de 							; next word.
85F2: 18BC    			jr 		__DICTFindMainLoop				; and try the next one.
              	
85F4:         	__DICTFindFail:
85F4: 110000  			ld 		de,$0000 						; return all zeros.
85F7: 210000  			ld 		hl,$0000
85FA: 37      			scf 									; set carry flag
85FB:         	__DICTFindExit:
85FB: F5      			push 	af
85FC: CD2481  			call 	PAGERestore
85FF: F1      			pop 	af
8600: DDE1    			pop 	ix 								; pop registers and return.
8602: C1      			pop 	bc
8603: C9      			ret
              	
              			include "compiler/compiler.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Compile/Execute code.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;		On entry HL points to a word, which is a tag followed by text, followed by
              	; 		a byte with bit 7 set. The stack is in (SP) DE as usual, this is a callable
              	; 		word. It should *not* be used by the interpreter as it is *not* re-entrant.
              	;
              	; ***************************************************************************************
              	
8604:         	COMCompileExecute:
8604: C1      		pop 	bc 										; get the return address.
8605: ED433386		ld 		(__COMCEOut+1),bc 						; save the return address
              	
8609: D5      		push 	de 										; save DE on the stack, so this is a normal stack (no DE cache)
860A: ED732F86		ld 		(__COMCELoadSP+1),sp 					; save the stack pointer to be reloaded
              	
860E: 31407D  		ld 		sp,COMWorkingStack 						; we have a new SP for stuff.
8611: E5      		push 	hl
8612: DDE5    		push 	ix
              	
8614: 44      		ld 		b,h 									; put the word address in BC
8615: 4D      		ld 		c,l
8616: 7E      		ld 		a,(hl) 									; get the tag
8617: FE84    		cp 		$84 									; is it green (execute macro, compile forth,compile number)
8619: CA3586  		jp 		z,__COMGreenWord
861C: FE85    		cp 		$85										; is it cyan (compile macro)
861E: CA5286  		jp 		z,__COMCyanWord 						
8621: FE86    		cp 		$86 									; is it yellow (execute)
8623: 2838    		jr 		z,__COMYellowWord
              	
              	; =======================================================================================
              	;
              	;		Come her on error.
              	;
              	; =======================================================================================
              	
8625:         	__COMError:
8625: 60      		ld 		h,b
8626: 69      		ld 		l,c
8627: 23      		inc 	hl
8628: C32B80  		jp 		ErrorHandler
              	
              	; =======================================================================================
              	;
              	;		Come here to exit
              	;
              	; =======================================================================================
              	
862B:         	__COMExit:
862B: DDE1    		pop 	ix
862D: E1      		pop 	hl
862E:         	__COMCELoadSP:
862E: 310000  		ld 		sp,$0000 								; reload the complete stack
8631: D1      		pop 	de 										; make it a DE cached stack.
8632:         	__COMCEOut:
8632: C30000  		jp 		$0000 									; effectively, RET
              	
              	; =======================================================================================
              	;
              	;		This is a green word. If it is in macro, then we run that word. If it is in
              	; 		FORTH, we compile that word. If it is a number, compile that code.
              	;
              	; =======================================================================================
              	
8635:         	__COMGreenWord:
8635: 3E80    		ld 		a,$80 									; is it in the MACRO dictionary
8637: CDA385  		call 	DICTFindWord 
863A: D27E86  		jp 		nc,__COMExecuteEHL 					; execute the word
              	
863D: 60      		ld 		h,b 									; is it in the FORTH dictionary
863E: 69      		ld 		l,c
863F: 3E00    		ld 		a,$00 
8641: CDA385  		call 	DICTFindWord
8644: D2AD86  		jp 		nc,__COMCompileEHL 						; compile a call to EHL
              	
8647: 60      		ld 		h,b 									; is it a constant
8648: 69      		ld 		l,c
8649: CD0085  		call 	CONSTConvert
864C: DA2586  		jp 		c,__COMError 							; if not, then error
864F: C39D86  		jp 		__COMCompileConstant
              	
              	; =======================================================================================
              	;
              	;		This is a cyan word. If it is in macro, then we compile that word. If it is in
              	; 		FORTH, we compile that word.
              	;
              	; =======================================================================================
              	
8652:         	__COMCyanWord:
8652: 3E80    		ld 		a,$80 									; is it in the MACRO dictionary
8654: CDA385  		call 	DICTFindWord 
8657: D2AD86  		jp 		nc,__COMCompileEHL 						; execute the word
865A: C32586  		jp 		__COMError 								; if not, then error
              	
              	; =======================================================================================
              	;
              	;		This is a yellow word. If it is in FORTH, run it. If it is a number, 
              	;		push it on the stack.
              	;
              	; =======================================================================================
              	
865D:         	__COMYellowWord:
865D: 3E00    		ld 		a,$00									; is it in FORTH ?
865F: CDA385  		call 	DICTFindWord
8662: D27E86  		jp 		nc,__COMExecuteEHL
              	
8665: 60      		ld 		h,b 									; is it a constant
8666: 69      		ld 		l,c
8667: CD0085  		call 	CONSTConvert
866A: DA2586  		jp 		c,__COMError 							; if not, then error
866D: C37086  		jp 		__COMPushHLOnStack
              	
              	; =======================================================================================
              	;
              	;							Push HL on the (saved) stack
              	;
              	; =======================================================================================
              	
8670:         	__COMPushHLOnStack:
8670: EB      		ex 		de,hl 									; put number in DE
8671: 2A2F86  		ld 		hl,(__COMCELoadSP+1) 					; retrieve stack
8674: 2B      		dec 	hl 										; push DE on manually.
8675: 72      		ld 		(hl),d
8676: 2B      		dec 	hl
8677: 73      		ld 		(hl),e
8678: 222F86  		ld 		(__COMCELoadSP+1),hl 					; and write the stack return value back
867B: C32B86  		jp 		__COMExit
              	
              	; =======================================================================================
              	;
              	;								Execute the word in EHL
              	;
              	; =======================================================================================
              	
867E:         	__COMExecuteEHL:
867E: 7B      		ld 		a,e 									; switch to page E
867F: CD0B81  		call 	PAGESwitch
8682: ED739486		ld 		(__COMXReloadSP+1),sp 					; set to reload that stack.
8686: ED7B2F86		ld 		sp,(__COMCELoadSP+1) 					; reload the stack. 
868A: D1      		pop 	de 										; fix up DE
868B: CD9C86  		call 	__COMCallHL
868E: D5      		push 	de 										; push DE, make the stack uncached
868F: ED732F86		ld 		(__COMCELoadSP+1),sp 					; update the return stack value.
8693:         	__COMXReloadSP:
8693: 310000  		ld 		sp,$0000 								; reload the working stack.
8696: CD2481  		call 	PAGERestore 							; restore original page and exit.
8699: C32B86  		jp 		__COMExit
              	
869C:         	__COMCallHL:
869C: E9      		jp 		(hl)
              	
              	; =======================================================================================
              	;
              	;					Compile code to push constant HL on the stack
              	;
              	; =======================================================================================
              	
869D:         	__COMCompileConstant:
869D: 3ED5    		ld 		a,$D5 									; Push DE
869F: CD3A81  		call 	FARCompileByte
86A2: 3E11    		ld 		a,$11 									; ld de,0000
86A4: CD3A81  		call 	FARCompileByte
86A7: CD5281  		call 	FARCompileWord
86AA: C32B86  		jp 		__COMExit
              	
              	; =======================================================================================
              	;
              	;							Compile a call to the word at EHL
              	;
              	; =======================================================================================
              	
86AD:         	__COMCompileEHL:
              		;
              		; TODO: Paging ,operates if E != HERE.PAGE and HL >= $C000
              		;
86AD: 3ECD    		ld 		a,$CD 									; but for now, use a normal Z80 call.
86AF: CD3A81  		call 	FARCompileByte
86B2: CD5281  		call 	FARCompileWord
86B5: C32B86  		jp 		__COMExit 								; and exit.
              	
              	
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @forth[ix]   *
              	
86B8:         	cforth_2a_forth:
86B8: DDE1    	    pop ix
86BA:         	cforth_2a_start:
86BA: E1      	  pop  hl
86BB: CD9881  	  call  MULTMultiply16        ; HL := HL * DE
86BE: EB      	  ex   de,hl
              	
              	; @end
              	
86BF:         	cforth_2a_end:
86BF: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /
              	
86C1:         	cforth_2f_forth:
86C1: DDE1    	    pop ix
86C3:         	cforth_2f_start:
86C3: E1      	  pop  hl
86C4: CD6D81  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
              	
              	; @end
              	
86C7:         	cforth_2f_end:
86C7: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   mod
              	
86C9:         	cforth_6d_6f_64_forth:
86C9: DDE1    	    pop ix
86CB:         	cforth_6d_6f_64_start:
86CB: E1      	  pop  hl
86CC: CD6D81  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
86CF: EB      	  ex   de,hl
              	
              	; @end
              	
86D0:         	cforth_6d_6f_64_end:
86D0: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /mod
              	
86D2:         	cforth_2f_6d_6f_64_forth:
86D2: DDE1    	    pop ix
86D4:         	cforth_2f_6d_6f_64_start:
86D4: E1      	  pop  hl
86D5: CD6D81  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
86D8: E5      	  push  hl
              	
              	; @end
              	
86D9:         	cforth_2f_6d_6f_64_end:
86D9: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] +
              	
86DB:         	cforth_2b_forth:
86DB: DDE1    	    pop ix
86DD:         	cforth_2b_start:
86DD: E1      	  pop  hl
86DE: 19      	  add  hl,de
86DF: EB      	  ex   de,hl
              	
              	; @end
              	
86E0:         	cforth_2b_end:
86E0: DDE9    	    jp (ix)
86E2:         	cforth_2b_macro:
86E2: 0603    	    ld b,cforth_2b_end-cforth_2b_start
86E4: 21DD86  	    ld hl,cforth_2b_start
86E7: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  and
              	
86EA:         	cforth_61_6e_64_forth:
86EA: E1      	    pop hl
86EB:         	cforth_61_6e_64_start:
86EB: C1      	  pop  bc
86EC: 7B      	  ld   a,e
86ED: A1      	  and  c
86EE: 5F      	  ld   e,a
86EF: 7A      	  ld   a,d
86F0: A0      	  and  b
86F1: 57      	  ld   d,a
              	
              	; @end
              	
86F2:         	cforth_61_6e_64_end:
86F2: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  or
              	
86F3:         	cforth_6f_72_forth:
86F3: E1      	    pop hl
86F4:         	cforth_6f_72_start:
86F4: C1      	  pop  bc
86F5: 7B      	  ld   a,e
86F6: A9      	  xor  c
86F7: 5F      	  ld   e,a
86F8: 7A      	  ld   a,d
86F9: A8      	  xor  b
86FA: 57      	  ld   d,a
              	
              	; @end
              	
86FB:         	cforth_6f_72_end:
86FB: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  +or
              	
86FC:         	cforth_2b_6f_72_forth:
86FC: E1      	    pop hl
86FD:         	cforth_2b_6f_72_start:
86FD: C1      	  pop  bc
86FE: 7B      	  ld   a,e
86FF: B1      	  or   c
8700: 5F      	  ld   e,a
8701: 7A      	  ld   a,d
8702: B0      	  or   b
8703: 57      	  ld   d,a
              	
              	; @end
              	
8704:         	cforth_2b_6f_72_end:
8704: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   compare.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Comparison words, min and max.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[ix] less
              	
8705:         	cforth_6c_65_73_73_forth:
8705: DDE1    	    pop ix
8707:         	cforth_6c_65_73_73_start:
8707: E1      	  pop  hl
8708: EB      	  ex   de,hl
8709: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
870A: AC      	  xor  h
870B: 87      	  add  a,a      ; if the signs are different, check those.
870C: 380C    	  jr   c,__LessDifferentSigns
              	
870E: D5      	  push  de
870F: EB      	  ex   de,hl      ; want to do B-A
8710: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
8712: D1      	  pop  de
8713: 3809    	  jr   c,__LessTrue
              	
8715:         	__LessFalse:
8715: 110000  	  ld   de,$0000
8718: 1807    	  jr   __LessExit
              	
871A:         	__LessDifferentSigns:
871A: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
871C: 28F7    	  jr   z,__LessFalse
              	
871E:         	__LessTrue:
871E: 11FFFF  	  ld   de,$FFFF
8721:         	__LessExit:
              	
              	
              	; @end
              	
8721:         	cforth_6c_65_73_73_end:
8721: DDE9    	    jp (ix)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphic.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Graphic System words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] screen.mode
              	
8723:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth:
8723: E1      	    pop hl
8724:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start:
8724: 7B      	  ld   a,e
8725: CDBC81  	  call GFXMode
8728: D1      	  pop  de
              	
              	; @end
              	
8729:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end:
8729: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] screen.clear
              	
872A:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth:
872A:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start:
872A: CDB281  	  call GFXClearScreen
              	
              	; @end
              	
872D:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end:
872D: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ix] screen!
              	
872E:         	cforth_73_63_72_65_65_6e_21_forth:
872E: DDE1    	    pop ix
8730:         	cforth_73_63_72_65_65_6e_21_start:
8730: EB      	  ex   de,hl        ; TOS (address) in HL
8731: D1      	  pop  de         ; data in DE
8732: CDF181  	  call  GFXWriteCharacter     ; display it
8735: D1      	  pop  de         ; fix up stack
              	
              	; @end
              	
8736:         	cforth_73_63_72_65_65_6e_21_end:
8736: DDE9    	    jp (ix)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ix] @
              	
8738:         	cforth_40_forth:
8738: DDE1    	    pop ix
873A:         	cforth_40_start:
873A: EB      	  ex   de,hl
873B: 5E      	  ld   e,(hl)
873C: 23      	  inc  hl
873D: 56      	  ld   d,(hl)
              	
              	; @end
              	
873E:         	cforth_40_end:
873E: DDE9    	    jp (ix)
8740:         	cforth_40_macro:
8740: 0604    	    ld b,cforth_40_end-cforth_40_start
8742: 213A87  	    ld hl,cforth_40_start
8745: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] c@
              	
8748:         	cforth_63_40_forth:
8748: E1      	    pop hl
8749:         	cforth_63_40_start:
8749: 1A      	  ld   a,(de)
874A: 5F      	  ld   e,a
874B: 1600    	  ld   d,0
              	
              	; @end
              	
874D:         	cforth_63_40_end:
874D: E9      	    jp (hl)
874E:         	cforth_63_40_macro:
874E: 0604    	    ld b,cforth_63_40_end-cforth_63_40_start
8750: 214987  	    ld hl,cforth_63_40_start
8753: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] c!
              	
8756:         	cforth_63_21_forth:
8756: DDE1    	    pop ix
8758:         	cforth_63_21_start:
8758: E1      	  pop  hl
8759: 7D      	  ld   a,l
875A: 12      	  ld   (de),a
875B: D1      	  pop  de
              	
              	; @end
              	
875C:         	cforth_63_21_end:
875C: DDE9    	    jp (ix)
875E:         	cforth_63_21_macro:
875E: 0604    	    ld b,cforth_63_21_end-cforth_63_21_start
8760: 215887  	    ld hl,cforth_63_21_start
8763: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] !
              	
8766:         	cforth_21_forth:
8766: DDE1    	    pop ix
8768:         	cforth_21_start:
8768: E1      	  pop  hl
8769: 73      	  ld   (hl),e
876A: 23      	  inc  hl
876B: 72      	  ld   (hl),d
876C: D1      	  pop  de
              	
              	; @end
              	
876D:         	cforth_21_end:
876D: DDE9    	    jp (ix)
876F:         	cforth_21_macro:
876F: 0605    	    ld b,cforth_21_end-cforth_21_start
8771: 216887  	    ld hl,cforth_21_start
8774: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] +!
              	
8777:         	cforth_2b_21_forth:
8777: DDE1    	    pop ix
8779:         	cforth_2b_21_start:
8779: E1      	  pop  hl      ; address in DE, get data in HL
877A: EB      	  ex   de,hl     ; address in HL, data in E
877B: 7E      	  ld   a,(hl)
877C: 83      	  add  a,e
877D: 77      	  ld   (hl),a
877E: 23      	  inc  hl
877F: 7E      	  ld   a,(hl)
8780: 8A      	  adc  a,d
8781: 77      	  ld   (hl),a
8782: D1      	  pop  de
              	
              	; @end
              	
8783:         	cforth_2b_21_end:
8783: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] or!
              	
8785:         	cforth_6f_72_21_forth:
8785: DDE1    	    pop ix
8787:         	cforth_6f_72_21_start:
8787: E1      	  pop  hl
8788: 7E      	  ld   a,(hl)
8789: B3      	  or   e
878A: 77      	  ld   (hl),a
878B: 23      	  inc  hl
878C: 7E      	  ld   a,(hl)
878D: B2      	  or   d
878E: 77      	  ld   (hl),a
878F: D1      	  pop  de
              	
              	; @end
              	
8790:         	cforth_6f_72_21_end:
8790: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] fill
              	
8792:         	cforth_66_69_6c_6c_forth:
8792: DDE1    	    pop ix
8794:         	cforth_66_69_6c_6c_start:
              	          ; called as <byte> <address> <count> fill
8794: E1      	  pop  hl       ; top is count (DE) 2nd address (HL) 3rd value (BC)
8795: C1      	  pop  bc
8796: 7A      	  ld   a,d
8797: B3      	  or   e
8798: 2807    	  jr   z,__fill2
              	
879A: 71      	__fill1:ld   (hl),c
879B: 23      	  inc  hl
879C: 0B      	  dec  bc
879D: 7A      	  ld   a,d
879E: B3      	  or   e
879F: 20F9    	  jr   nz,__fill1
87A1:         	__fill2:
87A1: D1      	  pop  de
              	
              	; @end
              	
87A2:         	cforth_66_69_6c_6c_end:
87A2: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] move
              	
87A4:         	cforth_6d_6f_76_65_forth:
87A4: DDE1    	    pop ix
87A6:         	cforth_6d_6f_76_65_start:
              	             ; source destination count move
              	
87A6: 42      	  ld   b,d         ; top is count (BC)
87A7: 4B      	  ld   c,e
87A8: E1      	  pop  hl          ; 2nd is target (HL)
87A9: D1      	  pop  de          ; 3rd is source (DE)
              	
87AA: 78      	  ld   a,b
87AB: B1      	  or   c
87AC: 2815    	  jr   z,__move2
              	
87AE: AF      	  xor  a          ; find direction.
87AF: ED52    	  sbc  hl,de
87B1: 7C      	  ld   a,h
87B2: 19      	  add  hl,de
87B3: CB7F    	  bit  7,a         ; if +ve use LDDR
87B5: 2805    	  jr   z,__move3
              	
87B7: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
87B8: EDB0    	  ldir
87BA: 1807    	  jr   __move2
              	
87BC:         	__move3:
87BC: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
87BD: EB      	  ex   de,hl
87BE: 09      	  add  hl,bc
87BF: 1B      	  dec  de          ; -1 to point to last byte
87C0: 2B      	  dec  hl
87C1: EDB8    	  lddr
              	
87C3:         	__move2:
87C3: D1      	  pop  de
              	
              	; @end
              	
87C4:         	cforth_6d_6f_76_65_end:
87C4: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p@
              	
87C6:         	cforth_70_40_forth:
87C6: E1      	    pop hl
87C7:         	cforth_70_40_start:
87C7: 42      	  ld   b,d
87C8: 4B      	  ld   c,e
87C9: ED58    	  in   e,(c)
87CB: 1600    	  ld   d,0
              	
              	; @end
              	
87CD:         	cforth_70_40_end:
87CD: E9      	    jp (hl)
87CE:         	cforth_70_40_macro:
87CE: 0606    	    ld b,cforth_70_40_end-cforth_70_40_start
87D0: 21C787  	    ld hl,cforth_70_40_start
87D3: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p!
              	
87D6:         	cforth_70_21_forth:
87D6: E1      	    pop hl
87D7:         	cforth_70_21_start:
87D7: 42      	  ld   b,d
87D8: 4B      	  ld   c,e
87D9: D1      	  pop  de
87DA: ED59    	  out  (c),e
87DC: D1      	  pop  de
              	
              	; @end
              	
87DD:         	cforth_70_21_end:
87DD: E9      	    jp (hl)
87DE:         	cforth_70_21_macro:
87DE: 0606    	    ld b,cforth_70_21_end-cforth_70_21_start
87E0: 21D787  	    ld hl,cforth_70_21_start
87E3: C3A584  	    jp MacroExpand
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[hl] drop
              	
87E6:         	cforth_64_72_6f_70_forth:
87E6: E1      	    pop hl
87E7:         	cforth_64_72_6f_70_start:
87E7: D1      	  pop  de
              	
              	; @end
              	
87E8:         	cforth_64_72_6f_70_end:
87E8: E9      	    jp (hl)
87E9:         	cforth_64_72_6f_70_macro:
87E9: 0601    	    ld b,cforth_64_72_6f_70_end-cforth_64_72_6f_70_start
87EB: 21E787  	    ld hl,cforth_64_72_6f_70_start
87EE: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] dup
              	
87F1:         	cforth_64_75_70_forth:
87F1: E1      	    pop hl
87F2:         	cforth_64_75_70_start:
87F2: D5      	  push  de
              	
              	; @end
              	
87F3:         	cforth_64_75_70_end:
87F3: E9      	    jp (hl)
87F4:         	cforth_64_75_70_macro:
87F4: 0601    	    ld b,cforth_64_75_70_end-cforth_64_75_70_start
87F6: 21F287  	    ld hl,cforth_64_75_70_start
87F9: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] nip
              	
87FC:         	cforth_6e_69_70_forth:
87FC: DDE1    	    pop ix
87FE:         	cforth_6e_69_70_start:
87FE: E1      	  pop  hl
              	
              	; @end
              	
87FF:         	cforth_6e_69_70_end:
87FF: DDE9    	    jp (ix)
8801:         	cforth_6e_69_70_macro:
8801: 0601    	    ld b,cforth_6e_69_70_end-cforth_6e_69_70_start
8803: 21FE87  	    ld hl,cforth_6e_69_70_start
8806: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] over
              	
8809:         	cforth_6f_76_65_72_forth:
8809: DDE1    	    pop ix
880B:         	cforth_6f_76_65_72_start:
880B: E1      	  pop  hl
880C: D5      	  push  de
880D: EB      	  ex   de,hl
              	
              	; @end
              	
880E:         	cforth_6f_76_65_72_end:
880E: DDE9    	    jp (ix)
8810:         	cforth_6f_76_65_72_macro:
8810: 0603    	    ld b,cforth_6f_76_65_72_end-cforth_6f_76_65_72_start
8812: 210B88  	    ld hl,cforth_6f_76_65_72_start
8815: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] swap
              	
8818:         	cforth_73_77_61_70_forth:
8818: DDE1    	    pop ix
881A:         	cforth_73_77_61_70_start:
881A: E1      	  pop  hl
881B: EB      	  ex   de,hl
881C: E5      	  push  hl
              	
              	; @end
              	
881D:         	cforth_73_77_61_70_end:
881D: DDE9    	    jp (ix)
881F:         	cforth_73_77_61_70_macro:
881F: 0603    	    ld b,cforth_73_77_61_70_end-cforth_73_77_61_70_start
8821: 211A88  	    ld hl,cforth_73_77_61_70_start
8824: C3A584  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   22nd November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] bswap
              	
8827:         	cforth_62_73_77_61_70_forth:
8827:         	cforth_62_73_77_61_70_start:
8827: 7A      	  ld   a,d
8828: 53      	  ld   d,e
8829: 5F      	  ld   e,a
              	
              	; @end
              	
882A:         	cforth_62_73_77_61_70_end:
882A: C9      	    ret
882B:         	cforth_62_73_77_61_70_macro:
882B: 0603    	    ld b,cforth_62_73_77_61_70_end-cforth_62_73_77_61_70_start
882D: 212788  	    ld hl,cforth_62_73_77_61_70_start
8830: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2*
              	
8833:         	cforth_32_2a_forth:
8833:         	cforth_32_2a_start:
8833: EB      	  ex   de,hl
8834: 29      	  add  hl,hl
8835: EB      	  ex   de,hl
              	
              	; @end
              	
8836:         	cforth_32_2a_end:
8836: C9      	    ret
8837:         	cforth_32_2a_macro:
8837: 0603    	    ld b,cforth_32_2a_end-cforth_32_2a_start
8839: 213388  	    ld hl,cforth_32_2a_start
883C: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2/
              	
883F:         	cforth_32_2f_forth:
883F:         	cforth_32_2f_start:
883F: CB3A    	  srl  d
8841: CB1B    	  rr   e
              	
              	; @end
              	
8843:         	cforth_32_2f_end:
8843: C9      	    ret
8844:         	cforth_32_2f_macro:
8844: 0604    	    ld b,cforth_32_2f_end-cforth_32_2f_start
8846: 213F88  	    ld hl,cforth_32_2f_start
8849: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ++
              	
884C:         	cforth_2b_2b_forth:
884C:         	cforth_2b_2b_start:
884C: 13      	  inc  de
              	
              	; @end
              	
884D:         	cforth_2b_2b_end:
884D: C9      	    ret
884E:         	cforth_2b_2b_macro:
884E: 0601    	    ld b,cforth_2b_2b_end-cforth_2b_2b_start
8850: 214C88  	    ld hl,cforth_2b_2b_start
8853: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] +++
              	
8856:         	cforth_2b_2b_2b_forth:
8856:         	cforth_2b_2b_2b_start:
8856: 13      	  inc  de
8857: 13      	  inc  de
              	
              	; @end
              	
8858:         	cforth_2b_2b_2b_end:
8858: C9      	    ret
8859:         	cforth_2b_2b_2b_macro:
8859: 0602    	    ld b,cforth_2b_2b_2b_end-cforth_2b_2b_2b_start
885B: 215688  	    ld hl,cforth_2b_2b_2b_start
885E: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] --
              	
8861:         	cforth_2d_2d_forth:
8861:         	cforth_2d_2d_start:
8861: 1B      	  dec  de
              	
              	; @end
              	
8862:         	cforth_2d_2d_end:
8862: C9      	    ret
8863:         	cforth_2d_2d_macro:
8863: 0601    	    ld b,cforth_2d_2d_end-cforth_2d_2d_start
8865: 216188  	    ld hl,cforth_2d_2d_start
8868: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ---
              	
886B:         	cforth_2d_2d_2d_forth:
886B:         	cforth_2d_2d_2d_start:
886B: 1B      	  dec  de
886C: 1B      	  dec  de
              	
              	; @end
              	
886D:         	cforth_2d_2d_2d_end:
886D: C9      	    ret
886E:         	cforth_2d_2d_2d_macro:
886E: 0602    	    ld b,cforth_2d_2d_2d_end-cforth_2d_2d_2d_start
8870: 216B88  	    ld hl,cforth_2d_2d_2d_start
8873: C3A584  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret] -
              	
8876:         	cforth_2d_forth:
8876:         	cforth_2d_start:
8876: 7A      	  ld   a,d
8877: 2F      	  cpl
8878: 57      	  ld   d,a
8879: 7B      	  ld   a,e
887A: 2F      	  cpl
887B: 5F      	  ld   e,a
              	
              	; @end
              	
887C:         	cforth_2d_end:
887C: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  negate
              	
887D:         	cforth_6e_65_67_61_74_65_forth:
887D:         	cforth_6e_65_67_61_74_65_start:
887D: 7A      	  ld   a,d
887E: 2F      	  cpl
887F: 57      	  ld   d,a
8880: 7B      	  ld   a,e
8881: 2F      	  cpl
8882: 5F      	  ld   e,a
8883: 13      	  inc  de
              	
              	; @end
              	
8884:         	cforth_6e_65_67_61_74_65_end:
8884: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  abs
              	
8885:         	cforth_61_62_73_forth:
8885:         	cforth_61_62_73_start:
8885: CB7A    	  bit  7,d
8887: 2807    	  jr   z,__IsPositive
8889: 7A      	  ld   a,d
888A: 2F      	  cpl
888B: 57      	  ld   d,a
888C: 7B      	  ld   a,e
888D: 2F      	  cpl
888E: 5F      	  ld   e,a
888F: 13      	  inc  de
8890:         	__IsPositive:
              	
              	; @end
              	
8890:         	cforth_61_62_73_end:
8890: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0=
              	
8891:         	cforth_30_3d_forth:
8891:         	cforth_30_3d_start:
8891: 7A      	  ld   a,d
8892: B3      	  or   e
8893: 110000  	  ld   de,$0000
8896: 2001    	  jr   nz,__IsNonZero
8898: 1B      	  dec  de
8899:         	__IsNonZero:
              	
              	; @end
              	
8899:         	cforth_30_3d_end:
8899: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0<
              	
889A:         	cforth_30_3c_forth:
889A:         	cforth_30_3c_start:
889A: CB7A    	  bit  7,d
889C: 110000  	  ld   de,$0000
889F: 2801    	  jr   z,__IsPositive2
88A1: 1B      	  dec  de
88A2:         	__IsPositive2:
              	
              	; @end
              	
88A2:         	cforth_30_3c_end:
88A2: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   21st November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] inkey
              	
88A3:         	cforth_69_6e_6b_65_79_forth:
88A3: E1      	    pop hl
88A4:         	cforth_69_6e_6b_65_79_start:
88A4: D5      	  push  de
88A5: CD5982  	  call  IOScanKeyboard
88A8: 5F      	  ld   e,a
88A9: 1600    	  ld   d,0
              	
              	; @end
              	
88AB:         	cforth_69_6e_6b_65_79_end:
88AB: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] halt
              	
88AC:         	cforth_68_61_6c_74_forth:
88AC: E1      	    pop hl
88AD:         	cforth_68_61_6c_74_start:
              	
88AD: C31E80  	  jp   HaltZ80
              	
              	; @end
              	
88B0:         	cforth_68_61_6c_74_end:
88B0: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] break
              	
88B1:         	cforth_62_72_65_61_6b_forth:
88B1:         	cforth_62_72_65_61_6b_start:
88B1: DD01    	  db   $DD,$01
              	
              	; @endm
              	
88B3:         	cforth_62_72_65_61_6b_end:
88B3: C9      	    ret
88B4:         	cforth_62_72_65_61_6b_macro:
88B4: 0602    	    ld b,cforth_62_72_65_61_6b_end-cforth_62_72_65_61_6b_start
88B6: 21B188  	    ld hl,cforth_62_72_65_61_6b_start
88B9: C3A584  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 1,
              	
88BC:         	cforth_31_2c_forth:
88BC: E1      	    pop hl
88BD:         	cforth_31_2c_start:
88BD: 7B      	  ld   a,e
88BE: CD3A81  	  call  FARCompileByte
88C1: D1      	  pop  de
              	
              	; @endm
              	
88C2:         	cforth_31_2c_end:
88C2: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 2,
              	
88C3:         	cforth_32_2c_forth:
88C3: E1      	    pop hl
88C4:         	cforth_32_2c_start:
88C4: EB      	  ex   de,hl
88C5: CD3A81  	  call  FARCompileByte
88C8: D1      	  pop  de
              	
              	; @endm
              	
88C9:         	cforth_32_2c_end:
88C9: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	;    FORTH and MACRO are special cases. See makedictionary.py
              	; ***************************************************************************************
              	
              	
              	; @word[ret] forth
              	
88CA:         	cforth_66_6f_72_74_68_forth:
88CA:         	cforth_66_6f_72_74_68_start:
88CA: 3E00    	  ld   a,$00
88CC: 323D8C  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
88CF:         	cforth_66_6f_72_74_68_end:
88CF: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] macro
              	
88D0:         	cforth_6d_61_63_72_6f_forth:
88D0:         	cforth_6d_61_63_72_6f_start:
88D0: 3E00    	  ld   a,$00
88D2: 323D8C  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
88D5:         	cforth_6d_61_63_72_6f_end:
88D5: C9      	    ret
              	
              	
88D6:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
88D6: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
88DA: 00000000	
88DE: 0C1E1E0C	
88E2: 0C000C00	
88E6: 36360000	
88EA: 00000000	
88EE: 36367F36	
88F2: 7F363600	
88F6: 183E603C	
88FA: 067C1800	
88FE: 0063660C	
8902: 18336300	
8906: 1C361C3B	
890A: 6E663B00	
890E: 30306000	
8912: 00000000	
8916: 0C183030	
891A: 30180C00	
891E: 30180C0C	
8922: 0C183000	
8926: 00331E7F	
892A: 1E330000	
892E: 0018187E	
8932: 18180000	
8936: 00000000	
893A: 00181830	
893E: 0000007E	
8942: 00000000	
8946: 00000000	
894A: 00181800	
894E: 03060C18	
8952: 30604000	
8956: 3E63676F	
895A: 7B733E00	
895E: 18381818	
8962: 18187E00	
8966: 3C66061C	
896A: 30667E00	
896E: 3C66061C	
8972: 06663C00	
8976: 0E1E3666	
897A: 7F060F00	
897E: 7E607C06	
8982: 06663C00	
8986: 1C30607C	
898A: 66663C00	
898E: 7E66060C	
8992: 18181800	
8996: 3C66663C	
899A: 66663C00	
899E: 3C66663E	
89A2: 060C3800	
89A6: 00181800	
89AA: 00181800	
89AE: 00181800	
89B2: 00181830	
89B6: 0C183060	
89BA: 30180C00	
89BE: 00007E00	
89C2: 007E0000	
89C6: 30180C06	
89CA: 0C183000	
89CE: 3C66060C	
89D2: 18001800	
89D6: 3E636F6F	
89DA: 6F603C00	
89DE: 183C6666	
89E2: 7E666600	
89E6: 7E33333E	
89EA: 33337E00	
89EE: 1E336060	
89F2: 60331E00	
89F6: 7C363333	
89FA: 33367C00	
89FE: 7F31343C	
8A02: 34317F00	
8A06: 7F31343C	
8A0A: 34307800	
8A0E: 1E336060	
8A12: 67331F00	
8A16: 6666667E	
8A1A: 66666600	
8A1E: 3C181818	
8A22: 18183C00	
8A26: 0F060606	
8A2A: 66663C00	
8A2E: 7333363C	
8A32: 36337300	
8A36: 78303030	
8A3A: 31337F00	
8A3E: 63777F7F	
8A42: 6B636300	
8A46: 63737B6F	
8A4A: 67636300	
8A4E: 1C366363	
8A52: 63361C00	
8A56: 7E33333E	
8A5A: 30307800	
8A5E: 3C666666	
8A62: 6E3C0E00	
8A66: 7E33333E	
8A6A: 36337300	
8A6E: 3C667038	
8A72: 0E663C00	
8A76: 7E5A1818	
8A7A: 18183C00	
8A7E: 66666666	
8A82: 66667E00	
8A86: 66666666	
8A8A: 663C1800	
8A8E: 6363636B	
8A92: 7F776300	
8A96: 6363361C	
8A9A: 1C366300	
8A9E: 6666663C	
8AA2: 18183C00	
8AA6: 7F63460C	
8AAA: 19337F00	
8AAE: 3C303030	
8AB2: 30303C00	
8AB6: 6030180C	
8ABA: 06030100	
8ABE: 3C0C0C0C	
8AC2: 0C0C3C00	
8AC6: 081C3663	
8ACA: 00000000	
8ACE: 00000000	
8AD2: 0000007F	
8AD6: 18180C00	
8ADA: 00000000	
8ADE: 00003C06	
8AE2: 3E663B00	
8AE6: 7030303E	
8AEA: 33336E00	
8AEE: 00003C66	
8AF2: 60663C00	
8AF6: 0E06063E	
8AFA: 66663B00	
8AFE: 00003C66	
8B02: 7E603C00	
8B06: 1C363078	
8B0A: 30307800	
8B0E: 00003B66	
8B12: 663E067C	
8B16: 7030363B	
8B1A: 33337300	
8B1E: 18003818	
8B22: 18183C00	
8B26: 06000606	
8B2A: 0666663C	
8B2E: 70303336	
8B32: 3C367300	
8B36: 38181818	
8B3A: 18183C00	
8B3E: 0000667F	
8B42: 7F6B6300	
8B46: 00007C66	
8B4A: 66666600	
8B4E: 00003C66	
8B52: 66663C00	
8B56: 00006E33	
8B5A: 333E3078	
8B5E: 00003B66	
8B62: 663E060F	
8B66: 00006E3B	
8B6A: 33307800	
8B6E: 00003E60	
8B72: 3C067C00	
8B76: 08183E18	
8B7A: 181A0C00	
8B7E: 00006666	
8B82: 66663B00	
8B86: 00006666	
8B8A: 663C1800	
8B8E: 0000636B	
8B92: 7F7F3600	
8B96: 00006336	
8B9A: 1C366300	
8B9E: 00006666	
8BA2: 663E067C	
8BA6: 00007E4C	
8BAA: 18327E00	
8BAE: 0E181870	
8BB2: 18180E00	
8BB6: 0C0C0C00	
8BBA: 0C0C0C00	
8BBE: 7018180E	
8BC2: 18187000	
8BC6: 3B6E0000	
8BCA: 00000000	
8BCE: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8BD6:         	SystemInformationTable:
              	
8BD6:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8BD6: 00A0    			dw 		FreeMemory
8BD8:         	SINextFreeCodePage: 								; +2 	Next Free Code Byte Page
8BD8: 2400    			db 		FirstCodePage,0
              	
8BDA:         	SIBootCodeAddress:									; +4	Run from here
8BDA: AD84    			dw 		LOADBootstrap
8BDC:         	SIBootCodePage: 									; +6    Run page.
8BDC: 2400    			db		FirstCodePage,0
              	
8BDE:         	SIPageUsage:										; +8 	Page Usage Table
8BDE: 568C0000			dw 		PageUsage,0 			
              	
8BE2:         	SIDisplayInformation:								; +12 	Display Information structure address
8BE2: 3E8C0000			dw 		DIScreenWidth,0
              	
8BE6:         	SIStack:											; +16 	Initial Z80 stack value
8BE6: F07E0000			dw 		StackTop,0							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8BEA:         	PAGEStackPointer: 									; stack used for switching pages
8BEA: 0000    			dw 		0
8BEC:         	PAGEStackBase:
8BEC: FFFFFFFF			ds 		16
8BF0: FF...   	
8BFC:         	CLIBuffer:
8BFC: FFFFFFFF			ds 		64
8C00: FF...   	
8C3C:         	CLILastKeyboardState:
8C3C: 00      			db 		0
8C3D:         	DICTForthMacroFlag:									; does it go in FORTH ($00) MACRO ($40)
8C3D: 00      			db 		0
              	;
              	;			Display Information
              	;
8C3E:         	DIScreenWidth:										; +0 	Screen Width
8C3E: 00000000			dw 		0,0
8C42:         	DIScreenHeight:										; +4 	Screen Height
8C42: 00000000			dw 		0,0
8C46:         	DIScreenSize: 										; +8    Screen Size in Characters
8C46: 00000000			dw 		0,0
8C4A:         	DIScreenDriver:										; +12 	Screen Driver
8C4A: 00000000			dw 		0,0 								
8C4E:         	DIFontBase:											; +16 	768 byte font, begins with space
8C4E: D6880000			dw 		AlternateFont,0 							
8C52:         	DIScreenMode:										; +20 	Current Mode
8C52: 00000000			dw 		0,0
              	;
              	;			Page usage table.
              	;
8C56:         	PageUsage:
8C56: 01      			db 		1									; $20 (dictionary) [1 = system]
8C57: 01      			db 		1 									; $22 (bootstrap)  [2 = code]
8C58: 02      			db 		2									; $24 (first code)
8C59: 00000000			db 		0,0,0,0,0 							; $26-$2E 		   [0 = unused]
8C5D: 00      	
8C5E: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8C62: 00000000	
8C66: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8C6A: 00000000	
8C6E: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8C72: 00000000	
8C76: FF      			db 		$FF 								; end of page.
              	
8C77: FFFFFFFF			org 	$A000
8C7B: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont               = $88D6 = 35030          kernel.asm:62
Boot                        = $8006 = 32774          kernel.asm:25
BootstrapPage               = $0022 =    34          kernel.asm:17
CLIBuffer                   = $8BFC = 35836          data.asm:49
CLIGetKey                   = $80E3 = 32995          commandline.asm:158
CLILastKeyboardState        = $8C3C = 35900          data.asm:51
COMCompileExecute           = $8604 = 34308          compiler.asm:20
COMWorkingStack             = $7D40 = 32064          kernel.asm:14
CONSTConvert                = $8500 = 34048          constant.asm:19
DICTAddWord                 = $8547 = 34119          dictionary.asm:19 (unused)
DICTFindWord                = $85A3 = 34211          dictionary.asm:91
DICTForthMacroFlag          = $8C3D = 35901          data.asm:53
DIFontBase                  = $8C4E = 35918          data.asm:66
DIScreenDriver              = $8C4A = 35914          data.asm:64
DIScreenHeight              = $8C42 = 35906          data.asm:60
DIScreenMode                = $8C52 = 35922          data.asm:68
DIScreenSize                = $8C46 = 35910          data.asm:62
DIScreenWidth               = $8C3E = 35902          data.asm:58
DIVDivideMod16              = $816D = 33133          divide.asm:18
DictionaryPage              = $0020 =    32          kernel.asm:16
Div16_Loop1                 = $8177 = 33143          divide.asm:27
Div16_Loop2                 = $8188 = 33160          divide.asm:41
Div16_NoAdd1                = $817F = 33151          divide.asm:33
Div16_NoAdd2                = $8190 = 33168          divide.asm:47
EditBuffer                  = $7B08 = 31496          kernel.asm:13
ErrorHandler                = $802B = 32811          commandline.asm:25
FARCompileByte              = $813A = 33082          farmemory.asm:18
FARCompileWord              = $8152 = 33106          farmemory.asm:40
FirstCodePage               = $0024 =    36          kernel.asm:18
FreeMemory                  = $A000 = 40960          data.asm:84
GFXClearScreen              = $81B2 = 33202          graphics.asm:18
GFXGetFontGraphicDE         = $8236 = 33334          graphics.asm:146
GFXInitialise48k            = $8326 = 33574          screen48k.asm:19
GFXInitialiseLayer2         = $8389 = 33673          screen_layer2.asm:19
GFXInitialiseLowRes         = $8420 = 33824          screen_lores.asm:18
GFXMode                     = $81BC = 33212          graphics.asm:32
GFXPrintCharacter48k        = $8352 = 33618          screen48k.asm:53
GFXPrintCharacterLayer2     = $83B9 = 33721          screen_layer2.asm:56
GFXPrintCharacterLowRes     = $844A = 33866          screen_lores.asm:50
GFXWriteCharacter           = $81F1 = 33265          graphics.asm:78
GFXWriteHexWord             = $8204 = 33284          graphics.asm:101 (unused)
GFXWriteHexWordA            = $8206 = 33286          graphics.asm:103 (unused)
HaltZ80                     = $801E = 32798          kernel.asm:38
IOScanKeyboard              = $8259 = 33369          keyboard.asm:18
L2PClear                    = $8392 = 33682          screen_layer2.asm:26
L2PClearBank                = $83A2 = 33698          screen_layer2.asm:35
LOADBootstrap               = $84AD = 33965          loader.asm:18
LowClearScreen              = $8433 = 33843          screen_lores.asm:30
MULTMultiply16              = $8198 = 33176          multiply.asm:18
MacroExpand                 = $84A5 = 33957          utilities.asm:18
PAGEInitialise              = $80FB = 33019          paging.asm:18
PAGERestore                 = $8124 = 33060          paging.asm:62
PAGEStackBase               = $8BEC = 35820          data.asm:47
PAGEStackPointer            = $8BEA = 35818          data.asm:45
PAGESwitch                  = $810B = 33035          paging.asm:34
PageUsage                   = $8C56 = 35926          data.asm:73
SIBootCodeAddress           = $8BDA = 35802          data.asm:25
SIBootCodePage              = $8BDC = 35804          data.asm:27
SIDisplayInformation        = $8BE2 = 35810          data.asm:33 (unused)
SINextFreeCode              = $8BD6 = 35798          data.asm:20
SINextFreeCodePage          = $8BD8 = 35800          data.asm:22
SIPageUsage                 = $8BDE = 35806          data.asm:30 (unused)
SIStack                     = $8BE6 = 35814          data.asm:36
StackTop                    = $7EF0 = 32496          kernel.asm:12
StartSystem                 = $8022 = 32802          commandline.asm:18
SystemEmptyMessage          = $80A9 = 32937          commandline.asm:108
SystemInformationTable      = $8BD6 = 35798          data.asm:18
SystemIntroMessage          = $809C = 32924          commandline.asm:106
__CLIClearLoop              = $8038 = 32824          commandline.asm:35
__CLIDDNotNegative          = $80BA = 32954          commandline.asm:128
__CLIDisplayDecimal         = $80AB = 32939          commandline.asm:114 (unused)
__CLIDisplayMessage         = $8049 = 32841          commandline.asm:47
__CLIDisplayRecursive       = $80CA = 32970          commandline.asm:139
__CLIDisplayStack           = $8059 = 32857          commandline.asm:61
__CLIEnterCommandLine       = $8060 = 32864          commandline.asm:68
__CLIExecuteWord            = $8093 = 32915          commandline.asm:98
__CLIGetKeyboardChange      = $80EC = 33004          commandline.asm:167
__CLILoop                   = $806B = 32875          commandline.asm:74
__CLILoopBack               = $8096 = 32918          commandline.asm:102
__CLIWaitChange             = $80E4 = 32996          commandline.asm:160
__COMCELoadSP               = $862E = 34350          compiler.asm:62
__COMCEOut                  = $8632 = 34354          compiler.asm:65
__COMCallHL                 = $869C = 34460          compiler.asm:159
__COMCompileConstant        = $869D = 34461          compiler.asm:168
__COMCompileEHL             = $86AD = 34477          compiler.asm:182
__COMCyanWord               = $8652 = 34386          compiler.asm:99
__COMError                  = $8625 = 34341          compiler.asm:47
__COMExecuteEHL             = $867E = 34430          compiler.asm:145
__COMExit                   = $862B = 34347          compiler.asm:59
__COMGreenWord              = $8635 = 34357          compiler.asm:75
__COMPushHLOnStack          = $8670 = 34416          compiler.asm:129
__COMXReloadSP              = $8693 = 34451          compiler.asm:154
__COMYellowWord             = $865D = 34397          compiler.asm:112
__CONConFail                = $853E = 34110          constant.asm:75
__CONConvLoop               = $8508 = 34056          constant.asm:26
__CONMinusExit              = $852B = 34091          constant.asm:55
__CONNotNegative            = $8538 = 34104          constant.asm:69
__Core__Mult_Loop           = $819F = 33183          multiply.asm:24
__Core__Mult_Shift          = $81A4 = 33188          multiply.asm:28
__DICTAddCopy               = $858C = 34188          dictionary.asm:66
__DICTAddGetLength          = $8550 = 34128          dictionary.asm:27
__DICTCheckName             = $85C8 = 34248          dictionary.asm:117
__DICTCreateEntry           = $856D = 34157          dictionary.asm:48
__DICTFindEndDictionary     = $8560 = 34144          dictionary.asm:39
__DICTFindExit              = $85FB = 34299          dictionary.asm:150
__DICTFindFail              = $85F4 = 34292          dictionary.asm:146
__DICTFindMainLoop          = $85B0 = 34224          dictionary.asm:100
__DICTFindNext              = $85EB = 34283          dictionary.asm:140
__DICTFindNoMatch           = $85E8 = 34280          dictionary.asm:137
__GFXConfigure              = $81D6 = 33238          graphics.asm:53
__GFXLayer2                 = $81CE = 33230          graphics.asm:46
__GFXLowRes                 = $81D3 = 33235          graphics.asm:50
__GFXPromptCharacter        = $8251 = 33361          graphics.asm:167
__GFXWCExit                 = $81FF = 33279          graphics.asm:88
__GFXWHByte                 = $8218 = 33304          graphics.asm:119
__GFXWHDigit                = $822E = 33326          graphics.asm:133
__GFXWHNibble               = $8225 = 33317          graphics.asm:127
__IsNonZero                 = $8899 = 34969          __words.asm:856
__IsPositive                = $8890 = 34960          __words.asm:837
__IsPositive2               = $88A2 = 34978          __words.asm:874
__L2Exit                    = $8419 = 33817          screen_layer2.asm:136
__L2Loop                    = $840A = 33802          screen_layer2.asm:123
__L2Not1                    = $83CF = 33743          screen_layer2.asm:76
__L2Not2                    = $83D5 = 33749          screen_layer2.asm:80
__L2Not3                    = $83DB = 33755          screen_layer2.asm:84
__L2NotSet                  = $8410 = 33808          screen_layer2.asm:128
__L2Outer                   = $8402 = 33794          screen_layer2.asm:118
__LOADBootLoop              = $84BB = 33979          loader.asm:29
__LOADEnds                  = $84FA = 34042          loader.asm:73 (unused)
__LOADNextWord              = $84E7 = 34023          loader.asm:59
__LOADScanExit              = $84EE = 34030          loader.asm:65
__LOADScanLoop              = $84DF = 34015          loader.asm:52
__LPExit                    = $849E = 33950          screen_lores.asm:120
__LessDifferentSigns        = $871A = 34586          __words.asm:198
__LessExit                  = $8721 = 34593          __words.asm:204
__LessFalse                 = $8715 = 34581          __words.asm:194
__LessTrue                  = $871E = 34590          __words.asm:202
__LowLoop                   = $848A = 33930          screen_lores.asm:104
__LowNotLower2              = $8480 = 33920          screen_lores.asm:97
__LowNotSet                 = $8490 = 33936          screen_lores.asm:109
__LowOuter                  = $8482 = 33922          screen_lores.asm:99
__ZXWCCopy                  = $837E = 33662          screen48k.asm:101
__ZXWCExit                  = $8384 = 33668          screen48k.asm:107
___kr4                      = $828A = 33418          keyboard.asm:49
__cs1                       = $8336 = 33590          screen48k.asm:29
__cs2                       = $833E = 33598          screen48k.asm:34
__fill1                     = $879A = 34714          __words.asm:428
__fill2                     = $87A1 = 34721          __words.asm:434
__kr1                       = $826E = 33390          keyboard.asm:32
__kr2                       = $8279 = 33401          keyboard.asm:38
__kr3                       = $827B = 33403          keyboard.asm:41
__kr_exit                   = $82AA = 33450          keyboard.asm:79
__kr_keypressed             = $82A4 = 33444          keyboard.asm:73
__kr_no_shift_table         = $82AE = 33454          keyboard.asm:94
__kr_shift_table            = $82FE = 33534          keyboard.asm:106
__kr_symbol_shift_table     = $82D6 = 33494          keyboard.asm:100
__move2                     = $87C3 = 34755          __words.asm:480
__move3                     = $87BC = 34748          __words.asm:472
_end                        = $C001 = 49153          kernel.asm:19 (unused)
_size                       = $4001 = 16385          kernel.asm:19 (unused)
cforth_21_end               = $876D = 34669          __words.asm:359
cforth_21_forth             = $8766 = 34662          __words.asm:348 (unused)
cforth_21_macro             = $876F = 34671          __words.asm:361 (unused)
cforth_21_start             = $8768 = 34664          __words.asm:350
cforth_2a_end               = $86BF = 34495          __words.asm:27 (unused)
cforth_2a_forth             = $86B8 = 34488          __words.asm:18 (unused)
cforth_2a_start             = $86BA = 34490          __words.asm:20 (unused)
cforth_2b_21_end            = $8783 = 34691          __words.asm:387 (unused)
cforth_2b_21_forth          = $8777 = 34679          __words.asm:371 (unused)
cforth_2b_21_start          = $8779 = 34681          __words.asm:373 (unused)
cforth_2b_2b_2b_end         = $8858 = 34904          __words.asm:738
cforth_2b_2b_2b_forth       = $8856 = 34902          __words.asm:731 (unused)
cforth_2b_2b_2b_macro       = $8859 = 34905          __words.asm:740 (unused)
cforth_2b_2b_2b_start       = $8856 = 34902          __words.asm:732
cforth_2b_2b_end            = $884D = 34893          __words.asm:719
cforth_2b_2b_forth          = $884C = 34892          __words.asm:713 (unused)
cforth_2b_2b_macro          = $884E = 34894          __words.asm:721 (unused)
cforth_2b_2b_start          = $884C = 34892          __words.asm:714
cforth_2b_6f_72_end         = $8704 = 34564          __words.asm:161 (unused)
cforth_2b_6f_72_forth       = $86FC = 34556          __words.asm:148 (unused)
cforth_2b_6f_72_start       = $86FD = 34557          __words.asm:150 (unused)
cforth_2b_end               = $86E0 = 34528          __words.asm:94
cforth_2b_forth             = $86DB = 34523          __words.asm:85 (unused)
cforth_2b_macro             = $86E2 = 34530          __words.asm:96 (unused)
cforth_2b_start             = $86DD = 34525          __words.asm:87
cforth_2d_2d_2d_end         = $886D = 34925          __words.asm:775
cforth_2d_2d_2d_forth       = $886B = 34923          __words.asm:768 (unused)
cforth_2d_2d_2d_macro       = $886E = 34926          __words.asm:777 (unused)
cforth_2d_2d_2d_start       = $886B = 34923          __words.asm:769
cforth_2d_2d_end            = $8862 = 34914          __words.asm:756
cforth_2d_2d_forth          = $8861 = 34913          __words.asm:750 (unused)
cforth_2d_2d_macro          = $8863 = 34915          __words.asm:758 (unused)
cforth_2d_2d_start          = $8861 = 34913          __words.asm:751
cforth_2d_end               = $887C = 34940          __words.asm:798 (unused)
cforth_2d_forth             = $8876 = 34934          __words.asm:787 (unused)
cforth_2d_start             = $8876 = 34934          __words.asm:788 (unused)
cforth_2f_6d_6f_64_end      = $86D9 = 34521          __words.asm:77 (unused)
cforth_2f_6d_6f_64_forth    = $86D2 = 34514          __words.asm:68 (unused)
cforth_2f_6d_6f_64_start    = $86D4 = 34516          __words.asm:70 (unused)
cforth_2f_end               = $86C7 = 34503          __words.asm:43 (unused)
cforth_2f_forth             = $86C1 = 34497          __words.asm:35 (unused)
cforth_2f_start             = $86C3 = 34499          __words.asm:37 (unused)
cforth_30_3c_end            = $88A2 = 34978          __words.asm:878 (unused)
cforth_30_3c_forth          = $889A = 34970          __words.asm:868 (unused)
cforth_30_3c_start          = $889A = 34970          __words.asm:869 (unused)
cforth_30_3d_end            = $8899 = 34969          __words.asm:860 (unused)
cforth_30_3d_forth          = $8891 = 34961          __words.asm:849 (unused)
cforth_30_3d_start          = $8891 = 34961          __words.asm:850 (unused)
cforth_31_2c_end            = $88C2 = 35010          __words.asm:955 (unused)
cforth_31_2c_forth          = $88BC = 35004          __words.asm:946 (unused)
cforth_31_2c_start          = $88BD = 35005          __words.asm:948 (unused)
cforth_32_2a_end            = $8836 = 34870          __words.asm:682
cforth_32_2a_forth          = $8833 = 34867          __words.asm:674 (unused)
cforth_32_2a_macro          = $8837 = 34871          __words.asm:684 (unused)
cforth_32_2a_start          = $8833 = 34867          __words.asm:675
cforth_32_2c_end            = $88C9 = 35017          __words.asm:972 (unused)
cforth_32_2c_forth          = $88C3 = 35011          __words.asm:963 (unused)
cforth_32_2c_start          = $88C4 = 35012          __words.asm:965 (unused)
cforth_32_2f_end            = $8843 = 34883          __words.asm:701
cforth_32_2f_forth          = $883F = 34879          __words.asm:694 (unused)
cforth_32_2f_macro          = $8844 = 34884          __words.asm:703 (unused)
cforth_32_2f_start          = $883F = 34879          __words.asm:695
cforth_40_end               = $873E = 34622          __words.asm:293
cforth_40_forth             = $8738 = 34616          __words.asm:283 (unused)
cforth_40_macro             = $8740 = 34624          __words.asm:295 (unused)
cforth_40_start             = $873A = 34618          __words.asm:285
cforth_61_62_73_end         = $8890 = 34960          __words.asm:841 (unused)
cforth_61_62_73_forth       = $8885 = 34949          __words.asm:826 (unused)
cforth_61_62_73_start       = $8885 = 34949          __words.asm:827 (unused)
cforth_61_6e_64_end         = $86F2 = 34546          __words.asm:119 (unused)
cforth_61_6e_64_forth       = $86EA = 34538          __words.asm:106 (unused)
cforth_61_6e_64_start       = $86EB = 34539          __words.asm:108 (unused)
cforth_62_72_65_61_6b_end   = $88B3 = 34995          __words.asm:934
cforth_62_72_65_61_6b_forth = $88B1 = 34993          __words.asm:928 (unused)
cforth_62_72_65_61_6b_macro = $88B4 = 34996          __words.asm:936 (unused)
cforth_62_72_65_61_6b_start = $88B1 = 34993          __words.asm:929
cforth_62_73_77_61_70_end   = $882A = 34858          __words.asm:662
cforth_62_73_77_61_70_forth = $8827 = 34855          __words.asm:654 (unused)
cforth_62_73_77_61_70_macro = $882B = 34859          __words.asm:664 (unused)
cforth_62_73_77_61_70_start = $8827 = 34855          __words.asm:655
cforth_63_21_end            = $875C = 34652          __words.asm:336
cforth_63_21_forth          = $8756 = 34646          __words.asm:326 (unused)
cforth_63_21_macro          = $875E = 34654          __words.asm:338 (unused)
cforth_63_21_start          = $8758 = 34648          __words.asm:328
cforth_63_40_end            = $874D = 34637          __words.asm:314
cforth_63_40_forth          = $8748 = 34632          __words.asm:305 (unused)
cforth_63_40_macro          = $874E = 34638          __words.asm:316 (unused)
cforth_63_40_start          = $8749 = 34633          __words.asm:307
cforth_64_72_6f_70_end      = $87E8 = 34792          __words.asm:553
cforth_64_72_6f_70_forth    = $87E6 = 34790          __words.asm:546 (unused)
cforth_64_72_6f_70_macro    = $87E9 = 34793          __words.asm:555 (unused)
cforth_64_72_6f_70_start    = $87E7 = 34791          __words.asm:548
cforth_64_75_70_end         = $87F3 = 34803          __words.asm:572
cforth_64_75_70_forth       = $87F1 = 34801          __words.asm:565 (unused)
cforth_64_75_70_macro       = $87F4 = 34804          __words.asm:574 (unused)
cforth_64_75_70_start       = $87F2 = 34802          __words.asm:567
cforth_66_69_6c_6c_end      = $87A2 = 34722          __words.asm:439 (unused)
cforth_66_69_6c_6c_forth    = $8792 = 34706          __words.asm:418 (unused)
cforth_66_69_6c_6c_start    = $8794 = 34708          __words.asm:420 (unused)
cforth_66_6f_72_74_68_end   = $88CF = 35023          __words.asm:989 (unused)
cforth_66_6f_72_74_68_forth = $88CA = 35018          __words.asm:982 (unused)
cforth_66_6f_72_74_68_start = $88CA = 35018          __words.asm:983 (unused)
cforth_68_61_6c_74_end      = $88B0 = 34992          __words.asm:920 (unused)
cforth_68_61_6c_74_forth    = $88AC = 34988          __words.asm:912 (unused)
cforth_68_61_6c_74_start    = $88AD = 34989          __words.asm:914 (unused)
cforth_69_6e_6b_65_79_end   = $88AB = 34987          __words.asm:904 (unused)
cforth_69_6e_6b_65_79_forth = $88A3 = 34979          __words.asm:894 (unused)
cforth_69_6e_6b_65_79_start = $88A4 = 34980          __words.asm:896 (unused)
cforth_6c_65_73_73_end      = $8721 = 34593          __words.asm:209 (unused)
cforth_6c_65_73_73_forth    = $8705 = 34565          __words.asm:178 (unused)
cforth_6c_65_73_73_start    = $8707 = 34567          __words.asm:180 (unused)
cforth_6d_61_63_72_6f_end   = $88D5 = 35029          __words.asm:1004 (unused)
cforth_6d_61_63_72_6f_forth = $88D0 = 35024          __words.asm:997 (unused)
cforth_6d_61_63_72_6f_start = $88D0 = 35024          __words.asm:998 (unused)
cforth_6d_6f_64_end         = $86D0 = 34512          __words.asm:60 (unused)
cforth_6d_6f_64_forth       = $86C9 = 34505          __words.asm:51 (unused)
cforth_6d_6f_64_start       = $86CB = 34507          __words.asm:53 (unused)
cforth_6d_6f_76_65_end      = $87C4 = 34756          __words.asm:485 (unused)
cforth_6d_6f_76_65_forth    = $87A4 = 34724          __words.asm:447 (unused)
cforth_6d_6f_76_65_start    = $87A6 = 34726          __words.asm:449 (unused)
cforth_6e_65_67_61_74_65_end = $8884 = 34948          __words.asm:818 (unused)
cforth_6e_65_67_61_74_65_forth = $887D = 34941          __words.asm:806 (unused)
cforth_6e_65_67_61_74_65_start = $887D = 34941          __words.asm:807 (unused)
cforth_6e_69_70_end         = $87FF = 34815          __words.asm:591
cforth_6e_69_70_forth       = $87FC = 34812          __words.asm:584 (unused)
cforth_6e_69_70_macro       = $8801 = 34817          __words.asm:593 (unused)
cforth_6e_69_70_start       = $87FE = 34814          __words.asm:586
cforth_6f_72_21_end         = $8790 = 34704          __words.asm:410 (unused)
cforth_6f_72_21_forth       = $8785 = 34693          __words.asm:395 (unused)
cforth_6f_72_21_start       = $8787 = 34695          __words.asm:397 (unused)
cforth_6f_72_end            = $86FB = 34555          __words.asm:140 (unused)
cforth_6f_72_forth          = $86F3 = 34547          __words.asm:127 (unused)
cforth_6f_72_start          = $86F4 = 34548          __words.asm:129 (unused)
cforth_6f_76_65_72_end      = $880E = 34830          __words.asm:612
cforth_6f_76_65_72_forth    = $8809 = 34825          __words.asm:603 (unused)
cforth_6f_76_65_72_macro    = $8810 = 34832          __words.asm:614 (unused)
cforth_6f_76_65_72_start    = $880B = 34827          __words.asm:605
cforth_70_21_end            = $87DD = 34781          __words.asm:526
cforth_70_21_forth          = $87D6 = 34774          __words.asm:515 (unused)
cforth_70_21_macro          = $87DE = 34782          __words.asm:528 (unused)
cforth_70_21_start          = $87D7 = 34775          __words.asm:517
cforth_70_40_end            = $87CD = 34765          __words.asm:503
cforth_70_40_forth          = $87C6 = 34758          __words.asm:493 (unused)
cforth_70_40_macro          = $87CE = 34766          __words.asm:505 (unused)
cforth_70_40_start          = $87C7 = 34759          __words.asm:495
cforth_73_63_72_65_65_6e_21_end = $8736 = 34614          __words.asm:266 (unused)
cforth_73_63_72_65_65_6e_21_forth = $872E = 34606          __words.asm:256 (unused)
cforth_73_63_72_65_65_6e_21_start = $8730 = 34608          __words.asm:258 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end = $872D = 34605          __words.asm:248 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth = $872A = 34602          __words.asm:242 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start = $872A = 34602          __words.asm:243 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end = $8729 = 34601          __words.asm:234 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth = $8723 = 34595          __words.asm:225 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start = $8724 = 34596          __words.asm:227 (unused)
cforth_73_77_61_70_end      = $881D = 34845          __words.asm:633
cforth_73_77_61_70_forth    = $8818 = 34840          __words.asm:624 (unused)
cforth_73_77_61_70_macro    = $881F = 34847          __words.asm:635 (unused)
cforth_73_77_61_70_start    = $881A = 34842          __words.asm:626


total time: 0.0120 sec.
no errors

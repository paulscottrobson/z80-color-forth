              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-23 22:22:59
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7B08:         	EditBuffer = $7B08 									; 512 byte edit buffer to $7B00-$7D10
7EFC:         	StackTop = $7EFC 									; Top of stack
              	
0020:         	DictionaryPage = $20 								; $20 dictionary page
              														; $22 is screens 0..31 bootstrap loading
0024:         	FirstCodePage = $24 								; $24 first page of actual code.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: A98A    			dw 		SystemInformationTable
              	
8006: ED7BB98A	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
800A: F3      			di											; disable interrupts
              		
800B: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
              			
800F: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8011: CDED80  			call 	GFXMode
              	
8014: 3AAF8A  			ld 		a,(SIBootCodePage) 					; get the page to start
8017: CD2480  			call 	PAGEInitialise
801A: 2AAD8A  			ld 		hl,(SIBootCodeAddress) 				; get boot address
801D: E9      			jp 		(hl) 								; and go there
              	
801E:         	ErrorHandler:
801E: 18FE    			jr 		ErrorHandler
              	
8020: F3      	HaltZ80:di 											; stop everything.
8021: 76      			halt
8022: 18FC    			jr 		HaltZ80
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8024:         	PAGEInitialise:
8024: ED9256  			db 		$ED,$92,$56							; switch to page A
8027: 3C      			inc 	a
8028: ED9257  			db 		$ED,$92,$57
802B: 3D      			dec 	a
802C: 08      			ex 		af,af' 								; put page in A'
802D: 21BF8A  			ld 		hl,PAGEStackBase 					; reset the page stack
8030: 22BD8A  			ld 		(PAGEStackPointer),hl
8033: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8034:         	PAGESwitch:
8034: F5      			push 	af
8035: E5      			push 	hl
              	
8036: F5      			push 	af 									; save A on stack
8037: 2ABD8A  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
803A: 08      			ex 		af,af'
803B: 77      			ld 		(hl),a
803C: 23      			inc 	hl
803D: 22BD8A  			ld 		(PAGEStackPointer),hl
              	
8040: F1      			pop 	af 									; restore new A
8041: ED9256  			db 		$ED,$92,$56							; switch to page A
8044: 3C      			inc 	a
8045: ED9257  			db 		$ED,$92,$57
8048: 3D      			dec 	a
8049: 08      			ex 		af,af' 								; put page in A'
              	
804A: E1      			pop 	hl
804B: F1      			pop 	af
804C: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
804D:         	PAGERestore:
804D: F5      			push 	af
804E: E5      			push 	hl
804F: 2ABD8A  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
8052: 2B      			dec 	hl
8053: 7E      			ld 		a,(hl)
8054: 22BD8A  			ld 		(PAGEStackPointer),hl
8057: ED9256  			db 		$ED,$92,$56							; switch to page A
805A: 3C      			inc 	a
805B: ED9257  			db 		$ED,$92,$57
805E: 3D      			dec 	a
805F: 08      			ex 		af,af' 								; reset A'
8060: E1      			pop 	hl
8061: F1      			pop 	af
8062: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		22nd November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              		
8063:         	FARCompileByte:
8063: F5      			push 	af 									; save byte and HL
8064: E5      			push 	hl
8065: F5      			push 	af 									; save byte
8066: 3AAB8A  			ld		a,(SINextFreeCodePage) 				; switch to page
8069: CD3480  			call 	PAGESwitch
806C: 2AA98A  			ld 		hl,(SINextFreeCode) 				; write to memory location
806F: F1      			pop 	af
8070: 77      			ld 		(hl),a
8071: 23      			inc 	hl 									; bump memory location
8072: 22A98A  			ld 		(SINextFreeCode),hl 				; write back
8075: CD4D80  			call 	PAGERestore
8078: E1      			pop 	hl 									; restore and exit
8079: F1      			pop 	af
807A: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
807B:         	FARCompileWord:
807B: F5      			push 	af 									; save byte and HL
807C: D5      			push 	de
807D: E5      			push 	hl
807E: EB      			ex 		de,hl 								; word into DE
807F: 3AAB8A  			ld		a,(SINextFreeCodePage) 				; switch to page
8082: CD3480  			call 	PAGESwitch
8085: 2AA98A  			ld 		hl,(SINextFreeCode) 				; write to memory location
8088: 73      			ld 		(hl),e
8089: 23      			inc 	hl 	
808A: 72      			ld 		(hl),d
808B: 23      			inc 	hl
808C: 22A98A  			ld 		(SINextFreeCode),hl 				; write back
808F: CD4D80  			call 	PAGERestore
8092: E1      			pop 	hl
8093: D1      			pop 	de 									; restore and exit
8094: F1      			pop 	af
8095: C9      			ret
              												
              			include "support/utilities.asm" 			; support utility functions
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Color Forth Macro Expansion Utilities
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;					Generic macro expansion. HL points to code, B to count
              	;
              	; ***************************************************************************************
              	
8096:         	MacroExpand:
8096: 7E      			ld 		a,(hl)
8097: CD6380  			call 	FARCompileByte
809A: 23      			inc 	hl
809B: 10F9    			djnz 	MacroExpand
809D: C9      			ret
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
809E:         	DIVDivideMod16:
              	
809E: C5      		push 	bc
809F: 42      		ld 		b,d 				; DE 
80A0: 4B      		ld 		c,e
80A1: EB      		ex 		de,hl
80A2: 210000  		ld 		hl,0
80A5: 78      		ld 		a,b
80A6: 0608    		ld 		b,8
80A8:         	Div16_Loop1:
80A8: 17      		rla
80A9: ED6A    		adc 	hl,hl
80AB: ED52    		sbc 	hl,de
80AD: 3001    		jr 		nc,Div16_NoAdd1
80AF: 19      		add 	hl,de
80B0:         	Div16_NoAdd1:
80B0: 10F6    		djnz 	Div16_Loop1
80B2: 17      		rla
80B3: 2F      		cpl
80B4: 47      		ld 		b,a
80B5: 79      		ld 		a,c
80B6: 48      		ld 		c,b
80B7: 0608    		ld 		b,8
80B9:         	Div16_Loop2:
80B9: 17      		rla
80BA: ED6A    		adc 	hl,hl
80BC: ED52    		sbc 	hl,de
80BE: 3001    		jr 		nc,Div16_NoAdd2
80C0: 19      		add 	hl,de
80C1:         	Div16_NoAdd2:
80C1: 10F6    		djnz 	Div16_Loop2
80C3: 17      		rla
80C4: 2F      		cpl
80C5: 51      		ld 		d,c
80C6: 5F      		ld 		e,a
80C7: C1      		pop 	bc
80C8: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80C9:         	MULTMultiply16:
80C9: C5      			push 	bc
80CA: D5      			push 	de
80CB: 44      			ld 		b,h 							; get multipliers in DE/BC
80CC: 4D      			ld 		c,l
80CD: 210000  			ld 		hl,0 							; zero total
80D0:         	__Core__Mult_Loop:
80D0: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80D2: 2801    			jr 		z,__Core__Mult_Shift
80D4: 19      			add 	hl,de 							; add adder to total
80D5:         	__Core__Mult_Shift:
80D5: CB38    			srl 	b 								; shift BC right.
80D7: CB19    			rr 		c
80D9: EB      			ex 		de,hl 							; shift DE left
80DA: 29      			add 	hl,hl
80DB: EB      			ex 		de,hl
80DC: 78      			ld 		a,b 							; loop back if BC is nonzero
80DD: B1      			or 		c
80DE: 20F0    			jr 		nz,__Core__Mult_Loop
80E0: D1      			pop 	de
80E1: C1      			pop 	bc
80E2: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
80E3:         	GFXClearScreen:
80E3: E5      			push 	hl 									; clear screen by reinitialising
80E4: 3AF68A  			ld 		a,(DIScreenMode)
80E7: 6F      			ld 		l,a
80E8: CDED80  			call 	GFXMode
80EB: E1      			pop 	hl
80EC: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80ED:         	GFXMode:
80ED: C5      			push 	bc
80EE: D5      			push 	de
80EF: E5      			push 	hl
80F0: 7D      			ld 		a,l 								; save current mode
80F1: 32F68A  			ld 		(DIScreenMode),a
80F4: 2D      			dec 	l 									; L = 1 mode layer2
80F5: 2808    			jr 		z,__GFXLayer2
80F7: 2D      			dec 	l
80F8: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80FA: CD5782  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80FD: 1808    			jr 		__GFXConfigure
              	
80FF:         	__GFXLayer2:
80FF: CDBA82  			call 	GFXInitialiseLayer2
8102: 1803    			jr 		__GFXConfigure
              	
8104:         	__GFXLowRes:
8104: CD5183  			call 	GFXInitialiseLowRes
              	
8107:         	__GFXConfigure:
8107: 7D      			ld 		a,l 								; save screen size
8108: 32E28A  			ld 		(DIScreenWidth),a
810B: 7C      			ld 		a,h
810C: 32E68A  			ld 		(DIScreenHeight),a
810F: EB      			ex 		de,hl 								; save driver
8110: 22EE8A  			ld 		(DIScreenDriver),hl
              	
8113: 6A      			ld 		l,d 								; put sizes in HL DE
8114: 2600    			ld 		h,0
8116: 1600    			ld 		d,0
8118: CDC980  			call 	MULTMultiply16 						; multiply to get size and store.
811B: 22EA8A  			ld 		(DIScreenSize),hl
              	
811E: E1      			pop 	hl
811F: D1      			pop 	de
8120: C1      			pop 	bc
8121: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8122:         	GFXWriteCharacter:
8122: F5      			push 	af
8123: C5      			push 	bc
8124: D5      			push 	de
8125: E5      			push 	hl
8126: 013081  			ld 		bc,__GFXWCExit
8129: C5      			push 	bc
812A: ED4BEE8A			ld 		bc,(DIScreenDriver)
812E: C5      			push 	bc
812F: C9      			ret
8130:         	__GFXWCExit:
8130: E1      			pop 	hl
8131: D1      			pop 	de
8132: C1      			pop 	bc
8133: F1      			pop 	af
8134: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8135:         	GFXWriteHexWord:
8135: 3E06    			ld 		a,6 
8137:         	GFXWriteHexWordA:
8137: C5      			push 	bc
8138: D5      			push 	de
8139: E5      			push 	hl
813A: 4F      			ld 		c,a
813B: 7A      			ld 		a,d
813C: D5      			push 	de
813D: CD4981  			call 	__GFXWHByte
8140: D1      			pop 	de
8141: 7B      			ld 		a,e
8142: CD4981  			call	__GFXWHByte
8145: E1      			pop 	hl
8146: D1      			pop 	de
8147: C1      			pop 	bc
8148: C9      			ret
              	
8149:         	__GFXWHByte:
8149: F5      			push 	af
814A: CB0F    			rrc 	a
814C: CB0F    			rrc		a
814E: CB0F    			rrc 	a
8150: CB0F    			rrc 	a
8152: CD5681  			call 	__GFXWHNibble
8155: F1      			pop 	af
8156:         	__GFXWHNibble:
8156: 51      			ld 		d,c
8157: E60F    			and 	15
8159: FE0A    			cp 		10
815B: 3802    			jr 		c,__GFXWHDigit
815D: C607    			add		a,7
815F:         	__GFXWHDigit:
815F: C630    			add 	a,48
8161: 5F      			ld 		e,a
8162: CD2281  			call 	GFXWriteCharacter
8165: 23      			inc 	hl
8166: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8167:         	GFXGetFontGraphicDE:
8167: F5      			push 	af
8168: E5      			push 	hl
8169: E67F    			and 	$7F 								; bits 0-6 only.
816B: D620    			sub 	32
816D: 6F      			ld 		l,a 								; put in HL
816E: 2600    			ld 		h,0
8170: 29      			add 	hl,hl 								; x 8
8171: 29      			add 	hl,hl
8172: 29      			add 	hl,hl
8173: ED5BF28A			ld 		de,(DIFontBase) 					; add the font base.
8177: 19      			add 	hl,de
8178: EB      			ex 		de,hl 								; put in DE (font address)
              	
8179: E1      			pop 	hl
817A: F1      			pop 	af
817B: FE7F    			cp 		$7F 								; map $7F to the prompt character
817D: C0      			ret 	nz
817E: 118281  			ld 		de,__GFXPromptCharacter
8181: C9      			ret
              	
8182:         	__GFXPromptCharacter:
8182: FC7E3F1F			db 		$FC,$7E,$3F,$1F
8186: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
818A:         	IOScanKeyboard:
818A: C5      			push 	bc
818B: D5      			push 	de
818C: E5      			push 	hl
              	
818D: 21DF81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8190: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8192: 06FE    			ld 		b,$FE
8194: ED78    			in 		a,(c)
8196: CB47    			bit 	0,a
8198: 2005    			jr 		nz,__kr1
819A: 212F82  			ld 		hl,__kr_shift_table
819D: 180B    			jr 		__kr2
819F:         	__kr1:
819F: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
81A1: ED78    			in 		a,(c)
81A3: CB4F    			bit 	1,a
81A5: 2003    			jr 		nz,__kr2
81A7: 210782  			ld 		hl,__kr_symbol_shift_table
81AA:         	__kr2:
              	
81AA: 1EFE    			ld 		e,$FE 								; scan pattern.
81AC: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81AD: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81AF: FEFE    			cp 		$FE
81B1: 2808    			jr 		z,___kr4
81B3: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81B5: FE7F    			cp 		$7F
81B7: 2802    			jr 		z,___kr4
81B9: 161F    			ld 		d,$01F 								; check all bits.
81BB:         	___kr4:
81BB: 43      			ld 		b,e 								; scan the keyboard
81BC: 0EFE    			ld 		c,$FE
81BE: ED78    			in 		a,(c)
81C0: 2F      			cpl 										; make that active high.
81C1: A2      			and 	d  									; and with check value.
81C2: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81C4: 23      			inc 	hl 									; next set of keyboard characters
81C5: 23      			inc 	hl
81C6: 23      			inc 	hl
81C7: 23      			inc 	hl
81C8: 23      			inc 	hl
              	
81C9: 7B      			ld 		a,e 								; get pattern
81CA: 87      			add 	a,a 								; shift left
81CB: F601    			or 		1 									; set bit 1.
81CD: 5F      			ld 		e,a
              	
81CE: FEFF    			cp 		$FF 								; finished when all 1's.
81D0: 20DA    			jr 		nz,__kr3 
81D2: AF      			xor 	a
81D3: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81D5:         	__kr_keypressed:
81D5: 23      			inc 	hl  								; shift right until carry set
81D6: 1F      			rra
81D7: 30FC    			jr 		nc,__kr_keypressed
81D9: 2B      			dec 	hl 									; undo the last inc hl
81DA: 7E      			ld 		a,(hl) 								; get the character number.
81DB:         	__kr_exit:
81DB: E1      			pop 	hl
81DC: D1      			pop 	de
81DD: C1      			pop 	bc
81DE: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
81DF:         	__kr_no_shift_table:
81DF: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81E3: 76617364	
81E7: 6667    	
81E9: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81ED: 74313233	
81F1: 3435    	
81F3: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
81F7: 36706F69	
81FB: 7579    	
81FD: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
8201: 6820006D	
8205: 6E62    	
              	
8207:         	__kr_symbol_shift_table:
8207: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
820B: 2F7E7C5C	
820F: 7B7D    	
8211: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
8215: 3E214023	
8219: 2425    	
821B: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
821F: 26223B00	
8223: 5D5B    	
8225: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8229: 5E20002E	
822D: 2C2A    	
              	
822F:         	__kr_shift_table:
822F: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8233: 2F7E7C5C	
8237: 7B7D    	
8239: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
823D: 3E214023	
8241: 2414    	
8243: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8247: 15223B00	
824B: 5D5B    	
824D: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8251: 5E20002E	
8255: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8257:         	GFXInitialise48k:
8257: F5      			push 	af 									; save registers
8258: C5      			push 	bc
              	
8259: 013B12  			ld 		bc,$123B 							; Layer 2 access port
825C: 3E00    			ld 		a,0 								; disable Layer 2
825E: ED79    			out 	(c),a
8260: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8264: 210040  			ld 		hl,$4000 							; clear pixel memory
8267: 3600    	__cs1:	ld 		(hl),0
8269: 23      			inc 	hl
826A: 7C      			ld 		a,h
826B: FE58    			cp 		$58
826D: 20F8    			jr 		nz,__cs1
826F: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8271: 23      			inc 	hl
8272: 7C      			ld 		a,h
8273: FE5B    			cp 		$5B
8275: 20F8    			jr 		nz,__cs2	
8277: AF      			xor 	a 									; border off
8278: D3FE    			out 	($FE),a
827A: C1      			pop 	bc
827B: F1      			pop 	af
827C: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
827F: 118382  			ld 		de,GFXPrintCharacter48k
8282: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8283:         	GFXPrintCharacter48k:
8283: F5      			push 	af 									; save registers
8284: C5      			push 	bc
8285: D5      			push 	de
8286: E5      			push 	hl
              	
8287: 43      			ld 		b,e 								; character in B
8288: 7C      			ld 		a,h 								; check range.
8289: FE03    			cp 		3
828B: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
828D: E5      			push 	hl 									; save position.
828E: 7C      			ld 		a,h
828F: C658    			add 	$58
8291: 67      			ld 		h,a
              	
8292: 7A      			ld 		a,d 								; get current colour
8293: E607    			and 	7  									; mask 0..2
8295: F640    			or 		$40  								; make bright
8297: 77      			ld 		(hl),a 								; store it.	
8298: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8299: D5      			push 	de
829A: EB      			ex 		de,hl
829B: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
829C: 7A      			ld 		a,d
829D: E603    			and 	3
829F: 87      			add 	a,a
82A0: 87      			add 	a,a
82A1: 87      			add 	a,a
82A2: F640    			or 		$40
82A4: 67      			ld 		h,a
82A5: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
82A6: 78      			ld 		a,b 								; get character
82A7: CD6781  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
82AA: 78      			ld 		a,b
82AB: 0608    			ld 		b,8 								; copy 8 characters
82AD: 0E00    			ld 		c,0 								; XOR value 0
82AF:         	__ZXWCCopy:
82AF: 1A      			ld 		a,(de)								; get font data
82B0: 77      			ld 		(hl),a 								; write back
82B1: 24      			inc 	h 									; bump pointers
82B2: 13      			inc 	de
82B3: 10FA    			djnz 	__ZXWCCopy 							; do B times.
82B5:         	__ZXWCExit:
82B5: E1      			pop 	hl 									; restore and exit
82B6: D1      			pop 	de
82B7: C1      			pop 	bc
82B8: F1      			pop 	af
82B9: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82BA:         	GFXInitialiseLayer2:
82BA: F5      			push 	af
82BB: C5      			push 	bc
82BC: D5      			push 	de
82BD: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82C1: 1E02    			ld 		e,2 								; 3 banks to erase
82C3:         	L2PClear:
82C3: 7B      			ld 		a,e 								; put bank number in bits 6/7
82C4: CB0F    			rrc 	a
82C6: CB0F    			rrc 	a
82C8: F603    			or 		2+1 								; shadow on, visible, enable write paging
82CA: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82CD: ED79    			out 	(c),a
82CF: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82D2: 55      			ld 		d,l 								; D = 0, slightly quicker.
82D3:         	L2PClearBank: 										; assume default palette :)
82D3: 2B      			dec 	hl
82D4: 72      			ld 		(hl),d
82D5: 7C      			ld 		a,h
82D6: B5      			or 		l
82D7: 20FA    			jr		nz,L2PClearBank
82D9: 1D      			dec 	e
82DA: F2C382  			jp 		p,L2PClear
              	
82DD: AF      			xor 	a
82DE: D3FE    			out 	($FE),a
              	
82E0: D1      			pop 	de
82E1: C1      			pop 	bc
82E2: F1      			pop 	af
82E3: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82E6: 11EA82  			ld 		de,GFXPrintCharacterLayer2
82E9: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82EA:         	GFXPrintCharacterLayer2:
82EA: F5      			push 	af
82EB: C5      			push 	bc
82EC: D5      			push 	de
82ED: E5      			push 	hl
82EE: DDE5    			push 	ix
              	
82F0: 43      			ld 		b,e 								; save A temporarily
82F1: 78      			ld 		a,b
              	
82F2: 7C      			ld 		a,h
82F3: FE03    			cp 		3
82F5: 3053    			jr 		nc,__L2Exit 						; check position in range
82F7: 78      			ld 		a,b
              	
82F8: F5      			push 	af 	
82F9: AF      			xor 	a 									; convert colour in C to palette index
82FA: CB42    			bit 	0,d 								; (assumes standard palette)
82FC: 2802    			jr 		z,__L2Not1
82FE: F603    			or 		$03
8300:         	__L2Not1:
8300: CB52    			bit 	2,d
8302: 2802    			jr 		z,__L2Not2
8304: F61C    			or 		$1C
8306:         	__L2Not2:
8306: CB4A    			bit 	1,d
8308: 2802    			jr 		z,__L2Not3
830A: F6C0    			or 		$C0
830C:         	__L2Not3:
830C: 4F      			ld 		c,a 								; C is foreground
830D: F1      			pop 	af 									; restore char
              	
830E: CD6781  			call 	GFXGetFontGraphicDE 				; font offset in DE
8311: D5      			push 	de 									; transfer to IX
8312: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
8314: C5      			push 	bc
8315: 7C      			ld  	a,h 								; this is the page number.
8316: CB0F    			rrc 	a
8318: CB0F    			rrc 	a
831A: E6C0    			and 	$C0 								; in bits 6 & 7
831C: F603    			or 		$03 								; shadow on, visible, enable write pagin.
831E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8321: ED79    			out 	(c),a
8323: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8324: EB      			ex 		de,hl
8325: 6B      			ld 		l,e
8326: 2600    			ld 		h,0
8328: 29      			add 	hl,hl 								
8329: 29      			add 	hl,hl
832A: 29      			add 	hl,hl
832B: CB24    			sla 	h
832D: CB24    			sla 	h
832F: CB24    			sla 	h
              	
8331: 1E08    			ld 		e,8 								; do 8 rows
8333:         	__L2Outer:
8333: E5      			push 	hl 									; save start
8334: 1608    			ld 		d,8 								; do 8 columns
8336: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8339: DD23    			inc 	ix
833B:         	__L2Loop:
833B: 3600    			ld 		(hl),0 								; background
833D: 87      			add 	a,a 								; shift pattern left
833E: 3001    			jr 		nc,__L2NotSet
8340: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8341:         	__L2NotSet:
8341: 23      			inc 	hl
8342: 15      			dec 	d 									; do a row
8343: 20F6    			jr 		nz,	__L2Loop
8345: E1      			pop 	hl 									; restore, go 256 bytes down.
8346: 24      			inc 	h
8347: 1D      			dec 	e 									; do 8 rows
8348: 20E9    			jr 		nz,__L2Outer	
834A:         	__L2Exit:
834A: DDE1    			pop 	ix
834C: E1      			pop 	hl
834D: D1      			pop 	de
834E: C1      			pop 	bc
834F: F1      			pop 	af
8350: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		22nd November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8351:         	GFXInitialiseLowRes:
8351: F5      			push 	af
8352: C5      			push 	bc
8353: D5      			push 	de
              	
8354: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8358: AF      			xor 	a 									; layer 2 off.
8359: 013B12  			ld 		bc,$123B 							; out to layer 2 port
835C: ED79    			out 	(c),a
              	
835E: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8361: 110060  			ld 		de,$6000
8364:         	LowClearScreen: 									; assume default palette :)
8364: AF      			xor 	a
8365: 77      			ld 		(hl),a
8366: 12      			ld 		(de),a
8367: 23      			inc 	hl
8368: 13      			inc 	de
8369: 7C      			ld 		a,h
836A: FE58    			cp 		$58
836C: 20F6    			jr		nz,LowClearScreen
836E: AF      			xor 	a
836F: D3FE    			out 	($FE),a
8371: D1      			pop 	de
8372: C1      			pop 	bc
8373: F1      			pop 	af
8374: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8377: 117B83  			ld 		de,GFXPrintCharacterLowRes
837A: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
837B:         	GFXPrintCharacterLowRes:
837B: F5      			push 	af
837C: C5      			push 	bc
837D: D5      			push 	de
837E: E5      			push 	hl
837F: DDE5    			push 	ix
              	
8381: 43      			ld 		b,e 								; save character in B
              	
8382: 29      			add 	hl,hl
8383: 29      			add 	hl,hl
8384: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8385: FE03    			cp 		3
8387: 3046    			jr 		nc,__LPExit
              	
8389: 7A      			ld 		a,d 								; only lower 3 bits of colour
838A: E607    			and 	7
838C: 4F      			ld 		c,a 								; C is foreground
              	
838D: 78      			ld 		a,b 								; get char back
838E: CD6781  			call 	GFXGetFontGraphicDE
8391: D5      			push 	de
8392: DDE1    			pop 	ix
              	
8394: EB      			ex 		de,hl
8395: 7B      			ld 		a,e 								; put DE => HL
8396: E6C0    			and 	192 								; these are part of Y
8398: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8399: 62      			ld 		h,d		
839A: 29      			add 	hl,hl
839B: 29      			add 	hl,hl
839C: 29      			add 	hl,hl
839D: 29      			add 	hl,hl
839E: CBF4    			set 	6,h 								; put into $4000 range
              	
83A0: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83A2: A3      			and 	e 									; and with E, gives X position
83A3: 87      			add 	a,a 								; now multiplied by 8.
83A4: 5F      			ld 		e,a 								; DE is x offset.
83A5: 1600    			ld 		d,0  
              	
83A7: 19      			add 	hl,de
83A8: 7C      			ld 		a,h
83A9: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83AB: 3804    			jr 		c,__LowNotLower2
83AD: 110008  			ld 		de,$0800
83B0: 19      			add 	hl,de
83B1:         	__LowNotLower2:
83B1: 1E08    			ld 		e,8 								; do 8 rows
83B3:         	__LowOuter:
83B3: E5      			push 	hl 									; save start
83B4: 1608    			ld 		d,8 								; do 8 columns
83B6: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83B9: DD23    			inc 	ix
83BB:         	__LowLoop:
83BB: 3600    			ld 		(hl),0 								; background
83BD: 87      			add 	a,a 								; shift pattern left
83BE: 3001    			jr 		nc,__LowNotSet
83C0: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83C1:         	__LowNotSet:
83C1: 2C      			inc 	l
83C2: 15      			dec 	d 									; do a row
83C3: 20F6    			jr 		nz,	__LowLoop
83C5: E1      			pop 	hl 									; restore, go 256 bytes down.
83C6: D5      			push 	de
83C7: 118000  			ld 		de,128
83CA: 19      			add 	hl,de
83CB: D1      			pop 	de
83CC: 1D      			dec 	e 									; do 8 rows
83CD: 20E4    			jr 		nz,__LowOuter	
83CF:         	__LPExit:
83CF: DDE1    			pop 	ix
83D1: E1      			pop 	hl
83D2: D1      			pop 	de
83D3: C1      			pop 	bc
83D4: F1      			pop 	af
83D5: C9      			ret
              	
              	
              			include "compiler/constant.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at BC to constant in HL. DE 0, Carry Clear if true
              	;							Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
83D6:         	CONSTConvert:
83D6: C5      		push 	bc
              	
83D7: 50      		ld 		d,b 									; string in DE.
83D8: 59      		ld 		e,c
83D9: 210000  		ld 		hl,$0000								; result in HL.
83DC: 13      		inc 	de 										; skip over the tag
83DD: 0E00    		ld 		c,0										; C is the negate flag
83DF:         	__CONConvLoop:
83DF: 1A      		ld 		a,(de)									; get next character
83E0: 13      		inc 	de
              	
83E1: FE30    		cp 		'0'										; must be 0-9 otherwise
83E3: 3830    		jr 		c,__CONConFail
83E5: FE3A    		cp 		'9'+1
83E7: 302C    		jr 		nc,__CONConFail
              	
83E9: C5      		push 	bc
83EA: E5      		push 	hl 										; HL -> BC
83EB: C1      		pop 	bc
83EC: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
83ED: 29      		add 	hl,hl
83EE: 09      		add 	hl,bc 						
83EF: 29      		add 	hl,hl 									; HL := HL * 10
83F0: 0600    		ld 		b,0 									; add the digit into HL
83F2: E60F    		and 	15
83F4: 4F      		ld 		c,a
83F5: 09      		add 	hl,bc
83F6: C1      		pop 	bc
              	
83F7: 1A      		ld 		a,(de) 									; check ends in -
83F8: FE2D    		cp 		'-'									
83FA: 2806    		jr 		z,__CONMinusExit 						
83FC: CB7F    		bit 	7,a 									; check done everything.
83FE: 28DF    		jr 		z,__CONConvLoop
8400: 180D    		jr 		__CONNotNegative
              	
8402:         	__CONMinusExit:
8402: 13      		inc 	de 										; if not the last, it's an error.
8403: 1A      		ld 		a,(de)
8404: CB7F    		bit 	7,a
8406: 280D    		jr		z,__CONConFail
              	
8408: 7C      		ld 		a,h 									; negate HL
8409: 2F      		cpl 	
840A: 67      		ld 		h,a
840B: 7D      		ld 		a,l
840C: 2F      		cpl
840D: 6F      		ld 		l,a
840E: 23      		inc 	hl
              	
840F:         	__CONNotNegative:
840F: 110000  		ld 		de,$0000
8412: AF      		xor 	a 										; clear carry
8413: C1      		pop 	bc
8414: C9      		ret
              	
8415:         	__CONConFail: 										; didn't convert
8415: 21FFFF  		ld 		hl,$FFFF
8418: 11FFFF  		ld 		de,$FFFF
841B: 37      		scf
841C: C1      		pop 	bc
841D: C9      		ret
              	
              		
              			include "compiler/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at BC ends in $80-$FF, uses the current page/pointer
              	;		values. A identifies whether MACRO ($80) or FORTH $(00)
              	;
              	; ***********************************************************************************************
              	
841E:         	DICTAddWord:
841E: F5      			push 	af 									; registers to stack.
841F: C5      			push 	bc
8420: D5      			push 	de
8421: E5      			push	hl
8422: DDE5    			push 	ix
              	
8424: C5      			push 	bc 									; save word address.
8425: 4F      			ld 		c,a 								; put the dictionary marker in C
8426: 06FF    			ld 		b,-1								; put length of string in B
8428:         	__DICTAddGetLength:
8428: 23      			inc 	hl
8429: 04      			inc 	b
842A: CB7E    			bit 	7,(hl)
842C: 28FA    			jr 		z,__DICTAddGetLength
842E: E1      			pop 	hl 									; restore word address.
              	
842F: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
8431: CD3480  			call 	PAGESwitch
              	
8434: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
8438:         	__DICTFindEndDictionary:
8438: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
843B: B7      			or 		a
843C: 2807    			jr 		z,__DICTCreateEntry
843E: 5F      			ld 		e,a
843F: 1600    			ld 		d,0
8441: DD19    			add 	ix,de
8443: 18F3    			jr 		__DICTFindEndDictionary
              	
8445:         	__DICTCreateEntry:
8445: 78      			ld 		a,b
8446: C605    			add 	a,5
8448: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
844B: 3AAB8A  			ld 		a,(SINextFreeCodePage)				; code page
844E: DD7701  			ld 		(ix+1),a
8451: ED5BA98A			ld 		de,(SINextFreeCode)					; code address
8455: DD7302  			ld 		(ix+2),e
8458: DD7203  			ld 		(ix+3),d 
              	
845B: 79      			ld 		a,c 								; get FORTH/MACRO flag
845C: E680    			and 	$80
845E: B0      			or 		b 									; or length in
845F: DD7704  			ld 		(ix+4),a 							; length (0..5) forth/macro (7)
              	
8462: EB      			ex 		de,hl 								; put name in DE
8463: 13      			inc 	de 									; skip over tag.
8464:         	__DICTAddCopy:
8464: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
8465: DD7705  			ld 		(ix+5),a
8468: DD23    			inc 	ix 									
846A: 13      			inc 	de
846B: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
846D: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
8471: CD4D80  			call 	PAGERestore
8474: DDE1    			pop 	ix 									; restore and exit
8476: E1      			pop 	hl
8477: D1      	 		pop 	de
8478: C1      			pop 	bc
8479: F1      			pop 	af
847A: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. BC points to name. A is the mask for flag/macro.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
847B:         	DICTFindWord:
847B: C5      			push 	bc 								; save registers - return in EHL Carry
847C: DDE5    			push 	ix
              	
847E: 60      			ld 		h,b 							; put address of name in HL. 
847F: 69      			ld 		l,c
              	
8480: 4F      			ld 		c,a 							; macro forth flag in C
              	
8481: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
8483: CD3480  			call 	PAGESwitch
              	
8486: DD2100C0			ld 		ix,$C000 						; dictionary start			
848A:         	__DICTFindMainLoop:
848A: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
848D: B7      			or 		a
848E: 283E    			jr 		z,__DICTFindFail
              	
8490: DD7E04  			ld 		a,(ix+4) 						; get the flag/macro (and length) byte
8493: A9      			xor 	c 								; xor with the mask
8494: E680    			and 	$80 							; only interested in bit 7
8496: 202D    			jr 		nz,__DICTFindNext 				; so if different, go to next.
              	
8498: DDE5    			push 	ix 								; save pointers on stack.
849A: E5      			push 	hl 
              	
849B: DD7E04  			ld 		a,(ix+4) 						; characters to compare
849E: E63F    			and 	$3F
84A0: 47      			ld 		b,a
84A1: 23      			inc 	hl 								; skip over tag
84A2:         	__DICTCheckName:
84A2: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
84A5: BE      			cp 		(hl) 							; compare vs the matching character.
84A6: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
84A8: 23      			inc 	hl 								; HL point to next character
84A9: DD23    			inc 	ix
84AB: 10F5    			djnz 	__DICTCheckName
              	
84AD: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
84AF: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
84B1: E1      			pop 	hl 								; Found a match. restore HL and IX
84B2: DDE1    			pop 	ix
84B4: 1600    			ld 		d,0 							; D = 0 for neatness.
84B6: DD5E01  			ld 		e,(ix+1)						; E = page
84B9: DD6E02  			ld 		l,(ix+2)						; HL = address
84BC: DD6603  			ld 		h,(ix+3)		
84BF: AF      			xor 	a 								; clear the carry flag.
84C0: 1813    			jr 		__DICTFindExit
              	
84C2:         	__DICTFindNoMatch:								; this one doesn't match.
84C2: E1      			pop 	hl 								; restore HL and IX
84C3: DDE1    			pop 	ix
84C5:         	__DICTFindNext:
84C5: DD5E00  			ld 		e,(ix+0)						; DE = offset
84C8: 1600    			ld 		d,$00
84CA: DD19    			add 	ix,de 							; next word.
84CC: 18BC    			jr 		__DICTFindMainLoop				; and try the next one.
              	
84CE:         	__DICTFindFail:
84CE: 110000  			ld 		de,$0000 						; return all zeros.
84D1: 210000  			ld 		hl,$0000
84D4: 37      			scf 									; set carry flag
84D5:         	__DICTFindExit:
84D5: F5      			push 	af
84D6: CD4D80  			call 	PAGERestore
84D9: F1      			pop 	af
84DA: DDE1    			pop 	ix 								; pop registers and return.
84DC: C1      			pop 	bc
84DD: C9      			ret
              			include "compiler/compiler.asm"
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Source loader
              	;		Date : 		23rd November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;	 Handle the word in BC. The current uncached stack is at DE (e.g. TOS is on the stack)
              	;					Returns DE possibly changed depending on what's been done.
              	;
              	;	Note each level of stack needs its own stack. So we really only want three levels of
              	; 	reentrancy.  L1 : Loading the bootstrap L2 : Executing a typed word in the CLI
              	;	L3 : compiling code as a result of that word.
              	;
              	;	The stack is only needed for messing around in here though.
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
84DE:         	COMCompileExecute:
              	
84DE: C5      			push 	bc
84DF: E5      			push 	hl 									; save BC, HL and IX.
84E0: DDE5    			push 	ix
              	
84E2: D5      			push 	de 									; put the "data stack" in ix
84E3: DDE1    			pop 	ix
              	
84E5: 0A      			ld 		a,(bc) 								; read the tag.
84E6: FE84    			cp 		$84
84E8: CAFE84  			jp 		z,__COMCE_Compiler_Green
84EB: FE86    			cp 		$86
84ED: CA1785  			jp 		z,__COMCE_Executor_Yellow
              	;
              	;						  Come here to exit successfully
              	;
84F0:         	__COMExit: 
84F0: DDE5    			push 	ix 									; transfer the "data stack" to DE
84F2: D1      			pop 	de
              	
84F3: DDE1    			pop 	ix									; restore IX and HL and BC
84F5: E1      			pop 	hl
84F6: C1      			pop 	bc
84F7: C9      			ret
              	;
              	;									Come here to fail
              	;
84F8:         	__COMError:
84F8: C5      			push 	bc 									; put the word in HL
84F9: E1      			pop 	hl
84FA: 23      			inc 	hl 									; skip the tag
84FB: C31E80  			jp 		ErrorHandler
              	
              	; ********************************************************************************************************
              	;
              	;										Green Compiler
              	;
              	; ********************************************************************************************************
              	
84FE:         	__COMCE_Compiler_Green:
84FE: 3E80    			ld 		a,$80 								; look for the word in MACRO
8500: CD7B84  			call 	DICTFindWord
8503: D24385  			jp 		nc,__COMCE_ExecuteEHL 				; if found then *execute* it.
              	
8506: 3E00    			ld 		a,$00 								; look for the word in FORTH
8508: CD7B84  			call 	DICTFindWord
850B: D23885  			jp 		nc,__COMCE_CompileCallEHL 			; if found then compile a call to it.
              	
850E: CDD683  			call 	CONSTConvert 						; try a number.
8511: D22885  			jp 		nc,__COMCE_CompileConstantCode		; if found then compile a push integer
              	
8514: C3F884  			jp 		__COMError
              	
              	; ********************************************************************************************************
              	;
              	;										Yellow Compiler
              	;
              	; ********************************************************************************************************
              	
8517:         	__COMCE_Executor_Yellow:
8517: 3E00    			ld 		a,$00 								; look for the word in FORTH
8519: CD7B84  			call 	DICTFindWord
851C: D24385  			jp 		nc,__COMCE_ExecuteEHL 				; if found then *execute* it.
              	
851F: CDD683  			call 	CONSTConvert 						; try a number.
8522: D27E85  			jp 		nc,__COMCE_ExecuteConstantCode		; if found then compile a push integer
              	
8525: C3F884  			jp 		__COMError
              	
              	; ********************************************************************************************************
              	;
              	;							  Compile code to Push constant HL
              	;
              	; ********************************************************************************************************
              	
8528:         	__COMCE_CompileConstantCode:
8528: 3ED5    			ld 		a,$D5 								; PUSH DE
852A: CD6380  			call 	FARCompileByte
852D: 3E11    			ld 		a,$11 								; LD DE,xxxx
852F: CD6380  			call 	FARCompileByte		
8532: CD7B80  			call 	FARCompileWord 						; the constant
8535: C3F084  			jp 		__COMExit 							; and we are done.
              	
              	; ********************************************************************************************************
              	;
              	;							  Compile code to call code at EHL
              	;
              	; ********************************************************************************************************
              	
8538:         	__COMCE_CompileCallEHL:
              			;
              			;		TODO *** If HL >= $C000 and E != Here.Page then paging call required.
              			;
8538: 3ECD    			ld 		a,$CD 								; call
853A: CD6380  			call 	FARCompileByte		
853D: CD7B80  			call 	FARCompileWord 						; the constant
8540: C3F084  			jp 		__COMExit 							; and we are done.
              	
              	; ********************************************************************************************************
              	;
              	;				    Execute routine at EHL. This needs to be re-entrant
              	;
              	; ********************************************************************************************************
              	
8543:         	__COMCE_ExecuteEHL:
8543: 7B      			ld 		a,e 								; first, switch to that page
8544: CD3480  			call 	PAGESwitch
8547: EB      			ex 		de,hl 								; put the call address in DE for a minute
              	
8548: 210000  			ld 		hl,$0000 							; get the actual SP value.
854B: 39      			add 	hl,sp
              	
854C: ED4BCF8A			ld 		bc,(COMXStackPointer)				; Push it on the stack used by Compiler.
8550: 7D      			ld 		a,l
8551: 02      			ld 		(bc),a
8552: 03      			inc 	bc
8553: 7C      			ld 		a,h
8554: 02      			ld 		(bc),a
8555: 03      			inc 	bc
8556: ED43CF8A			ld 		(COMXStackPointer),bc 
              	
855A: DDE5    			push 	ix 									; put the runtime stack pointer in SP
855C: E1      			pop 	hl
855D: F9      			ld 		sp,hl 
              	
855E: EB      			ex 		de,hl 								; put address back in HL
              	
855F: D1      			pop 	de  								; cache the TOS in DE.
              	
8560: CD7D85  			call 	__COMCE_CallHL 						; same as CALL (HL)
              	
8563: D5      			push 	de 									; make the stack uncached.
              	
8564: 210000  			ld 		hl,$0000 							; copy SP back into IX
8567: 39      			add 	hl,sp 								; the save place of the working stack.
8568: E5      			push 	hl
8569: DDE1    			pop 	ix
              	
856B: 2ACF8A  			ld 		hl,(COMXStackPointer) 				; retrieve the old stack pointer
856E: 2B      			dec 	hl
856F: 56      			ld 		d,(hl)
8570: 2B      			dec 	hl
8571: 5E      			ld 		e,(hl)
8572: 22CF8A  			ld 		(COMXStackPointer),hl 
              	
8575: EB      			ex 		de,hl 								; and put it in SP
8576: F9      			ld 		sp,hl
              	
8577: CD4D80  			call 	PAGERestore 						; restore the original page
              	
857A: C3F084  			jp 		__COMExit							; and we're done :)
              	
857D:         	__COMCE_CallHL:
857D: E9      			jp 		(hl)
              	
              	; ********************************************************************************************************
              	;
              	;					Modify the Stack at IX so it has HL on the top now
              	;	
              	; ********************************************************************************************************
              	
857E:         	__COMCE_ExecuteConstantCode:
857E: DD75FE  			ld 		(ix-2),l 							; IX is our uncached stack.
8581: DD74FF  			ld 		(ix-1),h
8584: DD2B    			dec 	ix
8586: DD2B    			dec 	ix
8588: C3F084  			jp 		__COMExit
              	
              			include "temp/__words.asm" 					; core words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @forth[ix]   *
              	
858B:         	cforth_2a_forth:
858B: DDE1    	    pop ix
858D:         	cforth_2a_start:
858D: E1      	  pop  hl
858E: CDC980  	  call  MULTMultiply16        ; HL := HL * DE
8591: EB      	  ex   de,hl
              	
              	; @end
              	
8592:         	cforth_2a_end:
8592: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /
              	
8594:         	cforth_2f_forth:
8594: DDE1    	    pop ix
8596:         	cforth_2f_start:
8596: E1      	  pop  hl
8597: CD9E80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
              	
              	; @end
              	
859A:         	cforth_2f_end:
859A: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   mod
              	
859C:         	cforth_6d_6f_64_forth:
859C: DDE1    	    pop ix
859E:         	cforth_6d_6f_64_start:
859E: E1      	  pop  hl
859F: CD9E80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
85A2: EB      	  ex   de,hl
              	
              	; @end
              	
85A3:         	cforth_6d_6f_64_end:
85A3: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix]   /mod
              	
85A5:         	cforth_2f_6d_6f_64_forth:
85A5: DDE1    	    pop ix
85A7:         	cforth_2f_6d_6f_64_start:
85A7: E1      	  pop  hl
85A8: CD9E80  	  call  DIVDivideMod16       ; DE := DE/HL HL = DE%HL
85AB: E5      	  push  hl
              	
              	; @end
              	
85AC:         	cforth_2f_6d_6f_64_end:
85AC: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] +
              	
85AE:         	cforth_2b_forth:
85AE: DDE1    	    pop ix
85B0:         	cforth_2b_start:
85B0: E1      	  pop  hl
85B1: 19      	  add  hl,de
85B2: EB      	  ex   de,hl
              	
              	; @end
              	
85B3:         	cforth_2b_end:
85B3: DDE9    	    jp (ix)
85B5:         	cforth_2b_macro:
85B5: 0603    	    ld b,cforth_2b_end-cforth_2b_start
85B7: 21B085  	    ld hl,cforth_2b_start
85BA: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  and
              	
85BD:         	cforth_61_6e_64_forth:
85BD: E1      	    pop hl
85BE:         	cforth_61_6e_64_start:
85BE: C1      	  pop  bc
85BF: 7B      	  ld   a,e
85C0: A1      	  and  c
85C1: 5F      	  ld   e,a
85C2: 7A      	  ld   a,d
85C3: A0      	  and  b
85C4: 57      	  ld   d,a
              	
              	; @end
              	
85C5:         	cforth_61_6e_64_end:
85C5: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  or
              	
85C6:         	cforth_6f_72_forth:
85C6: E1      	    pop hl
85C7:         	cforth_6f_72_start:
85C7: C1      	  pop  bc
85C8: 7B      	  ld   a,e
85C9: A9      	  xor  c
85CA: 5F      	  ld   e,a
85CB: 7A      	  ld   a,d
85CC: A8      	  xor  b
85CD: 57      	  ld   d,a
              	
              	; @end
              	
85CE:         	cforth_6f_72_end:
85CE: E9      	    jp (hl)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[hl]  +or
              	
85CF:         	cforth_2b_6f_72_forth:
85CF: E1      	    pop hl
85D0:         	cforth_2b_6f_72_start:
85D0: C1      	  pop  bc
85D1: 7B      	  ld   a,e
85D2: B1      	  or   c
85D3: 5F      	  ld   e,a
85D4: 7A      	  ld   a,d
85D5: B0      	  or   b
85D6: 57      	  ld   d,a
              	
              	; @end
              	
85D7:         	cforth_2b_6f_72_end:
85D7: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   compare.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Comparison words, min and max.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[ix] less
              	
85D8:         	cforth_6c_65_73_73_forth:
85D8: DDE1    	    pop ix
85DA:         	cforth_6c_65_73_73_start:
85DA: E1      	  pop  hl
85DB: EB      	  ex   de,hl
85DC: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
85DD: AC      	  xor  h
85DE: 87      	  add  a,a      ; if the signs are different, check those.
85DF: 380C    	  jr   c,__LessDifferentSigns
              	
85E1: D5      	  push  de
85E2: EB      	  ex   de,hl      ; want to do B-A
85E3: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
85E5: D1      	  pop  de
85E6: 3809    	  jr   c,__LessTrue
              	
85E8:         	__LessFalse:
85E8: 110000  	  ld   de,$0000
85EB: 1807    	  jr   __LessExit
              	
85ED:         	__LessDifferentSigns:
85ED: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
85EF: 28F7    	  jr   z,__LessFalse
              	
85F1:         	__LessTrue:
85F1: 11FFFF  	  ld   de,$FFFF
85F4:         	__LessExit:
              	
              	
              	; @end
              	
85F4:         	cforth_6c_65_73_73_end:
85F4: DDE9    	    jp (ix)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphic.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Graphic System words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] screen.mode
              	
85F6:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth:
85F6: E1      	    pop hl
85F7:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start:
85F7: 7B      	  ld   a,e
85F8: CDED80  	  call GFXMode
85FB: D1      	  pop  de
              	
              	; @end
              	
85FC:         	cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end:
85FC: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] screen.clear
              	
85FD:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth:
85FD:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start:
85FD: CDE380  	  call GFXClearScreen
              	
              	; @end
              	
8600:         	cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end:
8600: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ix] screen!
              	
8601:         	cforth_73_63_72_65_65_6e_21_forth:
8601: DDE1    	    pop ix
8603:         	cforth_73_63_72_65_65_6e_21_start:
8603: EB      	  ex   de,hl        ; TOS (address) in HL
8604: D1      	  pop  de         ; data in DE
8605: CD2281  	  call  GFXWriteCharacter     ; display it
8608: D1      	  pop  de         ; fix up stack
              	
              	; @end
              	
8609:         	cforth_73_63_72_65_65_6e_21_end:
8609: DDE9    	    jp (ix)
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   15th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ix] @
              	
860B:         	cforth_40_forth:
860B: DDE1    	    pop ix
860D:         	cforth_40_start:
860D: EB      	  ex   de,hl
860E: 5E      	  ld   e,(hl)
860F: 23      	  inc  hl
8610: 56      	  ld   d,(hl)
              	
              	; @end
              	
8611:         	cforth_40_end:
8611: DDE9    	    jp (ix)
8613:         	cforth_40_macro:
8613: 0604    	    ld b,cforth_40_end-cforth_40_start
8615: 210D86  	    ld hl,cforth_40_start
8618: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] c@
              	
861B:         	cforth_63_40_forth:
861B: E1      	    pop hl
861C:         	cforth_63_40_start:
861C: 1A      	  ld   a,(de)
861D: 5F      	  ld   e,a
861E: 1600    	  ld   d,0
              	
              	; @end
              	
8620:         	cforth_63_40_end:
8620: E9      	    jp (hl)
8621:         	cforth_63_40_macro:
8621: 0604    	    ld b,cforth_63_40_end-cforth_63_40_start
8623: 211C86  	    ld hl,cforth_63_40_start
8626: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] c!
              	
8629:         	cforth_63_21_forth:
8629: DDE1    	    pop ix
862B:         	cforth_63_21_start:
862B: E1      	  pop  hl
862C: 7D      	  ld   a,l
862D: 12      	  ld   (de),a
862E: D1      	  pop  de
              	
              	; @end
              	
862F:         	cforth_63_21_end:
862F: DDE9    	    jp (ix)
8631:         	cforth_63_21_macro:
8631: 0604    	    ld b,cforth_63_21_end-cforth_63_21_start
8633: 212B86  	    ld hl,cforth_63_21_start
8636: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] !
              	
8639:         	cforth_21_forth:
8639: DDE1    	    pop ix
863B:         	cforth_21_start:
863B: E1      	  pop  hl
863C: 73      	  ld   (hl),e
863D: 23      	  inc  hl
863E: 72      	  ld   (hl),d
863F: D1      	  pop  de
              	
              	; @end
              	
8640:         	cforth_21_end:
8640: DDE9    	    jp (ix)
8642:         	cforth_21_macro:
8642: 0605    	    ld b,cforth_21_end-cforth_21_start
8644: 213B86  	    ld hl,cforth_21_start
8647: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] +!
              	
864A:         	cforth_2b_21_forth:
864A: DDE1    	    pop ix
864C:         	cforth_2b_21_start:
864C: E1      	  pop  hl      ; address in DE, get data in HL
864D: EB      	  ex   de,hl     ; address in HL, data in E
864E: 7E      	  ld   a,(hl)
864F: 83      	  add  a,e
8650: 77      	  ld   (hl),a
8651: 23      	  inc  hl
8652: 7E      	  ld   a,(hl)
8653: 8A      	  adc  a,d
8654: 77      	  ld   (hl),a
8655: D1      	  pop  de
              	
              	; @end
              	
8656:         	cforth_2b_21_end:
8656: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] or!
              	
8658:         	cforth_6f_72_21_forth:
8658: DDE1    	    pop ix
865A:         	cforth_6f_72_21_start:
865A: E1      	  pop  hl
865B: 7E      	  ld   a,(hl)
865C: B3      	  or   e
865D: 77      	  ld   (hl),a
865E: 23      	  inc  hl
865F: 7E      	  ld   a,(hl)
8660: B2      	  or   d
8661: 77      	  ld   (hl),a
8662: D1      	  pop  de
              	
              	; @end
              	
8663:         	cforth_6f_72_21_end:
8663: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] fill
              	
8665:         	cforth_66_69_6c_6c_forth:
8665: DDE1    	    pop ix
8667:         	cforth_66_69_6c_6c_start:
              	          ; called as <byte> <address> <count> fill
8667: E1      	  pop  hl       ; top is count (DE) 2nd address (HL) 3rd value (BC)
8668: C1      	  pop  bc
8669: 7A      	  ld   a,d
866A: B3      	  or   e
866B: 2807    	  jr   z,__fill2
              	
866D: 71      	__fill1:ld   (hl),c
866E: 23      	  inc  hl
866F: 0B      	  dec  bc
8670: 7A      	  ld   a,d
8671: B3      	  or   e
8672: 20F9    	  jr   nz,__fill1
8674:         	__fill2:
8674: D1      	  pop  de
              	
              	; @end
              	
8675:         	cforth_66_69_6c_6c_end:
8675: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ix] move
              	
8677:         	cforth_6d_6f_76_65_forth:
8677: DDE1    	    pop ix
8679:         	cforth_6d_6f_76_65_start:
              	             ; source destination count move
              	
8679: 42      	  ld   b,d         ; top is count (BC)
867A: 4B      	  ld   c,e
867B: E1      	  pop  hl          ; 2nd is target (HL)
867C: D1      	  pop  de          ; 3rd is source (DE)
              	
867D: 78      	  ld   a,b
867E: B1      	  or   c
867F: 2815    	  jr   z,__move2
              	
8681: AF      	  xor  a          ; find direction.
8682: ED52    	  sbc  hl,de
8684: 7C      	  ld   a,h
8685: 19      	  add  hl,de
8686: CB7F    	  bit  7,a         ; if +ve use LDDR
8688: 2805    	  jr   z,__move3
              	
868A: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
868B: EDB0    	  ldir
868D: 1807    	  jr   __move2
              	
868F:         	__move3:
868F: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
8690: EB      	  ex   de,hl
8691: 09      	  add  hl,bc
8692: 1B      	  dec  de          ; -1 to point to last byte
8693: 2B      	  dec  hl
8694: EDB8    	  lddr
              	
8696:         	__move2:
8696: D1      	  pop  de
              	
              	; @end
              	
8697:         	cforth_6d_6f_76_65_end:
8697: DDE9    	    jp (ix)
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p@
              	
8699:         	cforth_70_40_forth:
8699: E1      	    pop hl
869A:         	cforth_70_40_start:
869A: 42      	  ld   b,d
869B: 4B      	  ld   c,e
869C: ED58    	  in   e,(c)
869E: 1600    	  ld   d,0
              	
              	; @end
              	
86A0:         	cforth_70_40_end:
86A0: E9      	    jp (hl)
86A1:         	cforth_70_40_macro:
86A1: 0606    	    ld b,cforth_70_40_end-cforth_70_40_start
86A3: 219A86  	    ld hl,cforth_70_40_start
86A6: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] p!
              	
86A9:         	cforth_70_21_forth:
86A9: E1      	    pop hl
86AA:         	cforth_70_21_start:
86AA: 42      	  ld   b,d
86AB: 4B      	  ld   c,e
86AC: D1      	  pop  de
86AD: ED59    	  out  (c),e
86AF: D1      	  pop  de
              	
              	; @end
              	
86B0:         	cforth_70_21_end:
86B0: E9      	    jp (hl)
86B1:         	cforth_70_21_macro:
86B1: 0606    	    ld b,cforth_70_21_end-cforth_70_21_start
86B3: 21AA86  	    ld hl,cforth_70_21_start
86B6: C39680  	    jp MacroExpand
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[hl] drop
              	
86B9:         	cforth_64_72_6f_70_forth:
86B9: E1      	    pop hl
86BA:         	cforth_64_72_6f_70_start:
86BA: D1      	  pop  de
              	
              	; @end
              	
86BB:         	cforth_64_72_6f_70_end:
86BB: E9      	    jp (hl)
86BC:         	cforth_64_72_6f_70_macro:
86BC: 0601    	    ld b,cforth_64_72_6f_70_end-cforth_64_72_6f_70_start
86BE: 21BA86  	    ld hl,cforth_64_72_6f_70_start
86C1: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[hl] dup
              	
86C4:         	cforth_64_75_70_forth:
86C4: E1      	    pop hl
86C5:         	cforth_64_75_70_start:
86C5: D5      	  push  de
              	
              	; @end
              	
86C6:         	cforth_64_75_70_end:
86C6: E9      	    jp (hl)
86C7:         	cforth_64_75_70_macro:
86C7: 0601    	    ld b,cforth_64_75_70_end-cforth_64_75_70_start
86C9: 21C586  	    ld hl,cforth_64_75_70_start
86CC: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] nip
              	
86CF:         	cforth_6e_69_70_forth:
86CF: DDE1    	    pop ix
86D1:         	cforth_6e_69_70_start:
86D1: E1      	  pop  hl
              	
              	; @end
              	
86D2:         	cforth_6e_69_70_end:
86D2: DDE9    	    jp (ix)
86D4:         	cforth_6e_69_70_macro:
86D4: 0601    	    ld b,cforth_6e_69_70_end-cforth_6e_69_70_start
86D6: 21D186  	    ld hl,cforth_6e_69_70_start
86D9: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] over
              	
86DC:         	cforth_6f_76_65_72_forth:
86DC: DDE1    	    pop ix
86DE:         	cforth_6f_76_65_72_start:
86DE: E1      	  pop  hl
86DF: D5      	  push  de
86E0: EB      	  ex   de,hl
              	
              	; @end
              	
86E1:         	cforth_6f_76_65_72_end:
86E1: DDE9    	    jp (ix)
86E3:         	cforth_6f_76_65_72_macro:
86E3: 0603    	    ld b,cforth_6f_76_65_72_end-cforth_6f_76_65_72_start
86E5: 21DE86  	    ld hl,cforth_6f_76_65_72_start
86E8: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ix] swap
              	
86EB:         	cforth_73_77_61_70_forth:
86EB: DDE1    	    pop ix
86ED:         	cforth_73_77_61_70_start:
86ED: E1      	  pop  hl
86EE: EB      	  ex   de,hl
86EF: E5      	  push  hl
              	
              	; @end
              	
86F0:         	cforth_73_77_61_70_end:
86F0: DDE9    	    jp (ix)
86F2:         	cforth_73_77_61_70_macro:
86F2: 0603    	    ld b,cforth_73_77_61_70_end-cforth_73_77_61_70_start
86F4: 21ED86  	    ld hl,cforth_73_77_61_70_start
86F7: C39680  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   22nd November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] bswap
              	
86FA:         	cforth_62_73_77_61_70_forth:
86FA:         	cforth_62_73_77_61_70_start:
86FA: 7A      	  ld   a,d
86FB: 53      	  ld   d,e
86FC: 5F      	  ld   e,a
              	
              	; @end
              	
86FD:         	cforth_62_73_77_61_70_end:
86FD: C9      	    ret
86FE:         	cforth_62_73_77_61_70_macro:
86FE: 0603    	    ld b,cforth_62_73_77_61_70_end-cforth_62_73_77_61_70_start
8700: 21FA86  	    ld hl,cforth_62_73_77_61_70_start
8703: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2*
              	
8706:         	cforth_32_2a_forth:
8706:         	cforth_32_2a_start:
8706: EB      	  ex   de,hl
8707: 29      	  add  hl,hl
8708: EB      	  ex   de,hl
              	
              	; @end
              	
8709:         	cforth_32_2a_end:
8709: C9      	    ret
870A:         	cforth_32_2a_macro:
870A: 0603    	    ld b,cforth_32_2a_end-cforth_32_2a_start
870C: 210687  	    ld hl,cforth_32_2a_start
870F: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] 2/
              	
8712:         	cforth_32_2f_forth:
8712:         	cforth_32_2f_start:
8712: CB3A    	  srl  d
8714: CB1B    	  rr   e
              	
              	; @end
              	
8716:         	cforth_32_2f_end:
8716: C9      	    ret
8717:         	cforth_32_2f_macro:
8717: 0604    	    ld b,cforth_32_2f_end-cforth_32_2f_start
8719: 211287  	    ld hl,cforth_32_2f_start
871C: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ++
              	
871F:         	cforth_2b_2b_forth:
871F:         	cforth_2b_2b_start:
871F: 13      	  inc  de
              	
              	; @end
              	
8720:         	cforth_2b_2b_end:
8720: C9      	    ret
8721:         	cforth_2b_2b_macro:
8721: 0601    	    ld b,cforth_2b_2b_end-cforth_2b_2b_start
8723: 211F87  	    ld hl,cforth_2b_2b_start
8726: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] +++
              	
8729:         	cforth_2b_2b_2b_forth:
8729:         	cforth_2b_2b_2b_start:
8729: 13      	  inc  de
872A: 13      	  inc  de
              	
              	; @end
              	
872B:         	cforth_2b_2b_2b_end:
872B: C9      	    ret
872C:         	cforth_2b_2b_2b_macro:
872C: 0602    	    ld b,cforth_2b_2b_2b_end-cforth_2b_2b_2b_start
872E: 212987  	    ld hl,cforth_2b_2b_2b_start
8731: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] --
              	
8734:         	cforth_2d_2d_forth:
8734:         	cforth_2d_2d_start:
8734: 1B      	  dec  de
              	
              	; @end
              	
8735:         	cforth_2d_2d_end:
8735: C9      	    ret
8736:         	cforth_2d_2d_macro:
8736: 0601    	    ld b,cforth_2d_2d_end-cforth_2d_2d_start
8738: 213487  	    ld hl,cforth_2d_2d_start
873B: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @macro[ret] ---
              	
873E:         	cforth_2d_2d_2d_forth:
873E:         	cforth_2d_2d_2d_start:
873E: 1B      	  dec  de
873F: 1B      	  dec  de
              	
              	; @end
              	
8740:         	cforth_2d_2d_2d_end:
8740: C9      	    ret
8741:         	cforth_2d_2d_2d_macro:
8741: 0602    	    ld b,cforth_2d_2d_2d_end-cforth_2d_2d_2d_start
8743: 213E87  	    ld hl,cforth_2d_2d_2d_start
8746: C39680  	    jp MacroExpand
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret] -
              	
8749:         	cforth_2d_forth:
8749:         	cforth_2d_start:
8749: 7A      	  ld   a,d
874A: 2F      	  cpl
874B: 57      	  ld   d,a
874C: 7B      	  ld   a,e
874D: 2F      	  cpl
874E: 5F      	  ld   e,a
              	
              	; @end
              	
874F:         	cforth_2d_end:
874F: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  negate
              	
8750:         	cforth_6e_65_67_61_74_65_forth:
8750:         	cforth_6e_65_67_61_74_65_start:
8750: 7A      	  ld   a,d
8751: 2F      	  cpl
8752: 57      	  ld   d,a
8753: 7B      	  ld   a,e
8754: 2F      	  cpl
8755: 5F      	  ld   e,a
8756: 13      	  inc  de
              	
              	; @end
              	
8757:         	cforth_6e_65_67_61_74_65_end:
8757: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  abs
              	
8758:         	cforth_61_62_73_forth:
8758:         	cforth_61_62_73_start:
8758: CB7A    	  bit  7,d
875A: 2807    	  jr   z,__IsPositive
875C: 7A      	  ld   a,d
875D: 2F      	  cpl
875E: 57      	  ld   d,a
875F: 7B      	  ld   a,e
8760: 2F      	  cpl
8761: 5F      	  ld   e,a
8762: 13      	  inc  de
8763:         	__IsPositive:
              	
              	; @end
              	
8763:         	cforth_61_62_73_end:
8763: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0=
              	
8764:         	cforth_30_3d_forth:
8764:         	cforth_30_3d_start:
8764: 7A      	  ld   a,d
8765: B3      	  or   e
8766: 110000  	  ld   de,$0000
8769: 2001    	  jr   nz,__IsNonZero
876B: 1B      	  dec  de
876C:         	__IsNonZero:
              	
              	; @end
              	
876C:         	cforth_30_3d_end:
876C: C9      	    ret
              	
              	; *********************************************************************************
              	
              	
              	; @forth[ret]  0<
              	
876D:         	cforth_30_3c_forth:
876D:         	cforth_30_3c_start:
876D: CB7A    	  bit  7,d
876F: 110000  	  ld   de,$0000
8772: 2801    	  jr   z,__IsPositive2
8774: 1B      	  dec  de
8775:         	__IsPositive2:
              	
              	; @end
              	
8775:         	cforth_30_3c_end:
8775: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   21st November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; @word[hl] inkey
              	
8776:         	cforth_69_6e_6b_65_79_forth:
8776: E1      	    pop hl
8777:         	cforth_69_6e_6b_65_79_start:
8777: D5      	  push  de
8778: CD8A81  	  call  IOScanKeyboard
877B: 5F      	  ld   e,a
877C: 1600    	  ld   d,0
              	
              	; @end
              	
877E:         	cforth_69_6e_6b_65_79_end:
877E: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] halt
              	
877F:         	cforth_68_61_6c_74_forth:
877F: E1      	    pop hl
8780:         	cforth_68_61_6c_74_start:
              	
8780: C32080  	  jp   HaltZ80
              	
              	; @end
              	
8783:         	cforth_68_61_6c_74_end:
8783: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @macro[ret] break
              	
8784:         	cforth_62_72_65_61_6b_forth:
8784:         	cforth_62_72_65_61_6b_start:
8784: DD01    	  db   $DD,$01
              	
              	; @endm
              	
8786:         	cforth_62_72_65_61_6b_end:
8786: C9      	    ret
8787:         	cforth_62_72_65_61_6b_macro:
8787: 0602    	    ld b,cforth_62_72_65_61_6b_end-cforth_62_72_65_61_6b_start
8789: 218487  	    ld hl,cforth_62_72_65_61_6b_start
878C: C39680  	    jp MacroExpand
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 1,
              	
878F:         	cforth_31_2c_forth:
878F: E1      	    pop hl
8790:         	cforth_31_2c_start:
8790: 7B      	  ld   a,e
8791: CD6380  	  call  FARCompileByte
8794: D1      	  pop  de
              	
              	; @endm
              	
8795:         	cforth_31_2c_end:
8795: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	
              	
              	; @word[hl] 2,
              	
8796:         	cforth_32_2c_forth:
8796: E1      	    pop hl
8797:         	cforth_32_2c_start:
8797: EB      	  ex   de,hl
8798: CD6380  	  call  FARCompileByte
879B: D1      	  pop  de
              	
              	; @endm
              	
879C:         	cforth_32_2c_end:
879C: E9      	    jp (hl)
              	
              	; ***************************************************************************************
              	;    FORTH and MACRO are special cases. See makedictionary.py
              	; ***************************************************************************************
              	
              	
              	; @word[ret] forth
              	
879D:         	cforth_66_6f_72_74_68_forth:
879D:         	cforth_66_6f_72_74_68_start:
879D: 3E00    	  ld   a,$00
879F: 32E18A  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
87A2:         	cforth_66_6f_72_74_68_end:
87A2: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	
              	; @word[ret] macro
              	
87A3:         	cforth_6d_61_63_72_6f_forth:
87A3:         	cforth_6d_61_63_72_6f_start:
87A3: 3E00    	  ld   a,$00
87A5: 32E18A  	  ld   (DICTForthMacroFlag),a
              	
              	; @endm
              	
87A8:         	cforth_6d_61_63_72_6f_end:
87A8: C9      	    ret
              	
87A9:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
87A9: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
87AD: 00000000	
87B1: 0C1E1E0C	
87B5: 0C000C00	
87B9: 36360000	
87BD: 00000000	
87C1: 36367F36	
87C5: 7F363600	
87C9: 183E603C	
87CD: 067C1800	
87D1: 0063660C	
87D5: 18336300	
87D9: 1C361C3B	
87DD: 6E663B00	
87E1: 30306000	
87E5: 00000000	
87E9: 0C183030	
87ED: 30180C00	
87F1: 30180C0C	
87F5: 0C183000	
87F9: 00331E7F	
87FD: 1E330000	
8801: 0018187E	
8805: 18180000	
8809: 00000000	
880D: 00181830	
8811: 0000007E	
8815: 00000000	
8819: 00000000	
881D: 00181800	
8821: 03060C18	
8825: 30604000	
8829: 3E63676F	
882D: 7B733E00	
8831: 18381818	
8835: 18187E00	
8839: 3C66061C	
883D: 30667E00	
8841: 3C66061C	
8845: 06663C00	
8849: 0E1E3666	
884D: 7F060F00	
8851: 7E607C06	
8855: 06663C00	
8859: 1C30607C	
885D: 66663C00	
8861: 7E66060C	
8865: 18181800	
8869: 3C66663C	
886D: 66663C00	
8871: 3C66663E	
8875: 060C3800	
8879: 00181800	
887D: 00181800	
8881: 00181800	
8885: 00181830	
8889: 0C183060	
888D: 30180C00	
8891: 00007E00	
8895: 007E0000	
8899: 30180C06	
889D: 0C183000	
88A1: 3C66060C	
88A5: 18001800	
88A9: 3E636F6F	
88AD: 6F603C00	
88B1: 183C6666	
88B5: 7E666600	
88B9: 7E33333E	
88BD: 33337E00	
88C1: 1E336060	
88C5: 60331E00	
88C9: 7C363333	
88CD: 33367C00	
88D1: 7F31343C	
88D5: 34317F00	
88D9: 7F31343C	
88DD: 34307800	
88E1: 1E336060	
88E5: 67331F00	
88E9: 6666667E	
88ED: 66666600	
88F1: 3C181818	
88F5: 18183C00	
88F9: 0F060606	
88FD: 66663C00	
8901: 7333363C	
8905: 36337300	
8909: 78303030	
890D: 31337F00	
8911: 63777F7F	
8915: 6B636300	
8919: 63737B6F	
891D: 67636300	
8921: 1C366363	
8925: 63361C00	
8929: 7E33333E	
892D: 30307800	
8931: 3C666666	
8935: 6E3C0E00	
8939: 7E33333E	
893D: 36337300	
8941: 3C667038	
8945: 0E663C00	
8949: 7E5A1818	
894D: 18183C00	
8951: 66666666	
8955: 66667E00	
8959: 66666666	
895D: 663C1800	
8961: 6363636B	
8965: 7F776300	
8969: 6363361C	
896D: 1C366300	
8971: 6666663C	
8975: 18183C00	
8979: 7F63460C	
897D: 19337F00	
8981: 3C303030	
8985: 30303C00	
8989: 6030180C	
898D: 06030100	
8991: 3C0C0C0C	
8995: 0C0C3C00	
8999: 081C3663	
899D: 00000000	
89A1: 00000000	
89A5: 0000007F	
89A9: 18180C00	
89AD: 00000000	
89B1: 00003C06	
89B5: 3E663B00	
89B9: 7030303E	
89BD: 33336E00	
89C1: 00003C66	
89C5: 60663C00	
89C9: 0E06063E	
89CD: 66663B00	
89D1: 00003C66	
89D5: 7E603C00	
89D9: 1C363078	
89DD: 30307800	
89E1: 00003B66	
89E5: 663E067C	
89E9: 7030363B	
89ED: 33337300	
89F1: 18003818	
89F5: 18183C00	
89F9: 06000606	
89FD: 0666663C	
8A01: 70303336	
8A05: 3C367300	
8A09: 38181818	
8A0D: 18183C00	
8A11: 0000667F	
8A15: 7F6B6300	
8A19: 00007C66	
8A1D: 66666600	
8A21: 00003C66	
8A25: 66663C00	
8A29: 00006E33	
8A2D: 333E3078	
8A31: 00003B66	
8A35: 663E060F	
8A39: 00006E3B	
8A3D: 33307800	
8A41: 00003E60	
8A45: 3C067C00	
8A49: 08183E18	
8A4D: 181A0C00	
8A51: 00006666	
8A55: 66663B00	
8A59: 00006666	
8A5D: 663C1800	
8A61: 0000636B	
8A65: 7F7F3600	
8A69: 00006336	
8A6D: 1C366300	
8A71: 00006666	
8A75: 663E067C	
8A79: 00007E4C	
8A7D: 18327E00	
8A81: 0E181870	
8A85: 18180E00	
8A89: 0C0C0C00	
8A8D: 0C0C0C00	
8A91: 7018180E	
8A95: 18187000	
8A99: 3B6E0000	
8A9D: 00000000	
8AA1: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		22nd November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8AA9:         	SystemInformationTable:
              	
8AA9:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8AA9: 00A0    			dw 		FreeMemory
8AAB:         	SINextFreeCodePage: 								; +2 	Next Free Code Byte Page
8AAB: 2400    			db 		FirstCodePage,0
              	
8AAD:         	SIBootCodeAddress:									; +4	Run from here
8AAD: 2080    			dw 		HaltZ80
8AAF:         	SIBootCodePage: 									; +6    Run page.
8AAF: 2400    			db		FirstCodePage,0
              	
8AB1:         	SIPageUsage:										; +8 	Page Usage Table
8AB1: FA8A0000			dw 		PageUsage,0 			
              	
8AB5:         	SIDisplayInformation:								; +12 	Display Information structure address
8AB5: E28A0000			dw 		DIScreenWidth,0
              	
8AB9:         	SIStack:											; +16 	Initial Z80 stack value
8AB9: FC7E0000			dw 		StackTop,0							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8ABD:         	PAGEStackPointer: 									; stack used for switching pages
8ABD: 0000    			dw 		0
8ABF:         	PAGEStackBase:
8ABF: FFFFFFFF			ds 		16
8AC3: FF...   	
              	
8ACF:         	COMXStackPointer:									; stack used for re-entrant Compiler
8ACF: D18A    			dw 		COMXStackBase
8AD1:         	COMXStackBase:
8AD1: FFFFFFFF			ds 		16
8AD5: FF...   	
              	
8AE1:         	DICTForthMacroFlag:									; does it go in FORTH ($00) MACRO ($40)
8AE1: 00      			db 		0
              	;
              	;			Display Information
              	;
8AE2:         	DIScreenWidth:										; +0 	Screen Width
8AE2: 00000000			dw 		0,0
8AE6:         	DIScreenHeight:										; +4 	Screen Height
8AE6: 00000000			dw 		0,0
8AEA:         	DIScreenSize: 										; +8    Screen Size in Characters
8AEA: 00000000			dw 		0,0
8AEE:         	DIScreenDriver:										; +12 	Screen Driver
8AEE: 00000000			dw 		0,0 								
8AF2:         	DIFontBase:											; +16 	768 byte font, begins with space
8AF2: A9870000			dw 		AlternateFont,0 							
8AF6:         	DIScreenMode:										; +20 	Current Mode
8AF6: 00000000			dw 		0,0
              	;
              	;			Page usage table.
              	;
8AFA:         	PageUsage:
8AFA: 01      			db 		1									; $20 (dictionary) [1 = system]
8AFB: 01      			db 		1 									; $22 (bootstrap)  [2 = code]
8AFC: 02      			db 		2									; $24 (first code)
8AFD: 00000000			db 		0,0,0,0,0 							; $26-$2E 		   [0 = unused]
8B01: 00      	
8B02: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8B06: 00000000	
8B0A: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8B0E: 00000000	
8B12: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8B16: 00000000	
8B1A: FF      			db 		$FF 								; end of page.
              	
8B1B: FFFFFFFF			org 	$A000
8B1F: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont               = $87A9 = 34729          kernel.asm:61
Boot                        = $8006 = 32774          kernel.asm:24
COMCompileExecute           = $84DE = 34014          compiler.asm:27 (unused)
COMXStackBase               = $8AD1 = 35537          data.asm:52
COMXStackPointer            = $8ACF = 35535          data.asm:50
CONSTConvert                = $83D6 = 33750          constant.asm:19
DICTAddWord                 = $841E = 33822          dictionary.asm:19 (unused)
DICTFindWord                = $847B = 33915          dictionary.asm:93
DICTForthMacroFlag          = $8AE1 = 35553          data.asm:55
DIFontBase                  = $8AF2 = 35570          data.asm:68
DIScreenDriver              = $8AEE = 35566          data.asm:66
DIScreenHeight              = $8AE6 = 35558          data.asm:62
DIScreenMode                = $8AF6 = 35574          data.asm:70
DIScreenSize                = $8AEA = 35562          data.asm:64
DIScreenWidth               = $8AE2 = 35554          data.asm:60
DIVDivideMod16              = $809E = 32926          divide.asm:18
DictionaryPage              = $0020 =    32          kernel.asm:15
Div16_Loop1                 = $80A8 = 32936          divide.asm:27
Div16_Loop2                 = $80B9 = 32953          divide.asm:41
Div16_NoAdd1                = $80B0 = 32944          divide.asm:33
Div16_NoAdd2                = $80C1 = 32961          divide.asm:47
EditBuffer                  = $7B08 = 31496          kernel.asm:12 (unused)
ErrorHandler                = $801E = 32798          kernel.asm:37
FARCompileByte              = $8063 = 32867          farmemory.asm:18
FARCompileWord              = $807B = 32891          farmemory.asm:40
FirstCodePage               = $0024 =    36          kernel.asm:17
FreeMemory                  = $A000 = 40960          data.asm:86
GFXClearScreen              = $80E3 = 32995          graphics.asm:18
GFXGetFontGraphicDE         = $8167 = 33127          graphics.asm:146
GFXInitialise48k            = $8257 = 33367          screen48k.asm:19
GFXInitialiseLayer2         = $82BA = 33466          screen_layer2.asm:19
GFXInitialiseLowRes         = $8351 = 33617          screen_lores.asm:18
GFXMode                     = $80ED = 33005          graphics.asm:32
GFXPrintCharacter48k        = $8283 = 33411          screen48k.asm:53
GFXPrintCharacterLayer2     = $82EA = 33514          screen_layer2.asm:56
GFXPrintCharacterLowRes     = $837B = 33659          screen_lores.asm:50
GFXWriteCharacter           = $8122 = 33058          graphics.asm:78
GFXWriteHexWord             = $8135 = 33077          graphics.asm:101 (unused)
GFXWriteHexWordA            = $8137 = 33079          graphics.asm:103 (unused)
HaltZ80                     = $8020 = 32800          kernel.asm:40
IOScanKeyboard              = $818A = 33162          keyboard.asm:18
L2PClear                    = $82C3 = 33475          screen_layer2.asm:26
L2PClearBank                = $82D3 = 33491          screen_layer2.asm:35
LowClearScreen              = $8364 = 33636          screen_lores.asm:30
MULTMultiply16              = $80C9 = 32969          multiply.asm:18
MacroExpand                 = $8096 = 32918          utilities.asm:18
PAGEInitialise              = $8024 = 32804          paging.asm:18
PAGERestore                 = $804D = 32845          paging.asm:62
PAGEStackBase               = $8ABF = 35519          data.asm:47
PAGEStackPointer            = $8ABD = 35517          data.asm:45
PAGESwitch                  = $8034 = 32820          paging.asm:34
PageUsage                   = $8AFA = 35578          data.asm:75
SIBootCodeAddress           = $8AAD = 35501          data.asm:25
SIBootCodePage              = $8AAF = 35503          data.asm:27
SIDisplayInformation        = $8AB5 = 35509          data.asm:33 (unused)
SINextFreeCode              = $8AA9 = 35497          data.asm:20
SINextFreeCodePage          = $8AAB = 35499          data.asm:22
SIPageUsage                 = $8AB1 = 35505          data.asm:30 (unused)
SIStack                     = $8AB9 = 35513          data.asm:36
StackTop                    = $7EFC = 32508          kernel.asm:13
SystemInformationTable      = $8AA9 = 35497          data.asm:18
__COMCE_CallHL              = $857D = 34173          compiler.asm:180
__COMCE_CompileCallEHL      = $8538 = 34104          compiler.asm:117
__COMCE_CompileConstantCode = $8528 = 34088          compiler.asm:103
__COMCE_Compiler_Green      = $84FE = 34046          compiler.asm:67
__COMCE_ExecuteConstantCode = $857E = 34174          compiler.asm:189
__COMCE_ExecuteEHL          = $8543 = 34115          compiler.asm:132
__COMCE_Executor_Yellow     = $8517 = 34071          compiler.asm:87
__COMError                  = $84F8 = 34040          compiler.asm:55
__COMExit                   = $84F0 = 34032          compiler.asm:44
__CONConFail                = $8415 = 33813          constant.asm:76
__CONConvLoop               = $83DF = 33759          constant.asm:27
__CONMinusExit              = $8402 = 33794          constant.asm:56
__CONNotNegative            = $840F = 33807          constant.asm:70
__Core__Mult_Loop           = $80D0 = 32976          multiply.asm:24
__Core__Mult_Shift          = $80D5 = 32981          multiply.asm:28
__DICTAddCopy               = $8464 = 33892          dictionary.asm:68
__DICTAddGetLength          = $8428 = 33832          dictionary.asm:29
__DICTCheckName             = $84A2 = 33954          dictionary.asm:123
__DICTCreateEntry           = $8445 = 33861          dictionary.asm:50
__DICTFindEndDictionary     = $8438 = 33848          dictionary.asm:41
__DICTFindExit              = $84D5 = 34005          dictionary.asm:156
__DICTFindFail              = $84CE = 33998          dictionary.asm:152
__DICTFindMainLoop          = $848A = 33930          dictionary.asm:106
__DICTFindNext              = $84C5 = 33989          dictionary.asm:146
__DICTFindNoMatch           = $84C2 = 33986          dictionary.asm:143
__GFXConfigure              = $8107 = 33031          graphics.asm:53
__GFXLayer2                 = $80FF = 33023          graphics.asm:46
__GFXLowRes                 = $8104 = 33028          graphics.asm:50
__GFXPromptCharacter        = $8182 = 33154          graphics.asm:167
__GFXWCExit                 = $8130 = 33072          graphics.asm:88
__GFXWHByte                 = $8149 = 33097          graphics.asm:119
__GFXWHDigit                = $815F = 33119          graphics.asm:133
__GFXWHNibble               = $8156 = 33110          graphics.asm:127
__IsNonZero                 = $876C = 34668          __words.asm:856
__IsPositive                = $8763 = 34659          __words.asm:837
__IsPositive2               = $8775 = 34677          __words.asm:874
__L2Exit                    = $834A = 33610          screen_layer2.asm:136
__L2Loop                    = $833B = 33595          screen_layer2.asm:123
__L2Not1                    = $8300 = 33536          screen_layer2.asm:76
__L2Not2                    = $8306 = 33542          screen_layer2.asm:80
__L2Not3                    = $830C = 33548          screen_layer2.asm:84
__L2NotSet                  = $8341 = 33601          screen_layer2.asm:128
__L2Outer                   = $8333 = 33587          screen_layer2.asm:118
__LPExit                    = $83CF = 33743          screen_lores.asm:120
__LessDifferentSigns        = $85ED = 34285          __words.asm:198
__LessExit                  = $85F4 = 34292          __words.asm:204
__LessFalse                 = $85E8 = 34280          __words.asm:194
__LessTrue                  = $85F1 = 34289          __words.asm:202
__LowLoop                   = $83BB = 33723          screen_lores.asm:104
__LowNotLower2              = $83B1 = 33713          screen_lores.asm:97
__LowNotSet                 = $83C1 = 33729          screen_lores.asm:109
__LowOuter                  = $83B3 = 33715          screen_lores.asm:99
__ZXWCCopy                  = $82AF = 33455          screen48k.asm:101
__ZXWCExit                  = $82B5 = 33461          screen48k.asm:107
___kr4                      = $81BB = 33211          keyboard.asm:49
__cs1                       = $8267 = 33383          screen48k.asm:29
__cs2                       = $826F = 33391          screen48k.asm:34
__fill1                     = $866D = 34413          __words.asm:428
__fill2                     = $8674 = 34420          __words.asm:434
__kr1                       = $819F = 33183          keyboard.asm:32
__kr2                       = $81AA = 33194          keyboard.asm:38
__kr3                       = $81AC = 33196          keyboard.asm:41
__kr_exit                   = $81DB = 33243          keyboard.asm:79
__kr_keypressed             = $81D5 = 33237          keyboard.asm:73
__kr_no_shift_table         = $81DF = 33247          keyboard.asm:94
__kr_shift_table            = $822F = 33327          keyboard.asm:106
__kr_symbol_shift_table     = $8207 = 33287          keyboard.asm:100
__move2                     = $8696 = 34454          __words.asm:480
__move3                     = $868F = 34447          __words.asm:472
_end                        = $C001 = 49153          kernel.asm:18 (unused)
_size                       = $4001 = 16385          kernel.asm:18 (unused)
cforth_21_end               = $8640 = 34368          __words.asm:359
cforth_21_forth             = $8639 = 34361          __words.asm:348 (unused)
cforth_21_macro             = $8642 = 34370          __words.asm:361 (unused)
cforth_21_start             = $863B = 34363          __words.asm:350
cforth_2a_end               = $8592 = 34194          __words.asm:27 (unused)
cforth_2a_forth             = $858B = 34187          __words.asm:18 (unused)
cforth_2a_start             = $858D = 34189          __words.asm:20 (unused)
cforth_2b_21_end            = $8656 = 34390          __words.asm:387 (unused)
cforth_2b_21_forth          = $864A = 34378          __words.asm:371 (unused)
cforth_2b_21_start          = $864C = 34380          __words.asm:373 (unused)
cforth_2b_2b_2b_end         = $872B = 34603          __words.asm:738
cforth_2b_2b_2b_forth       = $8729 = 34601          __words.asm:731 (unused)
cforth_2b_2b_2b_macro       = $872C = 34604          __words.asm:740 (unused)
cforth_2b_2b_2b_start       = $8729 = 34601          __words.asm:732
cforth_2b_2b_end            = $8720 = 34592          __words.asm:719
cforth_2b_2b_forth          = $871F = 34591          __words.asm:713 (unused)
cforth_2b_2b_macro          = $8721 = 34593          __words.asm:721 (unused)
cforth_2b_2b_start          = $871F = 34591          __words.asm:714
cforth_2b_6f_72_end         = $85D7 = 34263          __words.asm:161 (unused)
cforth_2b_6f_72_forth       = $85CF = 34255          __words.asm:148 (unused)
cforth_2b_6f_72_start       = $85D0 = 34256          __words.asm:150 (unused)
cforth_2b_end               = $85B3 = 34227          __words.asm:94
cforth_2b_forth             = $85AE = 34222          __words.asm:85 (unused)
cforth_2b_macro             = $85B5 = 34229          __words.asm:96 (unused)
cforth_2b_start             = $85B0 = 34224          __words.asm:87
cforth_2d_2d_2d_end         = $8740 = 34624          __words.asm:775
cforth_2d_2d_2d_forth       = $873E = 34622          __words.asm:768 (unused)
cforth_2d_2d_2d_macro       = $8741 = 34625          __words.asm:777 (unused)
cforth_2d_2d_2d_start       = $873E = 34622          __words.asm:769
cforth_2d_2d_end            = $8735 = 34613          __words.asm:756
cforth_2d_2d_forth          = $8734 = 34612          __words.asm:750 (unused)
cforth_2d_2d_macro          = $8736 = 34614          __words.asm:758 (unused)
cforth_2d_2d_start          = $8734 = 34612          __words.asm:751
cforth_2d_end               = $874F = 34639          __words.asm:798 (unused)
cforth_2d_forth             = $8749 = 34633          __words.asm:787 (unused)
cforth_2d_start             = $8749 = 34633          __words.asm:788 (unused)
cforth_2f_6d_6f_64_end      = $85AC = 34220          __words.asm:77 (unused)
cforth_2f_6d_6f_64_forth    = $85A5 = 34213          __words.asm:68 (unused)
cforth_2f_6d_6f_64_start    = $85A7 = 34215          __words.asm:70 (unused)
cforth_2f_end               = $859A = 34202          __words.asm:43 (unused)
cforth_2f_forth             = $8594 = 34196          __words.asm:35 (unused)
cforth_2f_start             = $8596 = 34198          __words.asm:37 (unused)
cforth_30_3c_end            = $8775 = 34677          __words.asm:878 (unused)
cforth_30_3c_forth          = $876D = 34669          __words.asm:868 (unused)
cforth_30_3c_start          = $876D = 34669          __words.asm:869 (unused)
cforth_30_3d_end            = $876C = 34668          __words.asm:860 (unused)
cforth_30_3d_forth          = $8764 = 34660          __words.asm:849 (unused)
cforth_30_3d_start          = $8764 = 34660          __words.asm:850 (unused)
cforth_31_2c_end            = $8795 = 34709          __words.asm:955 (unused)
cforth_31_2c_forth          = $878F = 34703          __words.asm:946 (unused)
cforth_31_2c_start          = $8790 = 34704          __words.asm:948 (unused)
cforth_32_2a_end            = $8709 = 34569          __words.asm:682
cforth_32_2a_forth          = $8706 = 34566          __words.asm:674 (unused)
cforth_32_2a_macro          = $870A = 34570          __words.asm:684 (unused)
cforth_32_2a_start          = $8706 = 34566          __words.asm:675
cforth_32_2c_end            = $879C = 34716          __words.asm:972 (unused)
cforth_32_2c_forth          = $8796 = 34710          __words.asm:963 (unused)
cforth_32_2c_start          = $8797 = 34711          __words.asm:965 (unused)
cforth_32_2f_end            = $8716 = 34582          __words.asm:701
cforth_32_2f_forth          = $8712 = 34578          __words.asm:694 (unused)
cforth_32_2f_macro          = $8717 = 34583          __words.asm:703 (unused)
cforth_32_2f_start          = $8712 = 34578          __words.asm:695
cforth_40_end               = $8611 = 34321          __words.asm:293
cforth_40_forth             = $860B = 34315          __words.asm:283 (unused)
cforth_40_macro             = $8613 = 34323          __words.asm:295 (unused)
cforth_40_start             = $860D = 34317          __words.asm:285
cforth_61_62_73_end         = $8763 = 34659          __words.asm:841 (unused)
cforth_61_62_73_forth       = $8758 = 34648          __words.asm:826 (unused)
cforth_61_62_73_start       = $8758 = 34648          __words.asm:827 (unused)
cforth_61_6e_64_end         = $85C5 = 34245          __words.asm:119 (unused)
cforth_61_6e_64_forth       = $85BD = 34237          __words.asm:106 (unused)
cforth_61_6e_64_start       = $85BE = 34238          __words.asm:108 (unused)
cforth_62_72_65_61_6b_end   = $8786 = 34694          __words.asm:934
cforth_62_72_65_61_6b_forth = $8784 = 34692          __words.asm:928 (unused)
cforth_62_72_65_61_6b_macro = $8787 = 34695          __words.asm:936 (unused)
cforth_62_72_65_61_6b_start = $8784 = 34692          __words.asm:929
cforth_62_73_77_61_70_end   = $86FD = 34557          __words.asm:662
cforth_62_73_77_61_70_forth = $86FA = 34554          __words.asm:654 (unused)
cforth_62_73_77_61_70_macro = $86FE = 34558          __words.asm:664 (unused)
cforth_62_73_77_61_70_start = $86FA = 34554          __words.asm:655
cforth_63_21_end            = $862F = 34351          __words.asm:336
cforth_63_21_forth          = $8629 = 34345          __words.asm:326 (unused)
cforth_63_21_macro          = $8631 = 34353          __words.asm:338 (unused)
cforth_63_21_start          = $862B = 34347          __words.asm:328
cforth_63_40_end            = $8620 = 34336          __words.asm:314
cforth_63_40_forth          = $861B = 34331          __words.asm:305 (unused)
cforth_63_40_macro          = $8621 = 34337          __words.asm:316 (unused)
cforth_63_40_start          = $861C = 34332          __words.asm:307
cforth_64_72_6f_70_end      = $86BB = 34491          __words.asm:553
cforth_64_72_6f_70_forth    = $86B9 = 34489          __words.asm:546 (unused)
cforth_64_72_6f_70_macro    = $86BC = 34492          __words.asm:555 (unused)
cforth_64_72_6f_70_start    = $86BA = 34490          __words.asm:548
cforth_64_75_70_end         = $86C6 = 34502          __words.asm:572
cforth_64_75_70_forth       = $86C4 = 34500          __words.asm:565 (unused)
cforth_64_75_70_macro       = $86C7 = 34503          __words.asm:574 (unused)
cforth_64_75_70_start       = $86C5 = 34501          __words.asm:567
cforth_66_69_6c_6c_end      = $8675 = 34421          __words.asm:439 (unused)
cforth_66_69_6c_6c_forth    = $8665 = 34405          __words.asm:418 (unused)
cforth_66_69_6c_6c_start    = $8667 = 34407          __words.asm:420 (unused)
cforth_66_6f_72_74_68_end   = $87A2 = 34722          __words.asm:989 (unused)
cforth_66_6f_72_74_68_forth = $879D = 34717          __words.asm:982 (unused)
cforth_66_6f_72_74_68_start = $879D = 34717          __words.asm:983 (unused)
cforth_68_61_6c_74_end      = $8783 = 34691          __words.asm:920 (unused)
cforth_68_61_6c_74_forth    = $877F = 34687          __words.asm:912 (unused)
cforth_68_61_6c_74_start    = $8780 = 34688          __words.asm:914 (unused)
cforth_69_6e_6b_65_79_end   = $877E = 34686          __words.asm:904 (unused)
cforth_69_6e_6b_65_79_forth = $8776 = 34678          __words.asm:894 (unused)
cforth_69_6e_6b_65_79_start = $8777 = 34679          __words.asm:896 (unused)
cforth_6c_65_73_73_end      = $85F4 = 34292          __words.asm:209 (unused)
cforth_6c_65_73_73_forth    = $85D8 = 34264          __words.asm:178 (unused)
cforth_6c_65_73_73_start    = $85DA = 34266          __words.asm:180 (unused)
cforth_6d_61_63_72_6f_end   = $87A8 = 34728          __words.asm:1004 (unused)
cforth_6d_61_63_72_6f_forth = $87A3 = 34723          __words.asm:997 (unused)
cforth_6d_61_63_72_6f_start = $87A3 = 34723          __words.asm:998 (unused)
cforth_6d_6f_64_end         = $85A3 = 34211          __words.asm:60 (unused)
cforth_6d_6f_64_forth       = $859C = 34204          __words.asm:51 (unused)
cforth_6d_6f_64_start       = $859E = 34206          __words.asm:53 (unused)
cforth_6d_6f_76_65_end      = $8697 = 34455          __words.asm:485 (unused)
cforth_6d_6f_76_65_forth    = $8677 = 34423          __words.asm:447 (unused)
cforth_6d_6f_76_65_start    = $8679 = 34425          __words.asm:449 (unused)
cforth_6e_65_67_61_74_65_end = $8757 = 34647          __words.asm:818 (unused)
cforth_6e_65_67_61_74_65_forth = $8750 = 34640          __words.asm:806 (unused)
cforth_6e_65_67_61_74_65_start = $8750 = 34640          __words.asm:807 (unused)
cforth_6e_69_70_end         = $86D2 = 34514          __words.asm:591
cforth_6e_69_70_forth       = $86CF = 34511          __words.asm:584 (unused)
cforth_6e_69_70_macro       = $86D4 = 34516          __words.asm:593 (unused)
cforth_6e_69_70_start       = $86D1 = 34513          __words.asm:586
cforth_6f_72_21_end         = $8663 = 34403          __words.asm:410 (unused)
cforth_6f_72_21_forth       = $8658 = 34392          __words.asm:395 (unused)
cforth_6f_72_21_start       = $865A = 34394          __words.asm:397 (unused)
cforth_6f_72_end            = $85CE = 34254          __words.asm:140 (unused)
cforth_6f_72_forth          = $85C6 = 34246          __words.asm:127 (unused)
cforth_6f_72_start          = $85C7 = 34247          __words.asm:129 (unused)
cforth_6f_76_65_72_end      = $86E1 = 34529          __words.asm:612
cforth_6f_76_65_72_forth    = $86DC = 34524          __words.asm:603 (unused)
cforth_6f_76_65_72_macro    = $86E3 = 34531          __words.asm:614 (unused)
cforth_6f_76_65_72_start    = $86DE = 34526          __words.asm:605
cforth_70_21_end            = $86B0 = 34480          __words.asm:526
cforth_70_21_forth          = $86A9 = 34473          __words.asm:515 (unused)
cforth_70_21_macro          = $86B1 = 34481          __words.asm:528 (unused)
cforth_70_21_start          = $86AA = 34474          __words.asm:517
cforth_70_40_end            = $86A0 = 34464          __words.asm:503
cforth_70_40_forth          = $8699 = 34457          __words.asm:493 (unused)
cforth_70_40_macro          = $86A1 = 34465          __words.asm:505 (unused)
cforth_70_40_start          = $869A = 34458          __words.asm:495
cforth_73_63_72_65_65_6e_21_end = $8609 = 34313          __words.asm:266 (unused)
cforth_73_63_72_65_65_6e_21_forth = $8601 = 34305          __words.asm:256 (unused)
cforth_73_63_72_65_65_6e_21_start = $8603 = 34307          __words.asm:258 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_end = $8600 = 34304          __words.asm:248 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_forth = $85FD = 34301          __words.asm:242 (unused)
cforth_73_63_72_65_65_6e_2e_63_6c_65_61_72_start = $85FD = 34301          __words.asm:243 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_end = $85FC = 34300          __words.asm:234 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_forth = $85F6 = 34294          __words.asm:225 (unused)
cforth_73_63_72_65_65_6e_2e_6d_6f_64_65_start = $85F7 = 34295          __words.asm:227 (unused)
cforth_73_77_61_70_end      = $86F0 = 34544          __words.asm:633
cforth_73_77_61_70_forth    = $86EB = 34539          __words.asm:624 (unused)
cforth_73_77_61_70_macro    = $86F2 = 34546          __words.asm:635 (unused)
cforth_73_77_61_70_start    = $86ED = 34541          __words.asm:626


total time: 0.0171 sec.
no errors
